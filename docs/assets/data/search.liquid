


[ { "title" : "Significant Network Problems on macbooks with M1/ M2 Chips With Proposed Solutions", "category" : "", "tags" : " Highlight, Markdown", "url" : "/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions", "date" : "February 2, 2024", "excerpt" : "As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported significant stability issues &amp;amp;amp; network performance issues, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.One com...", "content" : "As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported significant stability issues &amp;amp; network performance issues, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.One common complaint is sudden long drops in transfer rates, often resulting in frustrating experiences for users. These issues can be attributed to the design of the network card in these devices, which may struggle to maintain consistent performance under certain conditions.When operating on the 2.4 GHz band, devices with M1 or M2 processors may experience very low transfer rates like 0.5 mbps transfer rate üò±, significantly lower than expected, not all the devices are necessarily affected, but a lot of complaints about this can be found.I had a connection about 30 times faster when connecting through my macbook pro 2019 than M1 Pro, simple benchmarks using networkQuality command.**M1 Pro based internet speed**Downlink: 0.568 Mbps, 31 RPM - Uplink: 1.920 Mbps, 36 RPM_**Intel based internet speed**_Downlink: 14.347 Mbps, 63 RPM - Uplink: 4.175 Mbps, 47 RPMSuch results were shocking to me üò±, maybe you are also in shock to the 15 Mbps speed of mine as I don‚Äôt have fiber-internet where I live and still on 4G. ü§£In the beginning I was suspecting that the VPN/MDM on the M1 Pro to be why I have sudden significant long speed drops, but after doing some research I found some useful findings that helped me retrieve the speed back on M1 Pro device.The 2.4GHz band offers a better coverage and penetration through walls. However, it is more suspectible to interference from other devices &amp;amp; nearby Wi-Fi networks. This can potentially lead to congestion and speed drops, especially in crowded areas. On the other hand, the 5GHz band is generally faster and is less susceptible to interference. However, it has a shorter range and may have more difficulty penetrating objects.Connecting to a LAN via a USB dongle (specially with a monitor on the same dongle) is also reported to lead to network performance issues, further complicating the challenges faced by users relying on a stable and high-speed network connection.While these problems may seem daunting, there are potential workarounds and solutions that users can consider.1- When troubleshooting network performance issues on devices with M1 or M2 processors, utilizing the ‚ÄúnetworkQuality‚Äù command in safe mode can be a valuable diagnostic tool. By entering safe mode, the system loads only essential components, allowing users to isolate potential software conflicts or third-party applications that may be impacting network performance. Running the ‚ÄúnetworkQuality‚Äù command in this environment can provide a clearer picture of the device‚Äôs network status.This can help narrow down the potential sources of the issue, whether it‚Äôs related to software conflicts, driver issues, or other factors. By leveraging safe mode and the ‚ÄúnetworkQuality‚Äù command, users can gather crucial data to aid in the debugging process and work towards resolving network performance issues effectively.2- Switching to the 5 GHz band and disabling the 2.4 GHz network on your router can be an effective strategy for addressing performance issues associated with the 2.4 GHz band. Along with using 40MHz channel width, you can potentially mitigate the impact of congestion and interference, resulting in improved network performance.This simple change can often make a noticeable difference in the overall reliability and speed of the Wi-Fi network for devices with M1 or M2 processors.3- If you find yourself using a USB-C dongle for network connectivity using LAN and you are experiencing network issues, it may be worth considering a switch to Wi-Fi as an alternative. By transitioning to Wi-Fi, you can assess the network quality using ‚ÄúnetworkQuality‚Äù, This approach allows you to compare the performance of the USB-C dongle with that of the Wi-Fi connection, potentially identifying any specific issues related to the dongle or the network environment.4- disable needless network features such as ‚ÄúThunderbolt Bridge‚Äù which is a networking technology that allows for high-speed data transfer between two Mac computers using Thunderbolt ports. Consider disabling this feature and other features that you don‚Äôt use, disabling these is reported to solve the issue.It‚Äôs important to be aware of these potential network performance issues when using devices with M1 or M2 processors. some devices could be not affected by these issues, but I saw a lot of people complaining about the same, I hope this information proves helpful to those navigating network performance issues on M1 and M2 powered devices." }, { "title" : "Test Doubles In Swift (Part 1)", "category" : "", "tags" : " Highlight, Markdown", "url" : "/blog/test-doubles-in-swift-part-1", "date" : "October 25, 2023", "excerpt" : "Test doubles name is inspired by ‚Äústunt doubles‚Äù from movies industry.Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.However, when it comes to writing tests, one concept that...", "content" : "Test doubles name is inspired by ‚Äústunt doubles‚Äù from movies industry.Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.However, when it comes to writing tests, one concept that often perplexes developers is the use of test doubles, test doubles are objects that replace dependencies in our code during testing, enabling us to isolate and verify specific behaviors.In general, there are various types of test doubles, such as dummies, fakes, stubs, spies, and mocks, understanding when and how to use each type can greatly enhance the effectiveness of our tests and improve the overall quality of our code.In this blog post series, we will delve into the world of test doubles in Swift, exploring their purpose, distinctions, and practical examples, by the end, you‚Äôll have a solid understanding of how to leverage test doubles to write comprehensive and reliable tests.A test double is an object that stands in for a real dependency during testing, these dependencies, such as external services, databases, or complex components, can introduce complexity and make testing challenging, test doubles help us isolate the code under test and focus on specific behaviors, making our tests more reliable and efficient.Test doubles are designed to mimic the behavior of real objects, but they provide simplified or controlled implementations, by replacing real dependencies with test doubles, we can create predictable and controlled environments for testing, without relying on external systems or complex setups." }, { "title" : "iOS Accessibility Series (Part 1)", "category" : "", "tags" : " Highlight, Markdown", "url" : "/blog/ios-accessibility-series-part-1", "date" : "August 2, 2023", "excerpt" : "iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines provided by Apple to ensure that iOS applications are usable and inclusive for people with disabilities. As a developer, incorporating ac...", "content" : "iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines provided by Apple to ensure that iOS applications are usable and inclusive for people with disabilities. As a developer, incorporating accessibility features into your iOS app involves considering the diverse needs of users with visual, auditory, motor, cognitive, and any other impairments. (see table below for a list of most common impairments and disabilities)Many developers and businesses do not prioritize making their applications accessible for several reasons, first, there is often a lack of awareness about the significance of accessibility and the benefits it brings to a broader user base, second, some developers perceive accessibility implementation as a complex and time-consuming task, leading them to prioritize other features instead, there are also other concerns about additional costs, limited resources, the assumption that their target audience does not include people with disabilities can deter developers from investing in accessibility.Legal enforcement of accessibility regulations may be weak or inconsistent in some regions, reducing the incentive to comply, moreover, the emphasis on aesthetics over accessibility, inadequate training on accessibility best practices, and resistance to change can further hinder the adoption of accessible design, despite these challenges, raising awareness and promoting the positive impact of accessibility remain crucial in encouraging developers to make their applications inclusive and accessible to all users.Several countries have enacted laws and regulations to enforce digital accessibility. In the United States, the Americans with Disabilities Act (ADA) and Section 508 of the Rehabilitation Act of 1973 outline accessibility requirements for websites, applications, and other digital content provided by federal agencies and entities receiving federal funding.The Web Content Accessibility Guidelines (WCAG), created by the Web Accessibility Initiative (WAI) of the World Wide Web Consortium (W3C), are widely recognized as the global standard for web accessibility, these guidelines provide specific criteria for making digital content accessible to individuals with disabilities.Failure to comply with accessibility regulations and standards can lead to legal consequences. Companies and organizations that do not provide accessible digital content may face complaints, lawsuits, or enforcement actions by individuals, advocacy groups, or government agencies.Penalties can include fines, legal fees, court orders to rectify accessibility issues, and reputational damage.Several high-profile cases have set important precedents for digital accessibility enforcement, resulting in settlements or court rulings against companies that were found to have inaccessible websites or applications, these cases highlight the significance of accessibility and the legal ramifications of non-compliance.Numerous prominent cases have established crucial precedents for enforcing digital accessibility, leading to settlements or court rulings against companies with inaccessible websites or applications. Notably, Domino‚Äôs Pizza, Netflix, and Target faced legal issues related to the lack of accessible applications for individuals with disabilities. The Ninth Circuit Court of Appeals ruled in favor of a blind plaintiff, stating that the ADA applies to websites and mobile apps. Netflix settled with the National Association of the Deaf, agreeing to make its streaming content accessible with closed captions. Similarly, Target settled with the National Federation of the Blind, committing to enhance its website‚Äôs accessibility.These cases emphasize the significance of digital accessibility and the legal consequences for non-compliance, prompting businesses to increasingly prioritize accessibility for a more inclusive online environment.Main types of disabilities and impairments:VisualUsers with visual impairments may have a partial or complete loss of vision. They rely on assistive technologies like VoiceOver to navigate the app using spoken feedback. Developers must ensure that UI elements have meaningful labels, provide appropriate descriptions, and support dynamic text sizes for better readability. Additionally, maintaining proper contrast and avoiding reliance on color-only cues is crucial to aid users with low vision.When creating an accessible app, developers should consider various visual impairments, such as blindness, low vision, color blindness, glaucoma, cataracts, macular degeneration, nystagmus, diabetic retinopathy, hemianopia, and photophobia.To accommodate users with these conditions, designers should prioritize VoiceOver support, dynamic text sizing, high contrast options, and clear layouts. Regular accessibility testing with assistive technologies ensures the app meets the needs of all users, providing an inclusive experience for those with visual challenges.AuditoryUsers with auditory impairments experience hearing loss, which can range from mild to profound. Closed captioning and subtitles are essential for video or audio content to make it accessible to this audience. Developers should also consider providing visual or haptic feedback for important alerts or notifications.MotorUsers with motor impairments may have difficulty with precise touch gestures or using physical buttons. To accommodate these users, developers should ensure that app elements are well-spaced and have an appropriate touch target size. Supporting alternative input methods like switch control and voice commands can also enhance accessibility for users with motor challenges.CognitiveUsers with cognitive impairments may face challenges with memory, attention, and problem-solving. To cater to this audience, developers should strive for simplicity and clarity in the app&#39;s user interface. Avoiding complex navigation flows and providing clear instructions can make the app more user-friendly for individuals with cognitive disabilities.SpeechUsers with speech impairments may have difficulty communicating through traditional speech. Developers can consider integrating communication tools or support for alternative input methods like text-to-speech or augmentative and alternative communication (AAC) into their apps.Situational disabilitiesUsers in certain situations, such as noisy environments or poor lighting conditions, may benefit from accessibility features like closed captioning or larger text sizes." }, { "title" : "SwiftUI views are values and not objects!", "category" : "", "tags" : " ", "url" : "/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs", "date" : "May 19, 2023", "excerpt" : "In SwiftUI, views are value types rather than traditional objects üßê, this design approach is a fundamental aspect of SwiftUI‚Äôs declarative programming model and is aligned with the Swift language‚Äôs emphasis on value semantics.As value types, views...", "content" : "In SwiftUI, views are value types rather than traditional objects üßê, this design approach is a fundamental aspect of SwiftUI‚Äôs declarative programming model and is aligned with the Swift language‚Äôs emphasis on value semantics.As value types, views in SwiftUI are immutable and are copied when needed, resulting in predictable behavior and easy management of state and data flow, this means that when you modify a view, you are actually creating a new instance with the desired changes, rather than mutating the existing view, this immutability allows SwiftUI to efficiently track changes and perform targeted updates to the user interface.Value types promote a more functional and declarative style of programming, where you describe the desired state and SwiftUI takes care of updating the view hierarchy accordingly, they are also thread-safe by default, as copies are made when passing views between different execution contexts.Another advantage of using value types for views is that they enable SwiftUI‚Äôs built-in animations and transitions, by comparing the old and new values of a view, SwiftUI can automatically animate the changes, resulting in smooth and visually appealing user interface updates.The declarative programming paradigm is at the core of its design philosophy, declarative programming focuses on describing the desired state of the user interface rather than specifying step-by-step instructions on how to achieve that state, SwiftUI‚Äôs view tree engine leverages this approach to efficiently manage and update the user interface based on changes in the underlying state.You define your user interface using a hierarchy of composable and reusable views. Each view represents a specific part of the interface and is responsible for rendering itself based on the current state, by composing these views together, you create a tree-like structure known as the view hierarchy, the view hierarchy in SwiftUI is immutable, meaning that you define it once and SwiftUI takes care of updating it based on changes to the underlying state, when the state changes, (or even when the view re-appears when scrolling back and forth), SwiftUI re-evaluates the view hierarchy and determines the minimal set of updates needed to reflect the new state, this process is known as the reconciliation algorithm (AKA diffing algorithm).The reconciliation algorithm is where SwiftUI‚Äôs view tree engine shines. It efficiently compares the old and new view hierarchies, identifies the differences, and applies the necessary updates to the user interface, by only updating the specific parts of the view hierarchy that have changed, SwiftUI minimizes the amount of work needed to keep the UI in sync with the state, resulting in optimal performance.In contrast to UIKit, in SwiftUI view construction and updates are unified into a single code path, views are values rather than objects, described by values conforming to the View protocol, the view tree is transient and can be recreated at any time based on the underlying state, this declarative approach eliminates the need for separate event handlers and manual UI updates like in UIKit, SwiftUI‚Äôs view tree engine efficiently reconciles state changes, performs targeted updates, and ensures a reactive UI that stays in sync with the data, by relying on value semantics, SwiftUI can perform granular updates and avoid unnecessary computations, leading to a highly performant and responsive user interface.By relying on a declarative approach, SwiftUI allows developers to focus on describing the desired end state of the UI rather than worrying about the low-level details of UI manipulation, this shift in mindset üòé leads to more maintainable and expressive code, as developers can easily reason about the UI based on its desired state.Another significant aspect of SwiftUI‚Äôs view tree engine is its ability to efficiently handle updates. As views in SwiftUI are value types, changes in the state result in the creation of new view instances rather than mutating existing ones. SwiftUI employs a mechanism called ‚Äúvalue comparison‚Äù to determine the differences between the old and new views, enabling it to perform targeted updates to the UI.Additionally, SwiftUI‚Äôs view tree engine embraces a reactive programming model. Views in SwiftUI are not just passive representations of UI elements but are also capable of reacting to changes in the state, this reactive nature enables automatic propagation of state changes throughout the view hierarchy, ensuring that the UI remains synchronized with the underlying data.In conclusion, SwiftUI‚Äôs view tree engine revolutionizes UI development by embracing the declarative programming paradigm. It provides an efficient and responsive user interface by leveraging value types, value comparisons, and reactive programming.The ability to describe UI in a declarative manner, combined with targeted updates and optimization techniques, empowers developers to create intuitive and performant user interfaces with ease." }, { "title" : "This is why I don&#39;t use GIT GUI tools.", "category" : "", "tags" : " ", "url" : "/blog/this-is-why-i-dont-use-git-gui-tools", "date" : "January 30, 2023", "excerpt" : "Any seasoned iOS engineer who uses Xcode can see that it lacks a lot of git features, which is OK as it‚Äôs not mainly a source control application.We can see only primitive features there, which may suffice for personal or small projects, but if yo...", "content" : "Any seasoned iOS engineer who uses Xcode can see that it lacks a lot of git features, which is OK as it‚Äôs not mainly a source control application.We can see only primitive features there, which may suffice for personal or small projects, but if you are working on a larger team, you will find it very difficult and sometimes impossible to use source control using the IDE only.Xcode‚Äôs Source ControlSome Engineers may also notice that markers near files like ‚ÄúA‚Äù, ‚ÄúM‚Äù and ‚ÄúC‚Äù etc.. are stuck most of the time too, so you wont be able to directly tell about file statuses if they are added, modified, conflicting, etc..Convincing backend engineers to use the terminal will be easier, because GUI will not automatically update repo‚Äôs trunk on a server daily at 1:30 AM, but a cronjob that deals with the CLI can easily do this, on the other hand, convincing a mobile developer about this can be a bit more more difficult, because the need for this is not easily demonstrated.I will start directly with discussing few real life examples.. I‚Äôm sure I can think of dozens of cases, but let‚Äôs keep this post small.. I will list the commands I use, so you can have an idea about the more power we can have in terminal.1- PR Reverts: a feature introduced by Github, PR reverts, say you have an already merged pull request, and you want to revert it before a tight-deadline like a branch cut, using Github‚Äôs revert feature will not ask about details of commits to be removed, it most probably will remove commits that were merged in the PR, so you may easily end up removing extra stuff that is irrelevant by accident.But using such command, you will have fine-grained control about what commit to remove or keep.git revert --no-commit someHash 2- Submodules: if you have nested git repos (submodules), such feature maybe not be existent in most GUI tools.I normally have terminal open all day, and I can‚Äôt live without it üßê, I hate to push buttons without knowing exactly what each button does, tools can come and go, the CLI will be always what GUI tools are built on.It‚Äôs convenient to set up install scripts, build scripts, deploy scripts, etc.. when working on a large team, one will have no idea what exactly happens in the GUI based app, and in the old times I‚Äôve seen colleagues do bad things impossible to restore without the CLI ü§¶üèª.I feel several times faster using the command line than clicking through with a mouse.GIT GUI tools were meant to mitigate complexity, but to me, they seem to add more complexity if the project is large, I once seen non-git standard terminology, which normally makes things harder in general.PS: the only real use of source control in Xcode is the diffing tools, it visualizes diffs perfectly. ü§ìgit addgit annotategit bisectgit blamegit checkoutgit checkout -bgit cherry-pickgit clean -fdxgit clonegit clone --single-branchgit commitgit commit --amend -m &quot;New commit message.&quot;git configgit diffgit diff --checkgit fetchgit gcgit initgit loggit log --allgit log --onelinegit log --summarygit log -pgit mergegit pull --rebasegit pushgit push --set-upstream origingit push -u origin feature_branch_namegit rebasegit remote -avgit remote addgit reset --hardgit restoregit revertgit rmgit shortloggit showgit stashgit stash listgit stash popgit statusgit taggit worktreecommon git commands that I use (sorted alphabetically)" }, { "title" : "Why I prefer to store my files on a digital ocean space &amp; not google drive or dropbox.", "category" : "", "tags" : " ", "url" : "/blog/backup-on-spaces", "date" : "January 21, 2023", "excerpt" : "This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.I‚Äôm one of the people who once used floppies to backup html pages, (3DMax Tutorials back then) fr...", "content" : "This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.I‚Äôm one of the people who once used floppies to backup html pages, (3DMax Tutorials back then) from internet caf‚Äôes back in 2003, then came CDs, then came DVDs, I also remember the first flash drive my father got me as a teenager, it was 128 MB, this was not affordable for most of the people, now more than 1000x sized SSDs are way cheaper.The common solutions are google drive &amp;amp; dropbox, they offer (2TB plan) that are $10 monthly, but I prefer to use my own mountable drive with a CDN, to distribute my files with ease, the best way I found to store my work, was storing it on a digital ocean space (similar to AWS S3), and use a client (like cuber-duck) on my mac to directly mount it, or on any device I have.Pros &amp;amp; ConsProsDirect links!Economic, it starts with 5$Saved bandwidth, Content Delivery Network is easily setup, where you can save big amounts of transfer without crossing the caps.Total control on meta data and content type of files, etc... for example, you can specify if an uploaded mp4 is streamable or downloadable.Easily mounted into any device or server.Your files are served, and not just stored, for instance, you can host an angular website on it, without having load on your server.You can mask the url, to reflect your domain, which is more professional for clients, when doing demos.Cons- Can require some technical knowledge at first for some people.- Most of the desktop clients to mount such drives are not opensource nor free.- Files cannot be shared with specific people, they are either public or not.Use cases are infinite:- for example, if you do scraping, I was able to download few huge youtube channels as a background job on the server, without consuming my internet plan, without keeping some device downloading, and without having to store files locally, they are stored directly there üßê.- it works like a NAS (Network attached server), or as a media center." }, { "title" : "Gentle Introduction To Unit Testing.", "category" : "", "tags" : " ", "url" : "/blog/gentle-introduction-to-unit-testing", "date" : "January 16, 2023", "excerpt" : "One Monday morning, some new developer (Penguin üêß) started their first new job as a software engineer, the chat between two developers¬†(Penguin üêß)¬†and their team leader¬†(Rex¬†ü¶ñ) went like this.(Penguin üêß): I have noticed that we have test cases wri...", "content" : "One Monday morning, some new developer (Penguin üêß) started their first new job as a software engineer, the chat between two developers¬†(Penguin üêß)¬†and their team leader¬†(Rex¬†ü¶ñ) went like this.(Penguin üêß): I have noticed that we have test cases written for almost all features in our mobile app, why would we write unit tests if we have QA team that does the testing and quality assurance?(Rex¬†ü¶ñ): Yes, writing unit tests does not only guarantee that features behave correctly just after being developed / shipped, it also guarantees that when someone write any relevant code of new feature, it does not break any existing or any piece of code.the QA team can never test everything all over again when some new feature is introduced, it‚Äôs like an investment, you spend extra time writing unit tests during developing a feature, but prevent any potential bugs from happening in the future.A CI/CD job running all tests will prevent any developer from merging a code that breaks an existing feature (in case that feature has well written tests), there are other benefits, like tests can be a good documentation too for anyone intending to read your code.(Penguin üêß): my first function I wrote is about (application force update) checking, it compares a string that resembles an application version like 1.0.2, and compares it with another version like 1.1.2 to check if the app needs force update or not.so my responsibility would be checking against all the values of minimum value 000.000.000 up to 999.999.999 value, for both target and current versions, so my test function should iterate through all possible cases, right?(Rex¬†ü¶ñ): No!!, the idea of test cases, is that covers edge cases, and maybe un-expected cases like minus numbers in this example, and maybe few random usual cases, maybe have these test functions‚Ä¶testWhenCurrentVersionIsLessThanRequiredVersionRequiresUpdate testWhenRequiredVersionIsEqualToCurrentVersionRequiresNoUpdate testMaximumMajorNumberComparesCorrectly testMaximumMinorNumberComparesCorrectly testMinimumPatchNumberComparesCorrectly testMinimumMajorNumberComparesCorrectly testMinimumMinorNumberComparesCorrectly testMinimumPatchNumberComparesCorrectly testMinimumNumbersComparesCorrectly‚Ä¶. + some random normal cases‚Ä¶keep in mind, the naming convention should show the intention of the developer, even if the test function name becomes lengthy.covering all the cases, will cause tests to take long time, maybe few minutes in your case, you must totally avoid that, remember the unit tests criteria? the way you do it will break the first criteria ‚ÄúFast‚Äù, the normal time for tests is something like 50ms or something.Unit Tests Criteria ‚ÄúF.I.R.S.T‚Äù:**Fast**: we can run dozens of them in a second, if not more **Isolated**: should not depend on each other, or any external state. **Repeatable**: they should always give the same result when they are run, like a pure function. **Self-Verifying**: the test must unambiguously say whether it passed or failed, with no room for interpretation. **Timely**: they should be written before or alongside the production code that you are testing.(Penguin üêß): But we must have high test coverage, like 100% coverage to cover all cases, don‚Äôt we?(Rex¬†ü¶ñ): Test coverage means coverage on the code logic itself, like the percentage of lines tested, not on the ‚Äúpossible values coverage‚Äù, and by the way, test coverage is a flawed metric, it only means we have test functions that call our code, it does not mean that the test functions are good.(Penguin üêß): Good, yeah, any other benefits for having unit tests?(Rex¬†ü¶ñ): Testing reduces maintenance costs and therefore quantity of bugs, there are also other costs to consider like customer impact, the longer an issue goes undiscovered, the more expensive it is, which can result in negative reviews &amp;amp; lost trust, and of course lost money!(Penguin üêß): But why follow TDD (Test Driven Development) methodology? why write the tests before writing the feature itself?(Rex¬†ü¶ñ): There are a lot of other development methodologies, like TDD, ATDD, DDD, BDD, .. these are lengthy topic, I encourage you to read about them quickly, and the RGR lifecycle of TDD.(Penguin üêß): That‚Äôs really cool, how can I make sure my code is testable? and what makes it not?(Rex¬†ü¶ñ): You may consider architectural patterns, that make code more separated and easily tested, like MVVM, VIPER, VIP, ‚Ä¶, FRP may make your code easier to test, using dependency injection, and coordinator pattern, using pure functions, etc‚Ä¶(Penguin üêß): So I always need to mock stuff when testing, right?(Rex¬†ü¶ñ): No, Mocks are type of test doubles, there are also Fakes, Stubs, Spies, Dummies, look them up, and know when to use each, they are so confusing at first.![](images/test_doubles.jpg)When we say test doubles, the name is derived from stunt doubles(Penguin üêß): what other tips do you have?(Rex¬†ü¶ñ): yes, there are a few on top of my head- In network testing for mobile in general, no HTTP request should be made, you test the networking feature it self.- tests run alphabetically, you should not rename your tests to change their order of running, remember that tests should be independent, changing the order intentionally will break this criteria.- Xcode provides performance tests, that compares between previous runs, where you can also change the baseline, it also gives nicely formatted test coverage markers.- Writing no tests is better than writing flaky tests!" }, { "title" : "Refresher: Problem Solving (1-4)", "category" : "", "tags" : " ", "url" : "/blog/problem_solving_swift_1_4", "date" : "November 16, 2022", "excerpt" : "After reading the very popular book, grokking algorithms,Will be blogging about algorithms and data structures‚Ä¶ the book is very informative and easy to digest.Grokking Algorithms bookIt‚Äôs advised you get yourself familiar with data structures bef...", "content" : "After reading the very popular book, grokking algorithms,Will be blogging about algorithms and data structures‚Ä¶ the book is very informative and easy to digest.Grokking Algorithms bookIt‚Äôs advised you get yourself familiar with data structures before starting to solve problems‚Ä¶ I will not go into details, my advice is to try to solve the problems without looking at the solutions**Problem: 1**return a pair of 2 distinct values (if any) that sum up to a target number, from a nonempty array that has distinct integers.Different Solutions with different time complexities// Time: O(n^2)func solution1(_ array: [Int], _ targetSum: Int) -&amp;gt; [Int] { for i in 0 ..&amp;lt; array.count-1 { for j in i+1 ..&amp;lt; array.count { if array[i] + array[j] == targetSum { return [array[i],array[j]] } } } return []}// Time: O(n^2)func solution2(_ array: [Int], _ targetSum: Int) -&amp;gt; [Int] { for i in array { for j in array { if (i != j) &amp;amp;&amp;amp; targetSum == (i + j) { return [i,j] } } } return []}// Time: O(n*log(n))func solution3(_ array: [Int], _ targetSum: Int) -&amp;gt; [Int] { let sorted = array.sorted() var leftPointer = 0 var rightPointer = sorted.count - 1 while leftPointer &amp;lt; rightPointer { let leftMost = sorted[leftPointer] let rightMost = sorted[rightPointer] let currentSum = leftMost + rightMost if currentSum == targetSum { return [leftMost, rightMost] } else if currentSum &amp;lt; targetSum { leftPointer = leftPointer + 1 } else if currentSum &amp;gt; targetSum { rightPointer = rightPointer - 1 } } return []}// Time: O(n)func solution4(_ array: [Int], _ targetSum: Int) -&amp;gt; [Int] { var numberDictionary = [Int: Bool]() for number in array { let mayMatch = targetSum - number if let exists = numberDictionary[mayMatch], exists { return [mayMatch, number] } else { numberDictionary[number] = true } } return []}I‚Äôm not going to explain each code, you comment here if you have a question, will leave the analysis to you, doing a simple benchmark on a 100,000 values array, we can see these resultssolution1: 31.88 s.solution2: 18.41 s.solution3: 0.38 s.solution4: 0.20 s.¬†üèÜfunctions used for benchmarkingfunc printTimeElapsedWhenRunningCode(title:String, operation:()-&amp;gt;()) { let startTime = CFAbsoluteTimeGetCurrent() operation() let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime print(&quot;Time elapsed for \\(title): \\(timeElapsed) s.&quot;)}func timeElapsedInSecondsWhenRunningCode(operation: ()-&amp;gt;()) -&amp;gt; Double { let startTime = CFAbsoluteTimeGetCurrent() operation() let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime return Double(timeElapsed)}Problem: 2Given 2 non empty arrays, write a function that determines if the second array is a subsequence of array 1.‚ö†Ô∏è: Keep in mind, subsequence is not the same as subarray.// Time: O(n)func isValidSubsequence_solution1(_ array: [Int], _ sequence: [Int]) -&amp;gt; Bool { // sequence is empty if (sequence.count == 0) { return false } // if arrays are equal, directly return true. if (array == sequence) { return true } // the sequence is larger than the array, return false. if (sequence.count &amp;gt; array.count) { return false } var arrIdx = 0 var seqIdx = 0 while arrIdx &amp;lt; array.count, seqIdx &amp;lt; sequence.count { if array[arrIdx] == sequence[seqIdx] { seqIdx += 1 } arrIdx += 1 } return seqIdx == sequence.count}// Time: O(n)func isValidSubsequence_solution2(_ array: [Int], _ sequence: [Int]) -&amp;gt; Bool { // sequence is empty if (sequence.count == 0) { return false } // if arrays are equal, directly return true. if (array == sequence) { return true } // the sequence is larger than the array, return false. if (sequence.count &amp;gt; array.count) { return false } var seqIdx = 0 for value in array { if seqIdx == sequence.count { break } if value == sequence[seqIdx] { seqIdx += 1 } } return seqIdx == sequence.count}test results for these arrayslet myArray1 = Array(stride(from: -900005, through: 900005, by: 1))let myArray2 = Array(stride(from: -900000, through: 900000, by: 1))Time elapsed for solution1: 28.102 s.Time elapsed for solution2: 14.446 s. üèÜcan you guess why Solution 2 is better, even though they have same time complexity? ü§ìProblem 3:Write a function that takes in a non-empty array of integers that are sorted in ascending order and returns a new array with the squares of the original integers also sorted in ascending order.let me add 4 solutions along with explanation.// Bad solution, appending is expensive, it&#39;s better to init an array with the lengthfunc sortedSquaredArray_solution1(_ array: [Int]) -&amp;gt; [Int] { var sortedSquares = [Int]() for value in array { sortedSquares.append(value * value) } return sortedSquares.sorted()}// Time: O(nlog(n)) | Space O(n)func sortedSquaredArray_solution2(_ array: [Int]) -&amp;gt; [Int] { var sortedSquares = Array(repeating: 0, count: array.count) for (idx, value) in array.enumerated() { sortedSquares[idx] = value * value } return sortedSquares.sorted()}// same as before, but higher order functions is tuned for high performancefunc sortedSquaredArray_solution3(_ array: [Int]) -&amp;gt; [Int] { return array.map { $0 * $0 }.sorted()}// Time: O(n) | Space O(n)func sortedSquaredArray_solution4(_ array: [Int]) -&amp;gt; [Int] { var sortedSquares = Array(repeating: 0, count: array.count) var smallerValueIdx : Int = 0 var largerValueIdx : Int = array.count - 1 for idx in stride(from: array.count - 1, through: 0, by: -1) { let smallerValue = array[smallerValueIdx] let largerValue = array[largerValueIdx] if abs(smallerValue) &amp;gt; abs(largerValue) { sortedSquares[idx] = smallerValue * smallerValue smallerValueIdx += 1 } else { sortedSquares[idx] = largerValue * largerValue largerValueIdx -= 1 } } return sortedSquares}for the following inputlet myArraySortedSquares = Array(stride(from: -5000000, through: 5000000, by: 1))Time elapsed for solution1: 6.786 s.Time elapsed for solution2: 6.275 s.Time elapsed for solution3: 5.106 s.Time elapsed for solution4: 1.637 s. ü•áProblem 4:2 chess teams, competed for 1,000,000 times üßêgiven a 2D array of matches [host, guest]Example[[‚ÄúNepomniachtchi‚Äù, ‚ÄúGrischuk‚Äù], [‚ÄúKarjakin‚Äù, ‚ÄúGrischuk‚Äù], [‚ÄúNepomniachtchi‚Äù, ‚ÄúKeymer‚Äù], [‚ÄúDing Liren‚Äù, ‚ÄúGrischuk‚Äù], [‚ÄúKarjakin‚Äù, ‚ÄúAndreikin‚Äù], [‚ÄúCarlsen‚Äù, ‚ÄúGukesh D‚Äù], [‚ÄúAronian‚Äù, ‚ÄúGukesh D‚Äù], [‚ÄúCarlsen‚Äù, ‚ÄúAndreikin‚Äù], [‚ÄúNepomniachtchi‚Äù, ‚ÄúGukesh D‚Äù], [‚ÄúAronian‚Äù, ‚ÄúGukesh D‚Äù]]and an array of results, where 1 means host team wonExample[1, 1, 0, 0, 0, 0, 0, 1, 1, 1]find the winning player, ** for sake of simplicity, assume there is no draw in total points between players.import Foundationlet HOST_TEAM_WON = 1let WIN_POINTS = 1// O(n) time | O(k) space , where n: are matches and k is the number of teamsfunc chessWinner(_ matches: [[String]], _ results: [Int]) -&amp;gt; String { var bestPlayer = &quot;&quot; var scores = [String: Int]() scores[bestPlayer] = 0 for (idx, match) in matches.enumerated() { let (host, guest) = (match[0], match[1]) let winning = (results[idx] == HOST_TEAM_WON) ? (host) : (guest) if scores[winning] == nil { scores[winning] = 0} scores[winning] = scores[winning]! + WIN_POINTS if scores[winning]! &amp;gt; scores[bestPlayer]! { bestPlayer = winning } } return bestPlayer}func generateData() -&amp;gt; ([[String]] , [Int]) { let players1 = [&quot;Carlsen&quot;, &quot;Ding Liren&quot;, &quot;Nepomniachtchi&quot;, &quot;Karjakin&quot;, &quot;Aronian&quot;] let players2 = [&quot;Keymer&quot;, &quot;Vitiugov&quot;, &quot;Gukesh D&quot;, &quot;Andreikin&quot;, &quot;Grischuk&quot;] var matches = [[String]] () var results = [Int]() let possibleResults = [0,1] for _ in 0 ..&amp;lt; 10 { matches.append([players1.randomElement() ?? &quot;&quot;, players2.randomElement() ?? &quot;&quot;]) results.append(possibleResults.randomElement() ?? 0) } print(matches) print(results) return (matches, results)}func problem_04_solutions() { let data = generateData() printTimeElapsedWhenRunningCode(title:&quot;solution1&quot;) { let winner = chessWinner(data.0, data.1) print(winner) }}" }, { "title" : "iOS/Android Developer Security Basics", "category" : "", "tags" : " swift", "url" : "/blog/ios-android-developer-security-basics", "date" : "March 13, 2022", "excerpt" : "I couldn‚Äôt find a single place that covers the mobile developer security (must know) basics, this will be again like a chat between two developers (Lulu üë©üèº‚Äçüíª) and (Sam ü¶ñ)üë©üèº‚Äçüíª: What are the risks of not having good security precautions? I can see w...", "content" : "I couldn‚Äôt find a single place that covers the mobile developer security (must know) basics, this will be again like a chat between two developers (Lulu üë©üèº‚Äçüíª) and (Sam ü¶ñ)üë©üèº‚Äçüíª: What are the risks of not having good security precautions? I can see we spend big money on security.ü¶ñ: There are over 500 reported incidents of data-breach each year, It‚Äôs estimated that each incident costs 3.5M~5.0M USD on average.If you look at statistics, you can see that remote jobs increased these costs by 15%, since attackers would have more opportunities of attacking a target that is spread on different locations.üë©üèº‚Äçüíª: When people talk about security, the server is being presented as the main defense line, why would a mobile developer be concerned with security if the server/website is secure?ü¶ñ: Even if a website is securely developed and maintained, mobile apps still need to implement security best practices, while the server plays an important role, the client-side code in a mobile app can potentially expose users to risks if not developed securely, if the client is poorly written, you should expect a lot of attacks on the server.Mobile apps have direct access to users‚Äô sensitive data like location, contacts, files etc. on their devices, if an app is compromised, it could leak private user information, unlike browsers, mobile apps run locally on devices without the same protections of a browser sandbox, so vulnerabilities in app code could allow malicious actors to directly attack the device.Many mobile attacks happen by exploiting vulnerabilities in how apps download and execute code. Developers need to ensure app updates and payloads come from verified, untampered sources.As users spend more time in apps than browsers, mobile presents a larger attack surface. Security needs to be a priority throughout the development and deployment process on both frontend and backend.üë©üèº‚Äçüíª: But you are an iOS developer, and I develop for Android, would your tips and hints be applicable to Android too? oh, I almost forgot that both are based on Linux.ü¶ñ: wait, they are not both based on Linux, iOS is a¬†Unix-like Operating System¬†which is¬†based on Darwin(BSD)¬†operating system, while Android is Linux-based Operating System¬†and is an open source mobile operating system, there are a lot of precautions that are applicable on both OSs.üë©üèº‚Äçüíª: I was asking myself in the past, why not rely on HTTPS and that‚Äôs it?ü¶ñ: HTTPS protects your data in transit between your client application to the server, but only if you can validate the TLS certificate has not been compromised.üë©üèº‚Äçüíª: What are the mobile weak points? what can be hacked?ü¶ñ: Network , Disk, USB Port, etc‚Ä¶üë©üèº‚Äçüíª: That looks like a lot of terminology, can you explain the basics?ü¶ñ: You will be good to go if you know these as a start.TermBasic Explanation.Authenticationestablish a user‚Äôs identityAuthorizationgrant a user an access to a resource, look up the difference between Authorization and AuthenticationCryptographythe study of concepts like Encryption, decryption.Encryptionmeans of securing digital data using one or more mathematical techniques, along with a password or &quot;key&quot; used to decrypt the informationDecryptionthe conversion of encrypted data to its original form.Hashinga hash function is any function that can be used to map data of arbitrary size to fixed-size values, used mainly for fingerprinting.Forensicsa branch of digital forensic science pertaining to evidence found in computers and digital storage media.Sniffingprocess of monitoring and capturing all data packets passing through given networkHTTPSHypertext Transfer Protocol Secure, a web protocolSSLSecure Sockets LayerTLSTransport Layer Security (TLS)IP SpoofingIP spoofing is the creation of Internet Protocol (IP) packets which have a modified source address in order to either hide the identity of the senderReverse Engineeringis a process in which software, machines, aircraft, architectural structures and other products are deconstructed to extract design information from them.MITMMan in the middle, it‚Äôs a type of a cyber attack where they secretly relay and possibly alter the data&amp;nbsp;between two parties.XSSCross Site Scripting (XSS)SQL Injection:Read About it here.OWASPOpen Web Application Security Project (OWASP)MASVSMobile Application Security Verification Standard, it‚Äôs a sister project of OWASP Mobile Security testing guide.Binarya non-text encoded fileMach-O binaryUnder NeXTSTEP, OPENSTEP, macOS, and iOS, multiple Mach-O files can be combined in a multi-architecture binaryBasic Terminologyüë©üèº‚Äçüíª: Why would people with a jailbroken device be a threat on the app itself, a jailbreak only make the user hackable, right?ü¶ñ: No, The best practice, is to prevent people with Jailbroken devices from running your app, see my x04_checker repo, iOS Developers can use it to prevent jailbroken devices from running their applications.Jailbreaking is the process of exploiting the flaws of a locked-down electronic device to install software other than what the manufacturer has made available for that device. It allows the owner to gain full access to the root of the operating system and access all the features, you must know that 100% jailbreak detection is not possible, we need to make (bypassing jailbreak detection) time-consuming, because an attacker can steal the developer info, and thus steal the app info.Say a banking app has insufficient security on a jailbroken phone that is compromised, it could result in costly consequences for the banking app operator. For instance, if a user‚Äôs money is stolen due to their mobile banking app being hacked as a result of the jailbroken phone, the bank may need to reimburse the user even though it was not necessarily the bank‚Äôs fault.This is because banks often guarantee protection of users‚Äô money from theft, so a breach of security on the mobile app that enables theft could trigger the bank‚Äôs reimbursement responsibilities regardless of the root cause being the jailbroken phone.Similarly, social media or other apps with user accounts could face defamation lawsuits if inadequate security on a compromised mobile app allows hackers to use a user‚Äôs account without their consent due to the jailbroken phone.In such scenarios, the app operator may have to bear costs due to reputational or legal risks, despite the primary vulnerability being the jailbroken phone.üë©üèº‚Äçüíª: They say debugging and print statements can be a security vulnerability, is this true?ü¶ñ: Print normally only works on development builds, print will still send the data to the usb interface.As you mentioned print, It‚Äôs a heavy command though, even if your debugging device is not connected in debug mode with Xcode, leaving print statement of heavy objects might make your app slower during development, but anyway, this is not our topic.Keep in mind, NSLog will be left even in Distribution builds, any normal user can see the logs using the macOS console app, I used them when debugging opening the app using a notification when it‚Äôs terminated, this is not easy to do in Xcode directly, anyway, just use NSLog carefully, and treat the error log files with care, don‚Äôt log sensitive data, or leave trace of code symbols.With regards to logging on mobile apps, a common security concern is the potential leakage of personally identifiable information (PII) about users. Sensitive data like users‚Äô names, financial account details, physical locations and other personal information could inadvertently be written to log files if not properly scrubbed or encrypted.This exposes the risk of PII being accessed and misused by unauthorized parties who gain access to the device‚Äôs logs. Such access could occur either after the fact if the device is stolen, or even in real-time if a hacker manages to achieve remote access. Proper handling of logging is important to prevent such PII leaks that can negatively impact users‚Äô privacy and security.üë©üèº‚Äçüíª: What about certificate pinning?ü¶ñ: Certificate pinning simply prevents people from having the victim installing an incorrect certificate and making altered requests.When implementing TLS pinning, bundling the certificate within the mobile app may not be the most suitable approach on its own. While including a default certificate is reasonable, the app should also incorporate the ability to dynamically update the pinned certificate if the server‚Äôs certificate expires or needs revocation. Any bundled certificate would also need to be encrypted in a way that prevents attackers from simply replacing the file on the device.This is to ensure the certificate can be refreshed securely over time, while an attacker cannot tamper with the pinned certificate to circumvent TLS validation. A more robust TLS pinning implementation would account for eventual certificate changes on the server through a secure update mechanism within the app.üë©üèº‚Äçüíª: What about sensitive static strings?ü¶ñ: Never have your sensitive strings inside plist or any asset file, this is the most basic tip you should never miss.üë©üèº‚Äçüíª: Wait Sam, I downloaded a facebook apk online, and ran a simple command to scan the binary for strings that look similar to google api keys, that begin with AIz, and I can see this, any explanation why this is not hidden in the binary?¬†strings targetFile | grep &quot;targetString&quot;![](images/facebookstring-1024x695.jpeg)using the strings command on macosü¶ñ: There are multiple ways google makes sure that a request is authentic, from comparing hashes, to domain binding to bundle ids etc‚Ä¶ again, you need to have your sensitive data hidden, this is not an excuse.üë©üèº‚Äçüíª: Why is it said to be risky to use 3rd party libraries when developing sensitive apps like banks?üë®üèª‚Äçüíª: In normal cases, libraries are fine, just make sure that they are being audited, NPM libraries had a lot of these, for sensitive apps, it‚Äôs better to avoid them altogether.üë©üèº‚Äçüíª: If I follow all of these tips, I will be completely secure?ü¶ñ: The sad news is, No, there are a lot of other attacks, like URL-scheme attacks, when you define a url scheme, your app responds to that scheme, so for instance, you create a scheme myapp://. all links starting with your scheme will directly launch your app. A universal link doesn‚Äôt include your scheme in the url but they will still launch your application, apple allows other apps to the register the same url.üë©üèº‚Äçüíª: the alternative is universal links?ü¶ñ: correct!üë©üèº‚Äçüíª: That was a huge amount of info for a starter, any final thoughts?ü¶ñ: 100% Security for any Application is not possible but we can try to make the attacking/cracking of iOS App as much harder as possible.Security is not always about ‚Äúmake accessing the data impossible‚Äù. sometimes it is about cost and likelihood of retrieval versus importance of the data.More tips on top of my head: Avoid Objective-C if possible, it‚Äôs very easy to reverse engineer. Don‚Äôt write sensitive data into logs. Disable Keyboard caching (3rd party keyboard) Password/Pin should not be exposed during user interaction - Don‚Äôt include sensitive data in backup. User Credentials should be stored in (keystore, keychain‚Ä¶). App Transport Security - Certificate Pinning. Integrity Check. Prevent Running on rooted devices. Detect JailBreak, (Jail Monkey library). Use WebView carefully. Securing Data on disk. Securing Data across a network connection. Secure application logic. prevent Reverse Engineering (even if there is no sensitive data, if your app is novel, you don‚Äôt want people to see the code) Don‚Äôt share sensitive data with 3rd party Avoid keywords like (‚Äújail‚Äù,‚Äùsecurity‚Äù,‚Äùcydia‚Äù,‚Äùapt‚Äù) in variable &amp;amp; function names Hide the JB check deep in the app, not in appdelegate‚Ä¶ Some Jailbreaks are permanent, and are done by exploiting security flaws in hardware." }, { "title" : "GPS Hardware basics for mobile developers.", "category" : "", "tags" : " development, hardware, ios, programming, swift", "url" : "/blog/gps-hardware-basics-for-software-engineers", "date" : "March 10, 2022", "excerpt" : "Mobile software engineers (iOS and Android), are normally not familiar with how GPS works, instead of just getting Lat/Lon readings, and doing geo operations with it, why not become familiar with how GPS works? ü§ìThis will not be a lengthy article,...", "content" : "Mobile software engineers (iOS and Android), are normally not familiar with how GPS works, instead of just getting Lat/Lon readings, and doing geo operations with it, why not become familiar with how GPS works? ü§ìThis will not be a lengthy article, it will be a chat between an iOS developer (Alex üë®üèª‚Äçüíª) and an electrical engineer (Sarah üë©üèº‚Äçüíª).üë®üèª‚Äçüíª: So what does GPS stand for?üë©üèº‚Äçüíª: It stands for (Global Positioning System).üë®üèª‚Äçüíª: Who created it? and what for?üë©üèº‚Äçüíª: The GPS project was launched in the USA back in 1973 due to limitations of old navigation systems.üë®üèª‚Äçüíª: I know it works without internet, but do I need cellular service to use GPS?üë©üèº‚Äçüíª: No.üë®üèª‚Äçüíª: How come it works without internet or cellular service?üë©üèº‚Äçüíª: You get readings from satellites, there are about 24 artificial satellites in 6 orbits.üë®üèª‚Äçüíª: So a mobile needs to connect to all of these?üë©üèº‚Äçüíª: Of course not, when you are stationary, you need to be exposed to 3 of them, when you are moving, you will need to be exposed to 4.![](images/ConstellationGPS.gif)GPS Satellites animation (Wikipedia)üë®üèª‚Äçüíª: So how come it identifies me? and send me data?üë©üèº‚Äçüíª: The Satellites don‚Äôt identify you, they only emit synchronous pulses all the time everywhere.üë®üèª‚Äçüíª: And how does my mobile give me back the (latitude, longitude, and altitude)?üë©üèº‚Äçüíª: It compares the receive time of these pulses from each satellite, and use calculations to determine a point on earth, since the distance between these satellites is constant, and they have atomic clocks, the calculations will not be difficult.üë®üèª‚Äçüíª: The service is totally free, and I don‚Äôt have any subscription for GPS, how?üë©üèº‚Äçüíª: GPS is not the only service for (Global Navigation Satellite Systems), there are many like (GLONASS, BeiDou, Galileo‚Ä¶), there are other commercial solutions that I don‚Äôt know much about, there are a lot of details, I heard retail GPS receivers are designed to not work if the tracked object is moving fastly, you get the idea üßê?üë®üèª‚Äçüíª: ah! yes.![](images/Beidou_Navigation_Satellite_System_2012.png)BeiDou doesn&#39;t have full earth coverage.üë®üèª‚Äçüíª: What is the error margin?üë©üèº‚Äçüíª: It‚Äôs variable, but you can say between 15 to 50 meters, some commercial systems use other inertial systems to give more accurate estimations.üë®üèª‚Äçüíª: What is the minimum detectable value?üë©üèº‚Äçüíª: You mean the resolution? theoretically, as far as I know, it‚Äôs one inch, but practically it‚Äôs about 3 meters.üë®üèª‚Äçüíª: I once tried to use the GPS inside a big hospital, it didn‚Äôt serve any purpose, the readings were not accurate.üë©üèº‚Äçüíª: GPS does not work indoors.üë®üèª‚Äçüíª: But I saw some readings on my maps application.üë©üèº‚Äçüíª: it‚Äôs the last point that was read, some devices like Huawei also augment (Accel/Gyro) sensor data, to mimic a basic INS to give your readings inside buildings, but it‚Äôs not reliable.üë®üèª‚Äçüíª: And what is used for indoor navigation systems?üë©üèº‚Äçüíª: They use beacons and Bluetooth and other technologies, read about apple air tags!üë®üèª‚Äçüíª: You mentioned sensors, why can‚Äôt we use the basic sensors like accelerometer/gyroscope of the mobile to calculate the position?üë©üèº‚Äçüíª: when you ‚Äúintegrate‚Äù the acceleration twice, the error will explode fastly, and it will become useless in a short time of movement, even if this works, this will not give you an absolute position, and you have to deal with drifting and gimbal lock and a lot of complexities.üë®üèª‚Äçüíª: That was a lot of information, thank you.üë©üèº‚Äçüíª: Welcome!, see you soon." }, { "title" : "Swift (Set Data-Structure) Basics, With Practical Example : Pizza Cooking", "category" : "", "tags" : " data-structures, development, math, programming, swift", "url" : "/blog/swift-set-data-structure-with-practical-example-pizza-cooking", "date" : "March 8, 2022", "excerpt" : "Swift provides three main collection types, Arrays, Sets, and Dictionaries..A set is a collection of unique and unordered data, simply, the data elements has no order. and it‚Äôs guaranteed to have non-duplicate values. You use a set instead of an ...", "content" : "Swift provides three main collection types, Arrays, Sets, and Dictionaries..A set is a collection of unique and unordered data, simply, the data elements has no order. and it‚Äôs guaranteed to have non-duplicate values. You use a set instead of an array when you need to test efficiently for membership and you aren‚Äôt concerned with the order of the elements in the collection, or when you need to ensure that each element appears only once in a collection. Swift Source Code.Asking about the importance of sets is like asking about the importance of the alphabet, set theory is the basic to so much math, any practical application of anything in math is normally an application of set theory.![](images/220px-Venn_A_intersect_B.svg.png)a Venn diagram, showing the intersection of two sets (Wikipedia)The basic operations on sets are Union, Intersection, Difference, isSubset, isSuperset.. but swift provide a lot of functions, you can perform set operations with another set, an array, or any other sequence type üßê, you can use higher order functions like map and filter‚Ä¶ etc.func filterfunc isSubsetfunc isSupersetfunc isDisjointfunc subtractingfunc isStrictSupersetfunc isStrictSubsetfunc intersectionfunc map&amp;lt;T&amp;gt;func dropFirstfunc dropLastfunc dropfunc prefixfunc suffixfunc splitfunc firstIndexfunc shuffled&amp;lt;T&amp;gt;func shuffledfunc flatMap&amp;lt;ElementOfResult&amp;gt;func forEachfunc firstfunc withContiguousStorageIfAvailable&amp;lt;R&amp;gt;func enumeratedfunc minfunc maxfunc starts&amp;lt;PossiblePrefix&amp;gt;func elementsEqual&amp;lt;OtherSequence&amp;gt;func lexicographicallyPrecedes&amp;lt;OtherSequence&amp;gt;func containsfunc allSatisfyfunc reduce&amp;lt;Result&amp;gt;func reversedfunc flatMap&amp;lt;SegmentOfResult&amp;gt;func compactMap&amp;lt;ElementOfResult&amp;gt;func sortedfunc indexfunc formIndexfunc distancefunc randomElement&amp;lt;T&amp;gt;func randomElementfunc makeIteratorfunc isSubset&amp;lt;S&amp;gt;func isStrictSubset&amp;lt;S&amp;gt;func isSuperset&amp;lt;S&amp;gt;func isStrictSuperset&amp;lt;S&amp;gt;func isDisjoint&amp;lt;S&amp;gt;func union&amp;lt;S&amp;gt;func subtracting&amp;lt;S&amp;gt;func intersection&amp;lt;S&amp;gt;func symmetricDifference&amp;lt;S&amp;gt;func hashfunc joinedfunc joined&amp;lt;Separator&amp;gt;func encodefunc mapValues&amp;lt;T&amp;gt;func compactMapValues&amp;lt;T&amp;gt;func merging&amp;lt;S&amp;gt;func merginglet‚Äôs start with a simple example// Datavar myKitchenItemsSet: Set = [&quot;Mozzarella&quot;,&quot;Mushrooms&quot;,&quot;Pineapples&quot;,&quot;Tomatoes&quot;,&quot;Mushrooms&quot;,&quot;Garlic&quot;]let shoppingListItemsSet: Set = [&quot;Olives&quot;, &quot;Tomatoes&quot;,&quot;Sourdough&quot;]let pizzaIngredientsSet: Set = [&quot;Sourdough&quot;,&quot;Mozzarella&quot;,&quot;Mushrooms&quot;,&quot;Tomatoes&quot;,&quot;Olives&quot;]// the order of union operator is not important, even union1 and union2 show up differnlt when printing!let union1 = myKitchenItemsSet.union(shoppingListItemsSet)let union2 = shoppingListItemsSet.union(myKitchenItemsSet)// union1 and union2 show up differently when printed, but keep in mind that they are equalprint(&quot;union1&quot;,union1)print(&quot;union2&quot;,union2)print(&quot;areUnionsEqual&quot;,(union1 == union2))let itemsNeeded = shoppingListItemsSet.subtracting(myKitchenItemsSet)print(&quot;What I need to buy:&quot;,itemsNeeded)// Buy the needed elementsmyKitchenItemsSet.formUnion(itemsNeeded)let canMakePizza = pizzaIngredientsSet.isSubset(of: myKitchenItemsSet)print(&quot;canMakePizza&quot;,canMakePizza)Defining a set is straightforward, you can explicitly define the type to be a Set, notice how you can‚Äôt have multiple types directly, you can‚Äôt mix integers with strings for example, in the example the type was inferred though.Next we created two unions to proof that the order of the union has no value, it‚Äôs like addition, even though the union sets get printed with random order in the terminal.Then we used Subtraction to look up the items that we need to have on the shopping list, in other words, remove items already in the kitchen even if they are in the pizza recipe.We can add the items needed into my kitchen items, notice that how duplicate items are ignored, lastly we check if the kitchen items ‚Äúhas‚Äù all the items in the pizza recipe.Say you want to make a pizza for Justin Bieber?var pizzaIngredientsForJustinSet: Set = [&quot;Sourdough&quot;,&quot;Mozzarella&quot;,&quot;Tomatoes&quot;,&quot;Olives&quot;,&quot;Amanita phalloides&quot;]print(&quot;can I make Pizza for the Justin?&quot;,pizzaIngredientsForJustinSet.isSubset(of: myKitchenItemsSet))myKitchenItemsSet.insert(&quot;Rotten Mushrooms&quot;)myKitchenItemsSet.insert(&quot;Amanita phalloides&quot;)print(&quot;can I make Pizza for the Justin Bieber?&quot;,pizzaIngredientsForJustinSet.isSubset(of: myKitchenItemsSet))Yes, this will not work until you add ‚ÄúAmanita phalloides‚Äù üëçBridging between Set and NSSet You can bridge between Set and NSSet using the as operator, For bridging to be possible, the Element type of a set must be a class, or a type that bridges to a Foundation type. Swift Source Code.PerformanceSets are in general faster to process, but due to their restriction of non-repeated values, and having no order, they are not often used." }, { "title" : "Using unicode markers (LTR: 0x200E, RTL:200F) to align &quot;hybrid RTL/LTR strings&quot; correctly.", "category" : "", "tags" : " development, interface-builder, programming, swift", "url" : "/blog/using-invisible-markers-ltr-0x200e-rtl200f-to-align-hybrid-rtl-ltr-strings-correctly", "date" : "March 3, 2022", "excerpt" : "So you have some text that contains both Arabic and English languages at the same time? and having difficulty aligning it because sometimes it starts with english, and other times it starts with Arabic?The following example illustrates- this probl...", "content" : "So you have some text that contains both Arabic and English languages at the same time? and having difficulty aligning it because sometimes it starts with english, and other times it starts with Arabic?The following example illustrates- this problem üêõ- some hacky way to solve it üë∫- and the correct way to solve it üßê.![](images/image-2.png)3 example labelsTop line: shows a line that is being rendered incorrectly, because the first word is Arabic, and you are expecting it to show up on the left, but it‚Äôs not ü§¶üèª.Middle line: one hacky way to solve this, is to start your text all the time with a LTR word, not the best solution üë∫Bottom line: this is showing up correctly, because it‚Äôs adjusted using unicode markers.Unicode characters set offers two marker characters (LTR: 0x200E, RTL:200F). These are invisible, but control the direction, I just need to add this¬†**\\u{200E}**¬†to force the wrapping direction.Playground example:import UIKitimport PlaygroundSupportextension String { func withHighlighted(word: String) -&amp;gt; NSMutableAttributedString { let attributes = [ [NSAttributedString.Key.foregroundColor:UIColor.blue], [NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 14)] ] let range = (self as NSString).range(of: word) let result = NSMutableAttributedString(string: self) for attribute in attributes { result.addAttributes(attribute, range: range) } return result } }class MyViewController : UIViewController { override func loadView() { let view = UIView() let topLabel = UILabel() let middleLabel = UILabel() let bottomLabel = UILabel() topLabel.frame = CGRect(x: 40, y: 40, width: 300, height: 20) middleLabel.frame = CGRect(x: 40, y: 80, width: 300, height: 20) bottomLabel.frame = CGRect(x: 40, y: 120, width: 300, height: 20) let word1 = &quot;ÿπÿ®ÿØ ÿßŸÑŸÑŸá&quot; let word2 = &quot;added a new comment&quot; let adjustor = &quot;\\u{200E}&quot; topLabel.attributedText = &quot;\\(word1) \\(word2)&quot;.withHighlighted(word: word1) middleLabel.attributedText = &quot;note: \\(word1) \\(word2)&quot;.withHighlighted(word: word1) bottomLabel.attributedText = &quot;\\(adjustor) \\(word1) \\(word2)&quot;.withHighlighted(word: word1) view.addSubview(topLabel) view.addSubview(middleLabel) view.addSubview(bottomLabel) self.view = view } }PlaygroundPage.current.liveView = MyViewController()" }, { "title" : "Swift Bitwise Operators (with a couple of practical examples)", "category" : "", "tags" : " development, math, programming, swift", "url" : "/blog/swift-bitwise-operators-with-real-examples", "date" : "February 27, 2022", "excerpt" : "Bitwise operators are rarely used in everyday swift programming‚ö†Ô∏è : not to be confused by Logical Operators like ‚Äú&amp;amp;amp;&amp;amp;amp;‚Äù and ‚Äù||‚ÄùIt‚Äôs mainly used to perform operations on individual bits, ¬†they are extremely useful and used in¬†Flags,¬†...", "content" : "Bitwise operators are rarely used in everyday swift programming‚ö†Ô∏è : not to be confused by Logical Operators like ‚Äú&amp;amp;&amp;amp;‚Äù and ‚Äù||‚ÄùIt‚Äôs mainly used to perform operations on individual bits, ¬†they are extremely useful and used in¬†Flags,¬†Graphics,¬†Networking,¬†Encryption‚Ä¶OperatorDescription&amp;amp;&amp;nbsp;Binary AND|&amp;nbsp; &amp;nbsp;Binary OR^&amp;nbsp; &amp;nbsp;Binary XOR~&amp;nbsp; &amp;nbsp;Binary One&#39;s Complement&amp;lt;&amp;lt;&amp;nbsp; &amp;nbsp;Binary Shift Left&amp;gt;&amp;gt;&amp;nbsp; &amp;nbsp;Binary Shift RightSwift Bitwise OperatorsFirst, a refresher on the truth table of XOR, it gives True if both A and B are DifferentABResultTRUETRUEFALSETRUEFALSETRUEFALSETRUETRUEFALSEFALSEFALSEXOR Truth TableThe basic code to represent integers as bits, and each operator and it‚Äôs result ‚Ä¶ üßêextension Int { var binaryDescription: String { var binaryString = &quot;&quot; var internalNumber = self for _ in (1...self.bitWidth) { binaryString.insert(contentsOf: &quot;\\(internalNumber &amp;amp; 1)&quot;, at: binaryString.startIndex) internalNumber &amp;gt;&amp;gt;= 1 } return &quot;0b &quot; + binaryString } }func bitwise_example() { let x1 = 0x1 let x2 = 0x2 print(&quot;x1\\t&quot;, x1.binaryDescription ) print(&quot;x2\\t&quot;, x2.binaryDescription ) let binary_and = (x1 &amp;amp; x2) let binary_or = (x1 | x2) let binary_xor = (x1 ^ x2) let binary_complement = (~x1) let binary_shiftL = (x1 &amp;lt;&amp;lt; 1) let binary_shiftR = (x1 &amp;gt;&amp;gt; 1) print(&quot;&amp;amp;\\t&quot;, binary_and.binaryDescription ) print(&quot;|\\t&quot;, binary_or.binaryDescription ) print(&quot;^\\t&quot;, binary_xor.binaryDescription ) print(&quot;~\\t&quot;, binary_complement.binaryDescription ) print(&quot;&amp;lt;&amp;lt;\\t&quot;, binary_shiftL.binaryDescription ) print(&quot;&amp;gt;&amp;gt;\\t&quot;, binary_shiftR.binaryDescription ) }Outputx1\t 0b 0000000000000000000000000000000000000000000000000000000000000001x2\t 0b 0000000000000000000000000000000000000000000000000000000000000010&amp;amp;\t 0b 0000000000000000000000000000000000000000000000000000000000000000|\t 0b 0000000000000000000000000000000000000000000000000000000000000011^\t 0b 0000000000000000000000000000000000000000000000000000000000000011~\t 0b 1111111111111111111111111111111111111111111111111111111111111110&amp;lt;&amp;lt;\t 0b 0000000000000000000000000000000000000000000000000000000000000010&amp;gt;&amp;gt;\t 0b 0000000000000000000000000000000000000000000000000000000000000000Real Life Usage for them:**1- Color Format Conversion**Most probably, you would have such an extension in your boilerplate iOS app, it converts HEX colors into UIColor.extension UIColor { convenience init(red: Int, green: Int, blue: Int) { assert(red &amp;gt;= 0 &amp;amp;&amp;amp; red &amp;lt;= 255, &quot;Invalid red component&quot;) assert(green &amp;gt;= 0 &amp;amp;&amp;amp; green &amp;lt;= 255, &quot;Invalid green component&quot;) assert(blue &amp;gt;= 0 &amp;amp;&amp;amp; blue &amp;lt;= 255, &quot;Invalid blue component&quot;) self.init(red: CGFloat(red) / 255.0, green: CGFloat(green) / 255.0, blue: CGFloat(blue) / 255.0, alpha: 1.0) } convenience init(rgb: Int) { self.init( red: (rgb &amp;gt;&amp;gt; 16) &amp;amp; 0xFF, green: (rgb &amp;gt;&amp;gt; 8) &amp;amp; 0xFF, blue: rgb &amp;amp; 0xFF ) }}2- Quick &amp;amp; Dirty hashinglet a = 4012let b = 8102let c = 9101func dirtyHash(a: Int, b: Int, c: Int) -&amp;gt; Int{ return ( a ^ b ^ c ^ 9999)}3- Base64 EncodingBase64 encoding converts a series of 8 bit bytes into 6 bit character lookup indexes. (SHIFT)ing, (AND)ing, (OR)ing, (NOT)ing are used for implementing the bit operations necessary for Base64 encode/decode.4- Checking if a number is Odd/Even.func isEven(number: Int) -&amp;gt; Bool{ return ((number &amp;amp; 0x1) == 0)}func isOdd(number: Int) -&amp;gt; Bool{ return ((number &amp;amp; 0x1) &amp;gt; 0)}**5- Solving Problems efficiently and in a performant way.**Write a program to swap the value of two variable.Using temporary variablec = a;¬†a = b;¬†b = c;¬†Without using temporary variablea = a+b;¬†b = a-b;¬†a = a-b;¬†Using bitwise operatora = a^b;¬†b = a^b;¬†a = a^b;¬†6- Calculating valid network addresses for a subnet****7- Calculating Permission in Role-based access control systems, RBAC.8- Calculating Inverse Square Root very fastlyhttp://h14s.p5r.org/2012/09/0x5f3759df.htmlAlso:Some people use bitwise operators to handle multiple error code together, each bit can hold a separate value.N-bitmap can be a really cool and compact data structure." }, { "title" : "Easily Tiling Images in interface builder, without code !", "category" : "", "tags" : " development, interface-builder, programming, swift", "url" : "/blog/easily-tiling-images-in-interface-builder-without-code", "date" : "February 23, 2022", "excerpt" : "Tiling images in interface builder directly without code is easy‚Ä¶images, with and without tiling1- add an image into assets catalogue.2- select the asset, go to ‚Äúeditor‚Äù menu, then choose ‚ÄúShow Slicing‚Äù.3- the asset image will show up as darker, w...", "content" : "Tiling images in interface builder directly without code is easy‚Ä¶images, with and without tiling1- add an image into assets catalogue.2- select the asset, go to ‚Äúeditor‚Äù menu, then choose ‚ÄúShow Slicing‚Äù.3- the asset image will show up as darker, with a button labeled ‚ÄúStart Slicing‚Äù, and you will be able to select the slicing type.4- select how you want the image tiled, in normal cases you will have the setup like this, zeroed Left, Right, Top and Bottom, and the Width &amp;amp; Height as the image dimensions.5- for tilability, the image content mode should be fill, not fit.Keep experimenting, and go wild with your Imagination, sample of playing with small tilable images I have.." }, { "title" : "Why my 0.3 MB image occupies around 10 MB on RAM?", "category" : "", "tags" : " development, ios, programming, swift", "url" : "/blog/why-my-0-3-mb-image-takes-14-mb-on-ram", "date" : "February 22, 2022", "excerpt" : "You are writing an application that has a long list of entries, with each entry containing an image, the total download size of all images is about 10 MB, but the images take around 200 ~ 300 MB on RAM, you wonder why üßê?RAM normally does not under...", "content" : "You are writing an application that has a long list of entries, with each entry containing an image, the total download size of all images is about 10 MB, but the images take around 200 ~ 300 MB on RAM, you wonder why üßê?RAM normally does not understand images that are compressed, they are stored as raw bitmaps, even if the image is compressed, it gets inflated into memory as a raw image.Image Size on RAM = (pixels height √ó pixels width √ó color depth bytes)The following image takes around 300 KB on disk and has an sRGB color profile, which is 24 bits (8 bits per channel). ![](images/photo-1629820684221-d36e61748dc9-819x1024.jpeg)Unsplash (CC0)The size of the image on the RAM would be:Image Size on RAM = (1665‚Ää √ó ‚Ää2081 √ó 3) bytes = 9.8MBIn Swift, Kingfisher comes with an option to downsize images according to the screen scale, so you can have images in a reasonable size even if they come largely from the server.import UIKitimport Kingfisherextension UIImageView { func setImageAsThumb(url:String) { let formattedURL = url.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? &quot;&quot; let scale = UIScreen.main.scale let resizingProcessor = ResizingImageProcessor(referenceSize: CGSize(width: 50.0 * scale, height: 50.0 * scale)) self.kf.setImage(with: URL(string: formattedURL), placeholder: nil, options: [.processor(resizingProcessor)]) }}" }, { "title" : "Never Use Floating-Point / Double Data types for Money Calculations!", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/never-use-floating-point-double-data-types-for-monetary-calculations", "date" : "February 12, 2022", "excerpt" : "Floating point values, or even (Double precision floating point format), should be avoided when using a currency amount with fractions (like Dollars and cents), in its nature, it cannot be stored exactly as is in memory.Say we want to store 0.1 do...", "content" : "Floating point values, or even (Double precision floating point format), should be avoided when using a currency amount with fractions (like Dollars and cents), in its nature, it cannot be stored exactly as is in memory.Say we want to store 0.1 dollars, any floating-point data type can not store it as is, it get‚Äôs stored as an approximation (0.10000000149‚Ä¶.).When doing a series of math operations, some problem can rise, that is called (loss of significance), the errors can be amplified and cause trouble üßê.the solution is simple, use NSNumberlet myBalance = 12.333let decimal: Decimal = NSNumber(floatLiteral: 12.333).decimalValuelet result = decimal / 3" }, { "title" : "Swift: The Difference Between Void and ()", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-void-and", "date" : "November 29, 2021", "excerpt" : "Void is a data type that is common across a lot of programming languages, in Swift‚Äôs standard library, it‚Äôs simply an empty tuple, it‚Äôs used for for functions that return nothing, when defining a function, if you don‚Äôt specify a return type, you g...", "content" : "Void is a data type that is common across a lot of programming languages, in Swift‚Äôs standard library, it‚Äôs simply an empty tuple, it‚Äôs used for for functions that return nothing, when defining a function, if you don‚Äôt specify a return type, you get a function that return Void, this is how it‚Äôs defined in standard library.public typealias Void = ()You use Void to declare the type of a function, method, or closure, Keep in mind ü§ìthat () can mean two things:()¬†can be a type - the empty tuple type, which is the same as¬†Void.()¬†can be a value - an empty tuple, which is the same as¬†Void()." }, { "title" : "Swift: the difference between nil, Nil, NULL, NSNull", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-the-difference-between-nil-nil-null-nsnull", "date" : "November 27, 2021", "excerpt" : "As a programmer, sometimes you will need to define ‚Äúnothingness‚Äù‚Ä¶ üßêData stores can have a value, or simply be nothing, this nothing comes in different flavors (nil, Nil, Null, NSNull) which all came to be called ‚Äúnull‚Äù.MeaningNULLliteral null valu...", "content" : "As a programmer, sometimes you will need to define ‚Äúnothingness‚Äù‚Ä¶ üßêData stores can have a value, or simply be nothing, this nothing comes in different flavors (nil, Nil, Null, NSNull) which all came to be called ‚Äúnull‚Äù.MeaningNULLliteral null value for C pointersnilliteral null value for Objective-C objectsNilliteral null value for Objective-C classesNSNullsingelton object used to represent nullnull typesIn Swift, you will not be able to deal directly with NULL and Nil,say you have this code in Objective C// Machine.h#import &amp;lt;Foundation/Foundation.h&amp;gt;@interface Machine : NSObject@property (strong, nonatomic) id serialNumber;- (void) summary;@end// Machine.m#import &amp;lt;Foundation/Foundation.h&amp;gt;#import &quot;Machine.h&quot;@implementation Machine- (void) summary { NSLog(@&quot;Initializing Machine&quot;); NSString *label1 = @&quot;label1&quot;; NSString *label2 = nil; NSString *label3 = [NSNull null]; NSString *label4 = Nil; NSString *label5 = NULL; NSLog(@&quot;Label1 = %@&quot;,label1); NSLog(@&quot;Label2 = %@&quot;,label2); NSLog(@&quot;Label3 = %@&quot;,label3); NSLog(@&quot;Label4 = %@&quot;,label4); NSLog(@&quot;Label4 = %@&quot;,label5);}@endafter preparing the bridging header, you will be able to create Machine Objectslet OC_Machine = Machine()OC_Machine.summary()OC_Machine.serialNumber = 21OC_Machine.serialNumber = nilOC_Machine.serialNumber = NSNull()//OC_Machine.serialNumber = Nil//OC_Machine.serialNumber = Nullprint(OC_Machine.serialNumber)As you can see, the commented lines will not compile in swift, but should be running ok in Objective C, you will see this outputLabel1 = label1Label2 = (null)Label3 = Label4 = (null) Label4 = (null) Optional()[NSNull null] is a wrapper for nilnil¬†is defined as :¬†#define nil NULL¬†and is Objective C equivalent for C¬†NULLNil is for object pointers, NULL is for non pointers, Null and Nil both defined to be equal to the value zero.NULL¬†is a¬†void *,¬†nil¬†is an¬†id, and¬†Nil¬†is a Class pointer, NULL¬†is used for¬†non-object pointer¬†(like a C pointer) in Objective-C. Like¬†nil¬†,¬†NULL¬†got no value nor address (used to check if a struct is empty).keep in mind: In Objective-C: nil is a pointer to a non-existent object.In Swift: nil is not a pointer, it‚Äôs the absence of a value of a certain type. NULL and nil are equal to each other, but nil is an object value while NULL is a generic pointer value ((void*)0, to be specific).¬†[NSNull null]¬†is an object that‚Äôs meant to stand in for nil in situations where nil isn‚Äôt allowed. For example, you can‚Äôt have a nil value in an NSArray. So if you need to represent a ‚Äúnil‚Äù, you can use¬†[NSNull null]." }, { "title" : "Swift: Any/ AnyObject/ AnyHashable Differences", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-any-anyobject", "date" : "November 26, 2021", "excerpt" : "Although in normal cases, you should be specific in defining data types, swift offers Any, AnyObject, and AnyHashable.Any can represent an instance of any type, including functions, instance of a class, struct, or enum, it‚Äôs more general than AnyO...", "content" : "Although in normal cases, you should be specific in defining data types, swift offers Any, AnyObject, and AnyHashable.Any can represent an instance of any type, including functions, instance of a class, struct, or enum, it‚Äôs more general than AnyObject, where AnyObject is a protocol all classes indirectly conform to.AnyObject is useful when using Objetive-C / Swift, some parts of Objective-C use this protocol to enhance compatibility with Swift, it‚Äôs equivelant to ‚Äòid‚Äô in Objective-C.so, when to use Any / AnyObject ?say you have a dictionary..let anyStuff: [Any] = [1,‚Äùz‚Äù,3,[]]If your data will be used only in Swift code, then you should use Any because your types (Int, Double, Float, String, Array, and Dictionary) are not objects.If it will be passed to Objective-C code that expect an NSDictionary, then go with AnyObject.AnyHashable is a super-type that is defined as a struct, it was introduced in Swift 3 standard library, it‚Äôs used to bring untyped sets and dictionaries from Objective-C to Swift.public struct Notification : ReferenceConvertible, Equatable, Hashable { /// Storage for values or objects related to this notification. public var userInfo: [AnyHashable : Any]?}" }, { "title" : "Swift Root/Base Class &amp; NSObject", "category" : "", "tags" : " ", "url" : "/blog/swift-root-class-nsobject", "date" : "November 16, 2021", "excerpt" : "‚ÄúBase class‚Äù is usually interchangeable with ‚Äúsuperclass‚Äù (the normal ObjC terminology) when talking about a particular object‚Äôs design and inheritance.A root class in ObjC is a class which has no superclass, it is the absolute base class from whi...", "content" : "‚ÄúBase class‚Äù is usually interchangeable with ‚Äúsuperclass‚Äù (the normal ObjC terminology) when talking about a particular object‚Äôs design and inheritance.A root class in ObjC is a class which has no superclass, it is the absolute base class from which other classes are derived.The standard root class for almost all objects in the Cocoa frameworks is¬†NSObject, although there are others.In Objective-C, the root of all classes is¬†NSObject¬†that happen to be part of the Foundation framework.All objects in a Cocoa/Cocoa-Touch application inherit from NSObject,In pure Swift, a root class is not necessary though.Swift classes doesn‚Äôt run on top of Obj-C; they are not translated into Obj-C behind the scenes. They are just compiled by the same compiler which allows them to interoperate with each other. That‚Äôs really important to understand. That‚Äôs why¬†@objc¬†must be sometimes added to provide consistency with Obj-C protocols/classes.Swift classes do not inherit from a universal base class. Classes you define without specifying a superclass automatically become base classes for you to build upon.Any class that doesn‚Äôt inherit from another class is known as a¬†base class." }, { "title" : "Swift Basic Data Types &amp; Type Inference", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-built-in-data-types", "date" : "November 15, 2021", "excerpt" : "Swift is strongly typed, data should either be explicitly assigned or inferred, the main basic data types that come with swift areTypeDescriptionCharactera 16-bit Unicode character like &amp;quot;a&amp;quot; or &amp;quot;/&amp;quot;Stringrepresents textual data l...", "content" : "Swift is strongly typed, data should either be explicitly assigned or inferred, the main basic data types that come with swift areTypeDescriptionCharactera 16-bit Unicode character like &quot;a&quot; or &quot;/&quot;Stringrepresents textual data like &quot;Hello&quot;Floatrepresents 32-bit floating-point numberDoublerepresents 64-bit floating-point numberBoollogical value: true or falseTuplesgroups multiple values in single valueIntinteger, a whole numberUIntunsigned integer, a whole numberInt81 byte integerInt324 bytes integerInt648 bytes integerUInt81 byte unsigned integerUInt324 bytes unsigned integerUInt648 bytes unsigned integerOn a 32-bit device, Int has the size of Int32, on 64-bit devices, Int has the size of Int64, same goes for UInt.Swift has a feature where it can infer the type of the data directly, for example the variable level here is infered to be an Intvar level = 12you can explicitly determine the type directlyvar level: Int = 17Extra Tip: A CGFloat holds either 32-bits of data or 64-bits of data depending on the CPU Architecture." }, { "title" : "Swift Variables and Constants", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-variables-and-constants", "date" : "November 14, 2021", "excerpt" : "Any meaningful program should contain stores to save data, swift distinguishes between constant and variable pieces of data with let and var keywords.For example, say you have a customer object, their birthdate is a constant, but their balance is ...", "content" : "Any meaningful program should contain stores to save data, swift distinguishes between constant and variable pieces of data with let and var keywords.For example, say you have a customer object, their birthdate is a constant, but their balance is a variable, if you declare data as a constant, the compiler will not allow you to have it changed later, even at compile time, this is not only for safety, but constants are generally faster to work with by the processor.class Customer {\tlet id = 22034\tlet birthdate = &quot;11/11/2011&quot;\tvar balance = 109.3}Constants cannot change after you run your app, they prevent accidental breakage of a value that should not change." }, { "title" : "Swift Style Guides (a brief look)", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-style-guides", "date" : "November 10, 2021", "excerpt" : "You most probably was working on an open source project, and must have noticed projects are usually organized and consistent üßê, this is due to following a code style, and you must have noticed that some projects are messy, ugly and inconsistent ü§Æ....", "content" : "You most probably was working on an open source project, and must have noticed projects are usually organized and consistent üßê, this is due to following a code style, and you must have noticed that some projects are messy, ugly and inconsistent ü§Æ.There are different Swift Code Styles, one by Apple, Google, Ray Wenderlich, Linkedin and AirBNB, and others, preferring a code style over another is subjective, I recommend inspecting different styles and adopt one according to the project needs.Developers spend time reading code, more than writing new code üòå, this alone justifies having a consistent clean coding style, this is an investment you do for yourself as a developer, and for your colleagues üòá, regular indentation, proper spelling, .. etc does not make your task take longer, in the contrary, it saves you big load of time in the future, and improves readability and maintainability.There is an official API Design guidelines, it covers naming conventions, but is not comprehensive enough.Another guideline can be found here, by Nikita Lazarev-Zubov, it looks like she has preservations on some guidelines too, I highly recommend going through these guidelines and inspecting yourself." }, { "title" : "Swift Lexical Structure", "category" : "", "tags" : " development, ios, programming, swift", "url" : "/blog/swift-lexical-structure", "date" : "November 1, 2021", "excerpt" : "Swift lexical structure, consists of valid tokens (lowest-level building blocks) that form the structure of any swift program, these tokens describe the rest of whole swift language‚Ä¶A token consists of an identifier, keyword, punctuation, literal,...", "content" : "Swift lexical structure, consists of valid tokens (lowest-level building blocks) that form the structure of any swift program, these tokens describe the rest of whole swift language‚Ä¶A token consists of an identifier, keyword, punctuation, literal, or operator.**1) Identifiers:**An example of an identifier is a variable name, for example here ‚Äúpet‚Äù is an identifier.let pet = &quot;Happy Dinosaur ü¶ñ&quot;;Identifiers support unicode characters, you can name you variable in you native language, and as in other programming languages, you cannot use keywords as identifiers, this is still possible if you surrounding a keyword with back-ticks,var `var` = &quot;var&quot; examples of unicode identifiers arevar _latitude = 32.0; var „Ç¢„ÉÉ„Éó„É´ = &quot;apple&quot;;**2) Keywords:**The list of basic keywords in swift are listed below, see (Swift Reserved Keywords) for comprehensive list and details.classdeinitenumextensionfuncimportinitletprotocolstaticstructsubscripttypealiasvarbreakcontinuedefaultdoelsefallthroughifinforreturnswitchwherewhileasdynamicTypeisnewsuperselfSelfType__COLUMN____FILE____FUNCTION____LINE__associativitydidSetgetinfixinoutleftmutatingnonenonmutatingoverrideprecedenceprefixrightsetunownedunowned(safe)unowned(unsafe)weakwillSet**3) Literals:**literals fall into 3 categories, integer, floating point, and string literals_Integer Literals_var a = 10` //Binary var b = 00010100b //Hexadecimal var c = 14x //Octal var d = 24o`leading zeros will be ignored by the compiler, and the use of underscores is possible to increase readability.var a = 100_000_000 Floating Point Literals //Simple floating point number var a = 10.7` //Exponent floating point number var b = 10.6e2 var c = 10.1e-2 //Exponent floating point number //Hexa decimal exponent var d = 0xAp2 //Hexa decimal exponent var d = 0xAp-2`_String Literals_String literals are characters are enclosed within double quotes. Strings can contain escape sequences to represent characters like qoutes. Example for string literal is shown below.var a = ‚Äútest‚Äùvar a = ‚ÄúHello\\nWorld‚Äù\\0 Null Character\\ Backslash\\t Horizontal Tab\\n New line\\r Carriage Return\\‚Äù Double Quote\\‚Äô Single Quote4) Operators:There are different operators supported in swift which includes+ : Addition- : Subtraction* : Multiplication/ : Division% : Remainder^ : Exponent&amp;amp; : Bitwise And&amp;amp;&amp;amp; : Logical And| : Bitwise Or|| : Logical Or++ : Increment Operator‚Äì : Minus~ : Bitwise Not&amp;lt; : Less Than&amp;gt; : Greater Than‚Ä¶ etc.Keep in mind, as in Swift‚Äôs official documentation, this is a list of reserved punctuation and can‚Äôt be used as custom operators:‚Äú(,¬†),¬†{,¬†},¬†[,¬†],¬†.,¬†,,¬†:,¬†;,¬†=,¬†@,¬†#,¬†&amp;amp;¬†(as a prefix operator),¬†-&amp;gt;,¬†`,¬†?, and¬†!¬†(as a postfix operator)‚Äù**Swift Whitespace:**White spaces are used to separate tokens and to distinguish prefixes, otherwise it‚Äôs normally omitted by the compiler.**Swift Comments:**these are statements that are ignored by the compiler, and meant for documentation purposes of our code, they could be either one-line or multi-line.// This is a single line comment` /* Multi line (block) comment - can have more than one line! */`" }, { "title" : "Swift Reserved Keywords, with brief explanations.", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-keywords", "date" : "November 1, 2021", "excerpt" : "A reserved word is¬†a word that cannot be used as an identifier, this is a syntactic definition, as mentioned before in Swift Lexical Structure, all lists below are written alphabetically. Keywords used in declarations:¬† Reserved Word ...", "content" : "A reserved word is¬†a word that cannot be used as an identifier, this is a syntactic definition, as mentioned before in Swift Lexical Structure, all lists below are written alphabetically. Keywords used in declarations:¬† Reserved Word Details associatedtype Associated types are a powerful way of making protocols generic, it¬†gives a placeholder name to a type that‚Äôs used as part of the protocol. class One of swift‚Äôs general purpose, flexible constructs also see struct ¬† deinit A method that gets automatically called when an object is freed up from memory by ARC. enum Enums let‚Äôs you define a custom kind of value in Swift, with predefined possible values. extension Extensions¬†add new functionality to an existing class, structure, enumeration, or protocol type. fileprivate One of swift‚Äôs access modifiers. func Used for creating functions. import A declaration used for importing modules and submodules init as per swift documentation, ‚ÄúInitialization¬†is the process of preparing an instance of a class, structure, or enumeration for use.‚Äù inout inout allows parameters to be changed outside of the function scope. internal One of swift‚Äôs access modifiers. let A keyword used for declaring a constant open One of swift‚Äôs access modifiers. operator A special symbol/ phrase that you use to check, change, or combine values. private One of swift‚Äôs access modifiers. precedencegroup defining precedence groups to use for our custom operators. protocol as per swift‚Äôs official documentation ‚ÄúA¬†protocol¬†defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality.‚Äù public One of swift‚Äôs access modifiers. rethrows rethrows keyword is used with function that accepts a throwing function as a parameter. static defines a static scope. struct complex value-types. subscript Subscripts allow you to write shortcuts to elements from collections, Sequences in classes, structures and enumerations. typealias Defines an alias for an existing type. var A keyword used for declaring a variable. Keywords used in statements: Reserved Word Details break One of the control transfer statements, ends execution of a loop, an if statement, or a switch statement. case Used for pattern testing. catch Used for handling any potential errors caused by a function that throws. continue One of the control transfer statements, ends execution of the current iteration of a loop statement but does not stop execution of the loop statement. default Used for default cases in switch. defer Used for making a block to execute just before a function exits. do Used for creating do blocks, for example (do-while, do-catch) else Used for executing a block when a condition is not satisfied. fallthrough One of the control transfer statements for Used for iterating over a sequence. guard Used in control transfer statement and optional unwrapping. if Used for condition evaluation. in In is a keyword defined in the Swift closure syntax as a separator between the function type and the function body in a closure, and used in checking if an object is in a sequence. repeat A control flow statement, similar to while loop return One of the control transfer statements throw Used for throwing an error in a function that throws. switch A switch statement considers a value and compares it against several possible matching patterns. where Used to filter out values, in statements like switch, for, protocol extension, first, contains, initializers. while A control flow statement, it performs a set of statements until a condition becomes false Keywords used in expressions and types: Reserved Word Details Any Any can represent an instance of any type at all, including function types. as Used for type casting. catch Used in error handling, when an error is thrown, it‚Äôs matched against the catch clauses. false A literal used to express booleans. is Used to check whether an object is of a certain class type nil A valueless state that could be assigned to optionals. rethrows allows forwarding a thrown error by a given function parameter self ‚Äúself‚Äù refers to the current object within a class or struct. Self Refers to a type ‚Äì usually the current type in the current context. super super is used to call up to your superclass. throw Used for throwing an error in a function that throws. throws To mark a function throwing. true A literal used to express booleans. try The try keyword is used to indicate that a method can throw an error. To catch and handle an error, the throwing method call needs to be wrapped in a do-catch statement. Keywords used in patterns:¬† Reserved Word _ . Keywords that begin with a number sign (#), literals expressions:¬† Reserved Word Details #available Used to determine the availability of APIs at runtime #colorLiteral Used to make the XCode IDE to display a color swatch üü• #column column number of the line where it is being run. #dsohandle - #elseif Literal conditional statement #else Literal else statement. #endif Literal marker for closing an a literal if statement #error Creates a red compiler error &amp;amp; prevents code from compiling #fileID Generates concise file string in all language modes. #fileLiteral Used to make the XCode IDE link to a local file. #filePath Outputs the file path of in which code is being run. #file Outputs the name of the file in which code is being run. #function Outputs the name of the function where code belongs. #if Literal if statement. #imageLiteral Used to make the XCode IDE to display an image. #keyPath - #line line number where it is being run. #selector - #sourceLocation - #warning will cause Xcode to display a warning with the given message.¬† Keywords reserved in particular contexts:¬† Reserved Word Details associativity defines how operators of the same precedence are grouped together. convenience Convenience modifier placed before the init keyword. didSet A property observer dynamic A declaration modifier used to make use of Objective-C‚Äôs dynamism. final One of Swift‚Äôs access modifiers. get Used when getting a computed property. indirect Used for recursive Enums infix Used when creating custom operators. lazy Used for just-in-time calculation. left Used to specify the associativity of a custom operator mutating Functions marked as mutating can change any property within its enclosing value none Used to specify the associativity of a custom operator nonmutating - optional - override Used for overriding child classes. postfix Used in creating custom functions, it‚Äôs mathematical notation in which operators follow operands. precedence Operator precedence is a set of rules that determine which operator is executed before another. prefix Used in creating custom functions, it‚Äôs mathematical notation in which operators follow operands. Protocol A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. required Required keyword means that inheriting classes must provide an implementation of the method. right Used to specify the associativity of a custom operator set Used when getting a computed property. some denotes an opaque type. Type A metatype type refers to the type of any type, including class types, structure types, enumeration types, and protocol types. unowned A reference type, used for memory management. weak A reference type, used for memory management. willSet A property observer Outside the context in which they appear in the grammar, they can be used as identifiers.The following tokens are reserved as punctuation and can‚Äôt be used as custom operators:¬†(,&amp;nbsp;){,&amp;nbsp;}&amp;nbsp;[,&amp;nbsp;]&amp;nbsp;.,:;=@#&amp;amp;&amp;nbsp;(as a prefix operator)-&amp;gt;`?!&amp;nbsp;(as a postfix operator)" }, { "title" : "Swift Pros over Obj-C", "category" : "", "tags" : " development, programming, swift", "url" : "/blog/swift-pros-over-obj-c", "date" : "October 18, 2021", "excerpt" : "Obj-C development dates back to 1980s, Swift came with a lot of significant improvements in clarity, performance, safety, and more.1- Swift is easier to read and maintainSwift drops legacy conventions, using semicolons to end lines are not needed,...", "content" : "Obj-C development dates back to 1980s, Swift came with a lot of significant improvements in clarity, performance, safety, and more.1- Swift is easier to read and maintainSwift drops legacy conventions, using semicolons to end lines are not needed, also parenthesis are not needed around (conditional expressions), no bracket hell needed for method calls, two-file requirement is dropped by swift, the LLVM compiler can figure out dependencies automatically‚Ä¶for example, swift adopts modern programming language features like concatenation of two strings together with a ‚Äú+‚Äù operator, along with string interpolation which makes things easier and safer, instead of memorizing special tokens ¬†(%s,¬†%d,¬†%@), that can be a source of crashes!2- Swift is more safe, and have better memory managementin Obj-C nothing happens if you call a method with a nil pointer variable, not crashing may look like a benefit, but actually this is a source of bugs and unexpected behavior, optional types in swift solves this problem, this means any bug will be fixed sooner or avoided at all in swift code.In contrast to swift, in Objective-C, ARC is not available for procedural C and other APIs like CoreGraphcis, swift saves the developer brain power for better things, like writing the app‚Äôs main logic, instead of handling memory management.3- Swift is faster, and is less prone to name collisionsA lot of people made benchmarks, concluding swift being faster and more performant than Obj-C.a benchmark made by apple.Obj-C lacked name-spacing, to overcome this issue, a common practice was using a few letters as a prefix, for example NSArray (after NextStep, a company by Steve Jobs), or NSString, ‚Ä¶ etc.In swift, namespaces are based on the target that a file relies in, for example, both apple frameworks and google frameworks can have a file called Authentication.swift**4- Swift Supports Dynamic libraries**Obj-C only support static libraries, this is a big downside, swift support dynamic libraries, that can be loaded into the app‚Äôs memory directly, this reduces the app total size, and reduces the load time of (on demand) new content.**5- Swift is open-source and has bigger community**Swift has a big community that are actively contributing, hence open-source, it started running in other environments like linux. for example of swift outside of the apple ecosystem, see vapor, ¬†a web framework for Swift. The Swift language is developed in the open, and all technical or administrative topics about the language or community processes should be directed to the Swift public forums. Public conversations are encouraged, and active developers of the Swift language should monitor the relevant forum categories. Swift.org" }, { "title" : "What is Swift Programming Language?", "category" : "", "tags" : " development, ios, programming, swift", "url" : "/blog/what-is-swift", "date" : "October 18, 2021", "excerpt" : "Swift is Apple‚Äôs modern, open-source programming language, introduced at Apple‚Äôs 2014 Worldwide Developers Conference (WWDC). Designed to be the successor to Objective-C, Swift is used for developing applications across all of Apple‚Äôs platforms, i...", "content" : "Swift is Apple‚Äôs modern, open-source programming language, introduced at Apple‚Äôs 2014 Worldwide Developers Conference (WWDC). Designed to be the successor to Objective-C, Swift is used for developing applications across all of Apple‚Äôs platforms, including iOS, macOS, watchOS, and tvOS. It primarily works with Apple‚Äôs Cocoa and Cocoa Touch frameworks. Since its introduction, Swift has rapidly become one of the fastest-growing programming languages. As an open-source language licensed under the Apache 2.0 license, Swift has extended beyond Apple‚Äôs ecosystem, finding use in other areas such as backend server development with frameworks like Vapor. Key Features of SwiftSwift was designed with several goals in mind: to be concise, expressive, fast, and less prone to errors (safer) than its predecessor, Objective-C. It introduces modern language features that make it easier to write reliable and maintainable code.The Architect of SwiftChris Lattner, the principal designer of Swift, was a key figure at Apple Inc., where he served as the Director of the Developer Tools department. In this role, he led the teams behind Xcode, Instruments, and the compiler technologies. Lattner is also the main author of LLVM (Low-Level Virtual Machine), a compiler infrastructure, and Clang, a compiler front end that replaces the GNU Compiler Collection and is designed to work atop LLVM. Chris Lattner (Twitter @clattner\\_llvm) Swift‚Äôs Versatility and Ease of LearningTo facilitate onboarding for newcomers, Swift can be used in various environments. One of the most accessible is the Swift Playgrounds, an interactive environment in Xcode, or through a web-based REPL (Read-Eval-Print Loop) like this one. A REPL provides a command-line interface that allows developers to experiment with Swift in an interpreted-like environment, making it easy to learn and test new code snippets quickly.Swift: A General-Purpose, Multi-Paradigm LanguageSwift is a type-safe, general-purpose, and multi-paradigm language. It supports a wide range of programming paradigms, including object-oriented, functional, and generic programming. This flexibility allows developers to use the most suitable style for a given problem, recognizing that no single paradigm is perfect for all use cases. Swift provides its own versions of common C and Objective-C types, alongside powerful data structures such as Arrays, Sets, and Dictionaries. Moreover, it includes unique types like tuples, which enable the passing of grouped values‚Äîa feature not available in Objective-C.Swift Projects and EcosystemThe Swift programming language is made up of several key components, each of which contributes to its versatility and power. According to Swift.org, these include: The Swift compiler, a command-line tool for compiling Swift code. The Standard Library, which provides essential functionality and is bundled with the language. Core Libraries that offer higher-level capabilities. The LLDB Debugger, which includes the Swift REPL, enabling debugging and interactive coding. The Swift Package Manager, a tool for managing and building Swift projects. Xcode Playground Support, which enables the use of playgrounds in Xcode for interactive coding.Swift continues to evolve, driven by contributions from both Apple and the open-source community. Its combination of speed, safety, and expressiveness makes it a strong choice for developers looking to build modern applications across multiple platforms." } ,  { "title" : "About", "category" : "", "tags" : " Page", "url" : "/blog/about/", "date" : "N/A", "excerpt" : "Type on Strap is based on Type Theme, a free and open-source theme for Jekyll, licensed under the MIT License.Head over to the theme‚Äôs documentation for much more information about Type on Strap or to install this theme on your own Jekyll site.Thi...", "content" : "Type on Strap is based on Type Theme, a free and open-source theme for Jekyll, licensed under the MIT License.Head over to the theme‚Äôs documentation for much more information about Type on Strap or to install this theme on your own Jekyll site.This file is an example of a page in Jekyll, that automatically shows up in the header navigation, you can delete or modify this file freely." },      { "title" : "Portfolio", "category" : "", "tags" : " Page", "url" : "/blog/portfolio/", "date" : "N/A", "excerpt" : "", "content" : "" },   { "title" : "Tags", "category" : "", "tags" : " ", "url" : "/blog/tags/", "date" : "N/A", "excerpt" : "", "content" : "" },       { } ,{ "title" : "Ninja", "category" : "", "tags" : " Lorem", "url" : "/blog/portfolio/ninja", "date" : "April 8, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } ,{ "title" : "Creative", "category" : "", "tags" : " Ipsum", "url" : "/blog/portfolio/safe", "date" : "August 16, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." } ,{ "title" : "Circus", "category" : "", "tags" : " Ipsum", "url" : "/blog/portfolio/circus", "date" : "September 1, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } ,{ "title" : "Tower of Hanoi", "category" : "", "tags" : " ", "url" : "/blog/portfolio/hanoi", "date" : "September 1, 2014", "excerpt" : "The tower of Hanoi‚Ä¶Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ip...", "content" : "The tower of Hanoi‚Ä¶Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } ,{ "title" : "Tic tac toe", "category" : "", "tags" : " ", "url" : "/blog/portfolio/tictactoe", "date" : "September 1, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." } ,{ "title" : "Cake", "category" : "", "tags" : " Lorem, Ipsum", "url" : "/blog/portfolio/cake", "date" : "September 27, 2015", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." } ,{ "title" : "Jekyll", "category" : "", "tags" : " ", "url" : "/blog/portfolio/jekyllblog", "date" : "May 26, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } ,{ "title" : "Lorem Ipsum", "category" : "", "tags" : " ", "url" : "/blog/portfolio/submarine", "date" : "September 3, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." } ,{ "title" : "Github", "category" : "", "tags" : " Lorem", "url" : "/blog/portfolio/gitlecture", "date" : "October 20, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } ]
