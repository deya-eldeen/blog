<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://swiftbydeya.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://swiftbydeya.com/" rel="alternate" type="text/html" /><updated>2024-09-08T03:46:32+03:00</updated><id>https://swiftbydeya.com/feed.xml</id><title type="html">Swift By Deya</title><subtitle>Swifty Insights: Dive into the world of Swift and iOS development with our weekly articles.</subtitle><entry><title type="html">Significant Network Problems on MacBooks with Silicon Chips and Proposed Solutions</title><link href="https://swiftbydeya.com/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions/" rel="alternate" type="text/html" title="Significant Network Problems on MacBooks with Silicon Chips and Proposed Solutions" /><published>2024-02-02T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions</id><content type="html" xml:base="https://swiftbydeya.com/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions/"><![CDATA[<p>As Apple‚Äôs Silicon processors have gained significant attention, many users have reported <strong>significant stability and network performance issues</strong>, particularly when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/network_fix_full.jpg" alt="Network Performance Issues" class="centered" />
    <p align="center"><em>Network Performance Issues on M1/M2 MacBooks</em></p>
  </div>

<h2 id="overview-of-network-issues">Overview of Network Issues</h2>

<p>One common complaint among users is the sudden and prolonged drops in transfer rates, leading to frustrating experiences. These issues can often be attributed to the design of the network card in these devices, which may struggle to maintain consistent performance under certain conditions.</p>

<p>When operating on the 2.4 GHz band, devices with Silicon processors may experience exceptionally low transfer rates, sometimes as low as 0.5 Mbps üò±. This is significantly lower than expected, and while not all devices are necessarily affected, numerous complaints have surfaced online.</p>

<p>For instance, I experienced a connection that was about 30 times faster when using my MacBook Pro 2019 compared to the M1 Pro. Simple benchmarks using the <strong><code class="language-plaintext highlighter-rouge">networkQuality</code></strong> command revealed the following results:</p>

<h3 id="benchmark-results">Benchmark Results</h3>

<p><strong>M1 Pro Internet Speed:</strong></p>
<ul>
  <li><strong>Downlink:</strong> 0.568 Mbps</li>
  <li><strong>Uplink:</strong> 1.920 Mbps</li>
</ul>

<p><strong>Intel-based Internet Speed:</strong></p>
<ul>
  <li><strong>Downlink:</strong> 14.347 Mbps</li>
  <li><strong>Uplink:</strong> 4.175 Mbps</li>
</ul>

<p>Such results were shocking, especially considering I do not have fiber internet and rely on 4G. ü§£</p>

<p>Initially, I suspected that VPN or MDM settings on the M1 Pro were causing these significant speed drops. However, further research led me to useful findings that helped restore speed on my M1 Pro device.</p>

<h2 id="understanding-frequency-bands">Understanding Frequency Bands</h2>

<p>The 2.4 GHz band offers better coverage and penetration through walls but is more susceptible to interference from other devices and nearby Wi-Fi networks. This can lead to congestion and speed drops, especially in crowded areas. Conversely, the 5 GHz band is generally faster and less prone to interference, although it has a shorter range and may struggle to penetrate solid objects.</p>

<p>Additionally, connecting to a LAN via a USB dongle (especially when a monitor is connected to the same dongle) has been reported to cause network performance issues, complicating the challenges faced by users who rely on stable and high-speed connections.</p>

<h2 id="proposed-solutions">Proposed Solutions</h2>

<p>While these problems may seem daunting, there are several potential workarounds and solutions that users can consider:</p>

<h3 id="1-utilize-safe-mode-for-diagnostics">1. Utilize Safe Mode for Diagnostics</h3>

<p>When troubleshooting network performance issues on devices with Silicon processors, using the <strong><code class="language-plaintext highlighter-rouge">networkQuality</code></strong> command in safe mode can be a valuable diagnostic tool. Safe mode loads only essential components, allowing users to isolate potential software conflicts or third-party applications that may be impacting network performance. Running the <strong><code class="language-plaintext highlighter-rouge">networkQuality</code></strong> command in this environment can provide a clearer picture of the device‚Äôs network status.</p>

<h3 id="2-switch-to-the-5-ghz-band">2. Switch to the 5 GHz Band</h3>

<p>Switching to the 5 GHz band and disabling the 2.4 GHz network on your router can be an effective strategy for addressing performance issues. Additionally, using a 40 MHz channel width can help mitigate congestion and interference, resulting in improved network performance. This simple change can often make a noticeable difference in the reliability and speed of the Wi-Fi network for devices with Silicon processors.</p>

<h3 id="3-consider-wi-fi-over-usb-c-dongles">3. Consider Wi-Fi Over USB-C Dongles</h3>

<p>If you are using a USB-C dongle for network connectivity and experiencing issues, consider switching to Wi-Fi as an alternative. Assess the network quality using <strong><code class="language-plaintext highlighter-rouge">networkQuality</code></strong> to compare the performance of the USB-C dongle with that of the Wi-Fi connection. This approach can help identify specific issues related to the dongle or the network environment.</p>

<h3 id="4-disable-unused-network-features">4. Disable Unused Network Features</h3>

<p>Disabling unnecessary network features such as ‚ÄúThunderbolt Bridge,‚Äù which allows high-speed data transfer between two Mac computers using Thunderbolt ports, may also help. Users have reported that disabling features they do not use can resolve network performance issues.</p>

<h2 id="conclusion">Conclusion</h2>

<p>It‚Äôs crucial to be aware of these potential network performance issues when using devices with Silicon processors. While not all devices may be affected, many users have shared similar complaints. I hope this information proves helpful for those navigating network performance challenges on Silicon powered devices.</p>

<p>By following the proposed solutions, users may find improved network stability and performance, enhancing their overall experience with these powerful machines.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[As Apple‚Äôs Silicon processors have gained significant attention, many users have reported significant stability and network performance issues, particularly when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.]]></summary></entry><entry><title type="html">Test Doubles In Swift</title><link href="https://swiftbydeya.com/test-doubles-in-swift" rel="alternate" type="text/html" title="Test Doubles In Swift" /><published>2023-10-25T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/test-doubles-in-swift</id><content type="html" xml:base="https://swiftbydeya.com/test-doubles-in-swift"><![CDATA[<p>The term <strong>test doubles</strong> draws inspiration from <strong>stunt doubles</strong> in the movie industry, where a stunt double steps in to perform dangerous or complex tasks, allowing the actor to focus on their role. Similarly, in software testing, test doubles step in to replace real components, making testing simpler, faster, and more reliable.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/test_doubles_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>Testing is an essential part of software development, ensuring the correctness and reliability of our code. However, when we test systems with many dependencies‚Äîlike databases, web services, or external APIs‚Äîwriting reliable tests can become challenging. This is where test doubles come in handy.</p>

<p>It‚Äôs important to understand the basics of unit testing, see this blog post <a href="//gentle-introduction-to-unit-testing">Gentle Introduction to Unit Testing</a>, especially since certain architectural patterns, like MVC can introduce complexities that make them less testable. Familiarity with the FIRST principles‚ÄîFast, Independent, Repeatable, Self-validating, and Timely‚Äîis crucial for writing effective tests. Additionally, it‚Äôs vital to recognize that flaky tests, which produce inconsistent results, can undermine the reliability of your testing suite and lead to wasted time and effort.</p>

<p>In this post, we‚Äôll explore the different types of test doubles, their purpose, and practical examples. By the end, you‚Äôll be able to confidently use them to create more effective, reliable tests.</p>

<h2 id="what-is-a-test-double">What is a Test Double?</h2>
<p>A <strong>test double</strong> is a substitute that stands in for a real dependency during testing. These dependencies, which can include external services, databases, or complex components, often introduce complexity that makes testing challenging. Test doubles enable us to isolate the code under test and concentrate on specific behaviors, resulting in more predictable and efficient tests. By using test doubles, we can create controlled environments that facilitate thorough testing without the overhead of managing real dependencies. This revision broadens the definition of a test double while maintaining clarity and focus on its purpose in testing.</p>

<p>Test doubles mimic the behavior of real dependencies, but they provide simplified or controlled implementations. By replacing real dependencies with test doubles, we create an environment where we control every interaction, avoiding side effects from external systems.</p>

<h3 id="types-of-test-doubles">Types of Test Doubles</h3>

<p>There are five common types of test doubles, each serving a distinct purpose:</p>

<ol>
  <li><strong>Dummy</strong></li>
  <li><strong>Fake</strong></li>
  <li><strong>Stub</strong></li>
  <li><strong>Spy</strong></li>
  <li><strong>Mock</strong></li>
</ol>

<p>Let‚Äôs dive into each of these with practical Swift examples. We‚Äôll use a sample <code class="language-plaintext highlighter-rouge">UserManager</code> class that has dependencies carefully picked for demonstrating all types of test doubles, it may be needed to create multiple test doubles of different types for each dependency in some cases, this depends on the test cases needs, but in this example, only one test double is created for each dependency, for demo purpose.</p>

<p><code class="language-plaintext highlighter-rouge">UserManager</code> also uses default values that can be changed, this is dependency injection by init.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// UserManager.swift</span>
<span class="kd">class</span> <span class="kt">UserManager</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">loggerService</span><span class="p">:</span> <span class="kt">LoggerService</span>
    <span class="k">let</span> <span class="nv">cacheService</span><span class="p">:</span> <span class="kt">CacheService</span>
    <span class="k">let</span> <span class="nv">database</span><span class="p">:</span> <span class="kt">DatabaseHelper</span>
    <span class="k">let</span> <span class="nv">securityHelper</span><span class="p">:</span> <span class="kt">SecurityHelper</span>
    <span class="k">let</span> <span class="nv">notificationService</span><span class="p">:</span> <span class="kt">NotificationService</span>

    <span class="nf">init</span><span class="p">(</span>
        <span class="nv">logger</span><span class="p">:</span> <span class="kt">LoggerService</span> <span class="o">=</span> <span class="kt">LoggerServiceImpl</span><span class="p">(),</span>
        <span class="nv">cache</span><span class="p">:</span> <span class="kt">CacheService</span> <span class="o">=</span> <span class="kt">CacheServiceImpl</span><span class="p">(),</span>
        <span class="nv">database</span><span class="p">:</span> <span class="kt">DatabaseHelper</span> <span class="o">=</span> <span class="kt">DatabaseHelperImpl</span><span class="p">(),</span>
        <span class="nv">securityHelper</span><span class="p">:</span> <span class="kt">SecurityHelper</span> <span class="o">=</span> <span class="kt">SecurityHelperImpl</span><span class="p">(),</span>
        <span class="nv">notificationService</span><span class="p">:</span> <span class="kt">NotificationService</span> <span class="o">=</span> <span class="kt">NotificationServiceImpl</span><span class="p">()</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">loggerService</span> <span class="o">=</span> <span class="n">logger</span>
        <span class="k">self</span><span class="o">.</span><span class="n">cacheService</span> <span class="o">=</span> <span class="n">cache</span>
        <span class="k">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">database</span>
        <span class="k">self</span><span class="o">.</span><span class="n">securityHelper</span> <span class="o">=</span> <span class="n">securityHelper</span>
        <span class="k">self</span><span class="o">.</span><span class="n">notificationService</span> <span class="o">=</span> <span class="n">notificationService</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">password</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Authenticating user </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">password</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        
        <span class="c1">// Check cache first</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">cachedPasswordHash</span> <span class="o">=</span> <span class="n">cacheService</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Cache hit for user </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">success</span> <span class="o">=</span> <span class="n">cachedPasswordHash</span> <span class="o">==</span> <span class="n">password</span><span class="o">.</span><span class="nf">hashed</span><span class="p">()</span>
            <span class="n">securityHelper</span><span class="o">.</span><span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="n">success</span><span class="p">)</span>
            <span class="n">notificationService</span><span class="o">.</span><span class="nf">sendAuthenticationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="n">success</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">success</span>
        <span class="p">}</span>
        
        <span class="c1">// Fetch from database if not in cache</span>
        <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Cache miss for user </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">passwordHash</span> <span class="o">=</span> <span class="n">database</span><span class="o">.</span><span class="nf">getUserPasswordHash</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cacheService</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">passwordHash</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">success</span> <span class="o">=</span> <span class="n">passwordHash</span> <span class="o">==</span> <span class="n">password</span><span class="o">.</span><span class="nf">hashed</span><span class="p">()</span>
            <span class="n">securityHelper</span><span class="o">.</span><span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="n">success</span><span class="p">)</span>
            <span class="n">notificationService</span><span class="o">.</span><span class="nf">sendAuthenticationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="n">success</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">success</span>
        <span class="p">}</span>
        
        <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Authentication failed for user </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="n">securityHelper</span><span class="o">.</span><span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="n">notificationService</span><span class="o">.</span><span class="nf">sendFailedAuthenticationAttemptEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">register</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">password</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="c1">// Check if the username is valid</span>
        <span class="k">guard</span> <span class="o">!</span><span class="n">username</span><span class="o">.</span><span class="n">isEmpty</span><span class="p">,</span> <span class="o">!</span><span class="n">password</span><span class="o">.</span><span class="n">isEmpty</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Registration failed: Username or password is empty."</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
        
        <span class="c1">// Check if the username already exists in the database</span>
        <span class="k">if</span> <span class="n">database</span><span class="o">.</span><span class="nf">getUserPasswordHash</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Registration failed: Username </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s"> already exists."</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span> <span class="c1">// Username already taken</span>
        <span class="p">}</span>
        
        <span class="c1">// Hash the password for storage</span>
        <span class="k">let</span> <span class="nv">passwordHash</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="nf">hashed</span><span class="p">()</span>
        
        <span class="c1">// Add the user to the database</span>
        <span class="n">database</span><span class="o">.</span><span class="nf">addUser</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">passwordHash</span><span class="p">:</span> <span class="n">passwordHash</span><span class="p">)</span>
        
        <span class="c1">// Optionally, cache the newly created user</span>
        <span class="n">cacheService</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">passwordHash</span><span class="p">)</span>
        
        <span class="c1">// Log the successful registration</span>
        <span class="n">loggerService</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"User </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s"> registered successfully."</span><span class="p">)</span>
        
        <span class="c1">// Send a notification email (optional)</span>
        <span class="n">notificationService</span><span class="o">.</span><span class="nf">sendRegistrationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>Below you can see the protocols used to create our dependencies, for example the <code class="language-plaintext highlighter-rouge">LoggerService</code> protocol can be used to either created a <code class="language-plaintext highlighter-rouge">LoggerServiceImpl</code> or <code class="language-plaintext highlighter-rouge">DummyLogger</code>, and the same goes for other dependencies, each protocol can be used to create either an implementation or a test double, this way we ensure the code is properly testable, we can simply plug in whatever needed in the <code class="language-plaintext highlighter-rouge">UserManager</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// LoggerService.swift</span>
<span class="kd">protocol</span> <span class="kt">LoggerService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">log</span><span class="p">(</span><span class="n">_</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CacheService.swift</span>
<span class="kd">protocol</span> <span class="kt">CacheService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">get</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span>
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DatabaseHelper.swift</span>
<span class="kd">protocol</span> <span class="kt">DatabaseHelper</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUserPasswordHash</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span>
    <span class="kd">func</span> <span class="nf">addUser</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">passwordHash</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SecurityHelper.swift</span>
<span class="kd">protocol</span> <span class="kt">SecurityHelper</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NotificationService.swift</span>
<span class="kd">protocol</span> <span class="kt">NotificationService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">sendAuthenticationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">sendRegistrationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">sendFailedAuthenticationAttemptEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Below is a simple hasher, this is simplified for demo purpose.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// String+Hasher.swift</span>
<span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">hashed</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"hashed_</span><span class="se">\(</span><span class="k">self</span><span class="se">)</span><span class="s">"</span> <span class="c1">// Simplified hash for demo purpose.</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Below you can find the implementations we will be using in production code, this is useful to compare when reading about the test double examples.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// LoggerServiceImpl.swift</span>
<span class="kd">class</span> <span class="kt">LoggerServiceImpl</span><span class="p">:</span> <span class="kt">LoggerService</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">logger</span> <span class="o">=</span> <span class="kt">Logger</span><span class="p">(</span><span class="nv">subsystem</span><span class="p">:</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">bundleIdentifier</span> <span class="p">??</span> <span class="s">"com.yourapp"</span><span class="p">,</span> <span class="nv">category</span><span class="p">:</span> <span class="s">"default"</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">log</span><span class="p">(</span><span class="n">_</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="nf">log</span><span class="p">(</span><span class="s">"Log: </span><span class="se">\(</span><span class="n">message</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CacheServiceImpl.swift</span>
<span class="kd">class</span> <span class="kt">CacheServiceImpl</span><span class="p">:</span> <span class="kt">CacheService</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">cache</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
    
    <span class="kd">func</span> <span class="nf">get</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="c1">// Retrieve value from cache</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="c1">// Store value in cache</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DatabaseHelperImpl.swift</span>
<span class="kd">class</span> <span class="kt">DatabaseHelperImpl</span><span class="p">:</span> <span class="kt">DatabaseHelper</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">users</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span> <span class="c1">// Simulated user password storage</span>
    
    <span class="kd">func</span> <span class="nf">getUserPasswordHash</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span> <span class="c1">// Retrieve password hash for the given username</span>
    <span class="p">}</span>
    
    <span class="c1">// Helper method to add users to the database for testing purposes</span>
    <span class="kd">func</span> <span class="nf">addUser</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">passwordHash</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span> <span class="o">=</span> <span class="n">passwordHash</span> <span class="c1">// Add user to the simulated database</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SecurityHelperImpl.swift</span>
<span class="kd">class</span> <span class="kt">SecurityHelperImpl</span><span class="p">:</span> <span class="kt">SecurityHelper</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">logFileURL</span><span class="p">:</span> <span class="kt">URL</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">documentsURL</span> <span class="o">=</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">urls</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">documentDirectory</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">userDomainMask</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">!</span>
        <span class="n">logFileURL</span> <span class="o">=</span> <span class="n">documentsURL</span><span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"authentication_log.txt"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">logEntry</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="se">)</span><span class="s">: Authentication attempt for </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">: </span><span class="se">\(</span><span class="n">success</span> <span class="p">?</span> <span class="s">"Success"</span> <span class="p">:</span> <span class="s">"Failure"</span><span class="se">)\n</span><span class="s">"</span>
        
        <span class="k">do</span> <span class="p">{</span>
            <span class="k">try</span> <span class="n">logEntry</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">logFileURL</span><span class="p">,</span> <span class="nv">atomically</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">encoding</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Error writing to log file: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">readAuthenticationAttempts</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)]</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">attempts</span><span class="p">:</span> <span class="p">[(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">do</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">logContents</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">String</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">logFileURL</span><span class="p">,</span> <span class="nv">encoding</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span>
            <span class="k">let</span> <span class="nv">lines</span> <span class="o">=</span> <span class="n">logContents</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
            
            <span class="k">for</span> <span class="n">line</span> <span class="k">in</span> <span class="n">lines</span> <span class="p">{</span>
                <span class="c1">// Parse each line to extract the username and success status</span>
                <span class="k">let</span> <span class="nv">components</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">":"</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">components</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="p">{</span>
                    <span class="k">let</span> <span class="nv">username</span> <span class="o">=</span> <span class="n">components</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span> <span class="c1">// Extract the username</span>
                    <span class="k">let</span> <span class="nv">successString</span> <span class="o">=</span> <span class="n">components</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">whitespaces</span><span class="p">)</span> <span class="c1">// Extract "Success" or "Failure"</span>
                    <span class="k">let</span> <span class="nv">success</span> <span class="o">=</span> <span class="n">successString</span> <span class="o">==</span> <span class="s">"Success"</span>
                    <span class="n">attempts</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">username</span><span class="p">),</span> <span class="nv">success</span><span class="p">:</span> <span class="n">success</span><span class="p">))</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Error reading log file: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">attempts</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NotificationServiceImpl.swift</span>
<span class="kd">class</span> <span class="kt">NotificationServiceImpl</span><span class="p">:</span> <span class="kt">NotificationService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">sendAuthenticationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Here you could implement logic to send an email notification</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Sent authentication email to </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">: </span><span class="se">\(</span><span class="n">success</span> <span class="p">?</span> <span class="s">"Success"</span> <span class="p">:</span> <span class="s">"Failure"</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">sendFailedAuthenticationAttemptEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Here you could implement logic to send an email notification for a failed attempt</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Sent failed authentication attempt email to </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">sendRegistrationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Here you could implement logic to send an email notification for registration</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Sent registration email to </span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>After getting familiar with <code class="language-plaintext highlighter-rouge">UserManager</code>, Let‚Äôs explore the different types of test doubles, along with examples and further details.</p>

<h2 id="1-dummies">1. Dummies</h2>

<p>A <strong>dummy</strong> test double is the simplest form of a test double. It‚Äôs used when a parameter is required by the method signature but isn‚Äôt actually used by the method itself. It‚Äôs essentially a placeholder to satisfy the API.</p>

<h3 id="example">Example:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DummyLogger.swift</span>
<span class="kd">class</span> <span class="kt">DummyLogger</span><span class="p">:</span> <span class="kt">LoggerService</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">log</span><span class="p">(</span><span class="n">_</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// No-op: This dummy logger does nothing</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, <code class="language-plaintext highlighter-rouge">DummyLogger</code> is a <strong>dummy</strong> that satisfies the <code class="language-plaintext highlighter-rouge">LoggerService</code> protocol, but doesn‚Äôt actually perform any actions. It‚Äôs only used to fulfill the constructor requirements, notice that it has no <code class="language-plaintext highlighter-rouge">Logger</code>, in the unit tests cases, you can see the usage of that dummy, only to satisfy the needs we have.</p>

<p>If we had a complicated logging system that is supposed to be tested, we simply create another test double for the <code class="language-plaintext highlighter-rouge">LoggerService</code>, but again, we are trying to demonstrate the different types of test doubles, and the logger in this case seems to be the most simple dependency.</p>

<h2 id="2-fakes">2. Fakes</h2>

<p>A <strong>fake</strong> object provides a working implementation, but it is simpler and often less efficient than the real one. Fakes are often used to simulate databases or services during testing.</p>

<h3 id="example-1">Example:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">FakeDatabase</span><span class="p">:</span> <span class="kt">DatabaseHelper</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">users</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span> <span class="c1">// Simulated user password storage</span>
    
    <span class="kd">func</span> <span class="nf">getUserPasswordHash</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="c1">// Helper method to add users to the fake database</span>
    <span class="kd">func</span> <span class="nf">addUser</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">passwordHash</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span> <span class="o">=</span> <span class="n">passwordHash</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here, the <code class="language-plaintext highlighter-rouge">FakeDatabase</code> simulates a database with an in-memory data structure, making it useful for testing without involving a real database. The original implementation is similar due to the demo-purpose, we can have the original implementation to really talk to a simple sqlite database or a coredata database.</p>

<p>The fake test double only does a dictionary manipulation, using an original database example will make this blog post very lengthy, in the next example we can see a usage of user defaults.</p>

<h2 id="3-stubs">3. Stubs</h2>

<p>A <strong>stub</strong> is a test double that provides predefined answers to method calls. Stubs don‚Äôt perform any logic; they just return canned responses. Stubs are helpful when you want to control the return values of a dependency in a test scenario.</p>

<h3 id="example-2">Example:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// StubCache.swift</span>
<span class="kd">class</span> <span class="kt">StubCache</span><span class="p">:</span> <span class="kt">CacheService</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">storedData</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
    
    <span class="kd">func</span> <span class="nf">get</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">storedData</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="c1">// Simulates cache hit or miss</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">storedData</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="c1">// Simulates setting a value in the cache</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we compare with the original implementation, stubs use a dictionary to store data, instead of using <code class="language-plaintext highlighter-rouge">UserDefaults</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CacheServiceImpl.swift</span>
<span class="kd">class</span> <span class="kt">CacheServiceImpl</span><span class="p">:</span> <span class="kt">CacheService</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">userDefaults</span> <span class="o">=</span> <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span>
    
    <span class="kd">func</span> <span class="nf">get</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">userDefaults</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span> <span class="c1">// Retrieve value from UserDefaults</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">userDefaults</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span> <span class="c1">// Store value in UserDefaults</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Note: Stubs provide canned responses to method calls, while fakes provide a simplified implementation of the real thing.</p>
</blockquote>

<blockquote>
  <p>Note: the usage of UserDefaults should not be used with critical data storage like passwords, even if hashed, this is only for demo purpose.</p>
</blockquote>

<h2 id="4-spies">4. Spies</h2>

<p>A <strong>spy</strong> is a test double that records information about the interactions with its methods, such as how many times a method was called or with what arguments. This makes it useful for verifying side effects in your tests.</p>

<h3 id="example-3">Example:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SpySecurityHelper.swift</span>
<span class="kd">class</span> <span class="kt">SpySecurityHelper</span><span class="p">:</span> <span class="kt">SecurityHelper</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">recordedAttempts</span><span class="p">:</span> <span class="p">[(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">func</span> <span class="nf">recordAuthenticationAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">recordedAttempts</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="n">username</span><span class="p">,</span> <span class="n">success</span><span class="p">))</span>
    <span class="p">}</span>
    
    <span class="c1">// Helper method to check whether a specific attempt was recorded</span>
    <span class="kd">func</span> <span class="nf">verifyAttempt</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">recordedAttempts</span><span class="o">.</span><span class="n">contains</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">username</span> <span class="o">==</span> <span class="n">username</span> <span class="o">&amp;&amp;</span> <span class="nv">$0</span><span class="o">.</span><span class="n">success</span> <span class="o">==</span> <span class="n">success</span> <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// Helper method to check the total number of attempts</span>
    <span class="kd">func</span> <span class="nf">verifyTotalAttempts</span><span class="p">(</span><span class="nv">expectedCount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">recordedAttempts</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">expectedCount</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can see that the <code class="language-plaintext highlighter-rouge">SpySecurityHelper</code> is more simple than the original implementation, the spy test double records all attempts of login, and checks the side effects of the dependency.</p>

<h2 id="5-mocks">5. Mocks</h2>

<p>A <strong>mock</strong> is the most sophisticated type of test double. It allows you to set expectations about interactions with the object and verify that those expectations are met. Mocks are often used in combination with testing frameworks.</p>

<h3 id="example-4">Example:</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MockNotificationService.swift</span>
<span class="kd">class</span> <span class="kt">MockNotificationService</span><span class="p">:</span> <span class="kt">NotificationService</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sentEmails</span><span class="p">:</span> <span class="p">[(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">func</span> <span class="nf">sendRegistrationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sentEmails</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="n">username</span><span class="p">,</span> <span class="n">success</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">sendAuthenticationEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sentEmails</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="n">username</span><span class="p">,</span> <span class="n">success</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">sendFailedAuthenticationAttemptEmail</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sentEmails</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="n">username</span><span class="p">,</span> <span class="n">success</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="c1">// Helper to verify that an email was sent</span>
    <span class="kd">func</span> <span class="nf">verifyEmailSent</span><span class="p">(</span><span class="n">to</span> <span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">success</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">sentEmails</span><span class="o">.</span><span class="n">contains</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">username</span> <span class="o">==</span> <span class="n">username</span> <span class="o">&amp;&amp;</span> <span class="nv">$0</span><span class="o">.</span><span class="n">success</span> <span class="o">==</span> <span class="n">success</span> <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// Helper to verify the total number of emails sent</span>
    <span class="kd">func</span> <span class="nf">verifyTotalEmailsSent</span><span class="p">(</span><span class="nv">expectedCount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">sentEmails</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">expectedCount</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="sample-code">Sample Code</h2>

<p>It‚Äôs best to use a real project to test our the code, you can download the source code <a href="assets/test_doubles.zip">Here</a>.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/auth_screen.png" alt="" class="centered" />
    <p align="center"><em>Simple SwiftUI Screen</em></p>
  </div>

<h2 id="conclusion">Conclusion</h2>

<p>Test doubles are a powerful concept that can significantly improve the reliability and maintainability of your tests. Whether you‚Äôre using dummies, fakes, stubs, spies, or mocks, each type of test double serves a unique purpose in ensuring your code is thoroughly tested in isolation.</p>

<p>By understanding when and how to use each type, you‚Äôll be able to write more focused and effective unit tests in Swift, ensuring your code is both high quality and easier to maintain.</p>

<p><strong>Happy testing!</strong> üéâ</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[The term test doubles draws inspiration from stunt doubles in the movie industry, where a stunt double steps in to perform dangerous or complex tasks, allowing the actor to focus on their role. Similarly, in software testing, test doubles step in to replace real components, making testing simpler, faster, and more reliable.]]></summary></entry><entry><title type="html">iOS Accessibility Basics</title><link href="https://swiftbydeya.com/ios-accessibility" rel="alternate" type="text/html" title="iOS Accessibility Basics" /><published>2023-08-02T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/ios-accessibility-series-part-basics</id><content type="html" xml:base="https://swiftbydeya.com/ios-accessibility"><![CDATA[<h2 id="introduction-to-ios-accessibility">Introduction to iOS Accessibility</h2>

<p>iOS accessibility, from a developer‚Äôs perspective, refers to the set of tools, technologies, and guidelines <a href="https://developer.apple.com/accessibility/">provided by Apple</a> that ensure iOS applications are usable and inclusive for people with disabilities. Accessibility should not be an afterthought but an integral part of app development to create a seamless experience for all users.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/a11y_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<h2 id="why-accessibility-matters">Why Accessibility Matters</h2>

<p>Making your app accessible broadens your user base by including people with diverse needs such as visual, auditory, motor, and cognitive impairments. In addition to the social and ethical aspects, accessibility can positively affect your app‚Äôs user experience, engagement, and retention.</p>

<h3 id="common-misconceptions-about-accessibility">Common Misconceptions about Accessibility</h3>

<p>Many developers and businesses overlook accessibility for several reasons:</p>
<ol>
  <li><strong>Lack of awareness</strong>: Developers may not realize the significance and scope of accessibility.</li>
  <li><strong>Perceived complexity</strong>: Implementing accessibility is often seen as difficult or time-consuming.</li>
  <li><strong>Misaligned priorities</strong>: Businesses prioritize visual aesthetics or other features over accessibility.</li>
  <li><strong>Costs and resources</strong>: There‚Äôs a belief that making apps accessible requires significant time, money, and resources.</li>
  <li><strong>Assumed target audience</strong>: Developers sometimes think their audience does not include people with disabilities, which is rarely accurate.</li>
</ol>

<p>Despite these challenges, investing in accessibility not only benefits users with disabilities but also enhances the overall user experience for everyone. Let‚Äôs explore how accessibility laws and regulations play a role in encouraging more inclusive apps.</p>

<h2 id="legal-implications-of-non-compliance">Legal Implications of Non-Compliance</h2>

<p>Several countries enforce digital accessibility through laws and regulations. In the United States, the <strong>Americans with Disabilities Act (ADA)</strong> and <strong>Section 508</strong> of the Rehabilitation Act mandate accessibility for digital content offered by federal agencies or organizations that receive federal funding.</p>

<h3 id="global-accessibility-standards">Global Accessibility Standards</h3>

<p>The <strong>Web Content Accessibility Guidelines (WCAG)</strong>, developed by the <strong>World Wide Web Consortium (W3C)</strong> and the <strong>Web Accessibility Initiative (WAI)</strong>, are internationally recognized as the primary standard for ensuring digital accessibility. Adopting WCAG principles in your iOS app ensures it meets the needs of users with disabilities while avoiding legal risks.</p>

<h3 id="legal-consequences-for-non-compliance">Legal Consequences for Non-Compliance</h3>

<p>Failure to comply with accessibility regulations can lead to:</p>
<ul>
  <li><strong>Lawsuits</strong>: Companies may face legal action for failing to provide accessible digital experiences.</li>
  <li><strong>Fines and penalties</strong>: Non-compliance can result in hefty fines and settlement costs.</li>
  <li><strong>Reputational damage</strong>: Poor accessibility can harm a company‚Äôs image and alienate potential customers.</li>
</ul>

<p>Several high-profile cases, such as lawsuits against Domino‚Äôs Pizza, Netflix, and Target, have set important legal precedents. These cases highlight the need for accessibility in both websites and mobile applications, with courts ruling in favor of plaintiffs seeking more inclusive experiences.</p>

<h2 id="ios-accessibility-tools-and-features">iOS Accessibility Tools and Features</h2>

<p>As an iOS developer, Apple provides various tools and APIs to incorporate accessibility features in your apps.</p>

<h3 id="voiceover">VoiceOver</h3>

<p><strong>VoiceOver</strong> is a built-in screen reader that allows users with visual impairments to interact with their devices using spoken feedback. It‚Äôs essential to ensure that your app supports VoiceOver by providing meaningful labels for UI elements and enabling users to navigate the app through gestures.</p>

<h3 id="dynamic-text">Dynamic Text</h3>

<p>Dynamic text allows users to adjust the size of the text to suit their reading preferences. To support this, make sure your app uses <code class="language-plaintext highlighter-rouge">UIFontMetrics</code> and resizable fonts so that text scales correctly across the interface.</p>

<h3 id="switch-control-and-assistivetouch">Switch Control and AssistiveTouch</h3>

<p><strong>Switch Control</strong> and <strong>AssistiveTouch</strong> help users with motor impairments to interact with their devices using alternate input methods. Developers can improve accessibility by ensuring that touch targets are large and well-spaced, and by supporting these alternative input methods.</p>

<h3 id="closed-captions-and-subtitles">Closed Captions and Subtitles</h3>

<p>For users with auditory impairments, closed captions and subtitles are crucial. If your app includes audio or video content, providing closed captioning is essential to ensure accessibility.</p>

<h2 id="types-of-disabilities-and-how-to-accommodate-them">Types of Disabilities and How to Accommodate Them</h2>

<p>It‚Äôs crucial to understand the diverse range of impairments and how each can affect the user experience. Here‚Äôs a breakdown:</p>

<table>
  <thead>
    <tr>
      <th>Disability Type</th>
      <th>Accessibility Considerations</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Visual</strong></td>
      <td>Users with visual impairments may rely on screen readers like VoiceOver or require high contrast modes. Ensure your app provides meaningful labels, supports dynamic text, and avoids color-only cues. Support users with conditions such as blindness, low vision, and color blindness.</td>
    </tr>
    <tr>
      <td><strong>Auditory</strong></td>
      <td>Users with hearing impairments depend on visual alternatives like subtitles, closed captions, and visual cues for alerts. Consider providing haptic feedback for notifications.</td>
    </tr>
    <tr>
      <td><strong>Motor</strong></td>
      <td>Users with limited dexterity benefit from larger touch targets and alternative input methods like Switch Control or voice commands. Simplifying interactions and allowing customizable gestures enhance usability.</td>
    </tr>
    <tr>
      <td><strong>Cognitive</strong></td>
      <td>Users with cognitive impairments may face challenges with memory, attention, or problem-solving. Clear instructions, simplified navigation, and minimal distractions improve the experience for these users.</td>
    </tr>
    <tr>
      <td><strong>Speech</strong></td>
      <td>Users with speech impairments might require alternative input methods like text-to-speech or communication aids. Consider incorporating Augmentative and Alternative Communication (AAC) tools.</td>
    </tr>
    <tr>
      <td><strong>Situational</strong></td>
      <td>Situational impairments, such as using an app in a noisy environment or under bright light, can benefit from features like closed captioning, adjustable brightness, and larger text sizes.</td>
    </tr>
  </tbody>
</table>

<h2 id="accessibility-best-practices">Accessibility Best Practices</h2>

<p>To ensure your app meets accessibility standards, follow these best practices:</p>
<ul>
  <li><strong>Label UI Elements</strong>: Provide meaningful, descriptive labels for all interactive elements.</li>
  <li><strong>Test with Assistive Technologies</strong>: Regularly test your app using tools like VoiceOver and Switch Control.</li>
  <li><strong>Support Dynamic Type</strong>: Ensure your app adapts to various text sizes.</li>
  <li><strong>Use Semantics</strong>: Make sure buttons, links, and other interactive elements have proper roles in accessibility APIs.</li>
  <li><strong>Color and Contrast</strong>: Avoid relying solely on color to convey information, and maintain sufficient contrast for readability.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Prioritizing accessibility in your iOS app development process not only ensures compliance with laws and standards but also creates a more inclusive user experience. By incorporating these best practices and leveraging Apple‚Äôs powerful accessibility tools, you can build applications that are usable by everyone, regardless of their abilities.</p>

<p>Accessibility is not just a feature‚Äîit‚Äôs a responsibility that every developer should embrace to ensure technology empowers all users.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Introduction to iOS Accessibility iOS accessibility, from a developer‚Äôs perspective, refers to the set of tools, technologies, and guidelines provided by Apple that ensure iOS applications are usable and inclusive for people with disabilities. Accessibility should not be an afterthought but an integral part of app development to create a seamless experience for all users.]]></summary></entry><entry><title type="html">SwiftUI Views Are Values, Not Objects: Understanding the Implications</title><link href="https://swiftbydeya.com/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs" rel="alternate" type="text/html" title="SwiftUI Views Are Values, Not Objects: Understanding the Implications" /><published>2023-05-19T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs</id><content type="html" xml:base="https://swiftbydeya.com/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs"><![CDATA[<p>In SwiftUI, views are fundamentally designed as value types rather than traditional objects. This design approach is a key aspect of SwiftUI‚Äôs declarative programming model and aligns with the Swift language‚Äôs emphasis on value semantics. Understanding this distinction is crucial for developers to avoid common pitfalls that can lead to bugs in their applications. üßê</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/swiftui_inside_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<h2 id="the-nature-of-value-types-in-swiftui">The Nature of Value Types in SwiftUI</h2>

<p>As value types, views in SwiftUI are immutable. When you modify a view, you are actually creating a new instance with the desired changes rather than mutating the existing view. This immutability allows SwiftUI to efficiently track changes and perform targeted updates to the user interface. When state changes, SwiftUI can determine the minimal set of updates required to reflect the new state, enhancing performance and responsiveness.</p>

<h3 id="benefits-of-value-types">Benefits of Value Types</h3>

<ol>
  <li>
    <p><strong>Predictable Behavior</strong>: Since views are copied when needed, developers can expect consistent behavior, making it easier to manage state and data flow.</p>
  </li>
  <li>
    <p><strong>Functional Programming Paradigm</strong>: Value types promote a more functional and declarative style of programming, allowing developers to describe the desired state while SwiftUI manages the view hierarchy.</p>
  </li>
  <li>
    <p><strong>Thread Safety</strong>: Value types are inherently thread-safe, as copies are made when passing views between different execution contexts, reducing the risk of concurrency issues.</p>
  </li>
  <li>
    <p><strong>Built-in Animations</strong>: SwiftUI can automatically animate changes by comparing old and new values of a view, resulting in smooth and visually appealing user interface updates.</p>
  </li>
</ol>

<h2 id="declarative-programming-paradigm">Declarative Programming Paradigm</h2>

<p>The declarative programming paradigm is central to SwiftUI‚Äôs design philosophy. Instead of specifying step-by-step instructions on how to achieve a particular state, developers describe the desired state of the user interface. SwiftUI‚Äôs view tree engine leverages this approach to efficiently manage and update the user interface based on changes in the underlying state.</p>

<h3 id="composable-view-hierarchy">Composable View Hierarchy</h3>

<p>In SwiftUI, you define your user interface using a hierarchy of composable and reusable views. Each view represents a specific part of the interface and is responsible for rendering itself based on the current state. This tree-like structure, known as the view hierarchy, is immutable. When the state changes, SwiftUI re-evaluates the view hierarchy and determines the necessary updates, a process known as the reconciliation algorithm (or diffing algorithm).</p>

<h2 id="the-reconciliation-algorithm">The Reconciliation Algorithm</h2>

<p>The reconciliation algorithm is where SwiftUI‚Äôs view tree engine excels. It efficiently compares the old and new view hierarchies, identifies differences, and applies the necessary updates to the user interface. By only updating the specific parts of the view hierarchy that have changed, SwiftUI minimizes the workload needed to keep the UI in sync with the state, resulting in optimal performance.</p>

<h3 id="comparison-with-uikit">Comparison with UIKit</h3>

<p>In contrast to UIKit, SwiftUI unifies view construction and updates into a single code path. Views are values rather than objects, described by values conforming to the View protocol. The view tree is transient and can be recreated at any time based on the underlying state. This declarative approach eliminates the need for separate event handlers and manual UI updates, as seen in UIKit. SwiftUI‚Äôs view tree engine efficiently reconciles state changes, performs targeted updates, and ensures a reactive UI that stays in sync with the data.</p>

<p>By relying on value semantics, SwiftUI can perform granular updates and avoid unnecessary computations, leading to a highly performant and responsive user interface.</p>

<h2 id="embracing-a-declarative-mindset">Embracing a Declarative Mindset</h2>

<p>By adopting a declarative approach, SwiftUI allows developers to focus on describing the desired end state of the UI rather than worrying about the low-level details of UI manipulation. This shift in mindset leads to more maintainable and expressive code, as developers can easily reason about the UI based on its desired state.</p>

<h3 id="reactive-programming-model">Reactive Programming Model</h3>

<p>Another significant aspect of SwiftUI‚Äôs view tree engine is its ability to efficiently handle updates. As views in SwiftUI are value types, changes in the state result in the creation of new view instances rather than mutating existing ones. SwiftUI employs a mechanism called ‚Äúvalue comparison‚Äù to determine the differences between the old and new views, enabling it to perform targeted updates to the UI.</p>

<p>Additionally, SwiftUI‚Äôs view tree engine embraces a reactive programming model. Views in SwiftUI are not just passive representations of UI elements; they react to changes in the state. This reactive nature ensures that the UI remains synchronized with the underlying data, providing a seamless user experience.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In conclusion, SwiftUI‚Äôs view tree engine revolutionizes UI development by embracing the declarative programming paradigm. By leveraging value types, value comparisons, and reactive programming, SwiftUI provides an efficient and responsive user interface. The ability to describe UI in a declarative manner, combined with targeted updates and optimization techniques, empowers developers to create intuitive and performant user interfaces with ease. Understanding the value semantics of SwiftUI views is essential for building robust applications and avoiding common pitfalls that can arise from overlooking this fundamental aspect of the framework.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[In SwiftUI, views are fundamentally designed as value types rather than traditional objects. This design approach is a key aspect of SwiftUI‚Äôs declarative programming model and aligns with the Swift language‚Äôs emphasis on value semantics. Understanding this distinction is crucial for developers to avoid common pitfalls that can lead to bugs in their applications. üßê]]></summary></entry><entry><title type="html">This is Why I Don‚Äôt Use Git GUI Tools</title><link href="https://swiftbydeya.com/this-is-why-i-dont-use-git-gui-tools" rel="alternate" type="text/html" title="This is Why I Don‚Äôt Use Git GUI Tools" /><published>2023-01-30T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/this-is-why-i-dont-use-git-gui-tools</id><content type="html" xml:base="https://swiftbydeya.com/this-is-why-i-dont-use-git-gui-tools"><![CDATA[<p>Almost anyone who uses Xcode can quickly notice that it lacks many essential Git features, which is acceptable in some way since it‚Äôs primarily a development environment rather than a dedicated source control application. 
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/git_cli_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>The features available in Xcode may suffice for personal or small projects, but when working within a larger team, relying solely on the IDE can lead to significant challenges in managing source control effectively.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/image-3.png" alt="" class="centered" />
    <p align="center"><em>Xcode's Source Control</em></p>
  </div>

<p>Many engineers have also observed that file status markers like ‚ÄúA‚Äù (added), ‚ÄúM‚Äù (modified), and ‚ÄúC‚Äù (conflicted) often remain stuck, making it difficult to determine the current state of files at a glance.</p>

<p>Convincing backend engineers to use the terminal is relatively straightforward, as GUI tools do not automatically update the repository‚Äôs trunk on a server daily at 1:30 AM. However, a cron job that utilizes the CLI can easily perform this task. On the other hand, persuading mobile developers may be more challenging since the need for terminal usage is not always immediately apparent.</p>

<h2 id="real-life-examples-of-using-the-git-cli">Real-Life Examples of Using the Git CLI</h2>

<p>Let‚Äôs explore a few real-life examples that highlight the advantages of using the Git CLI over GUI tools. While I could list numerous cases, I will keep this post concise by focusing on a couple of key commands that illustrate the power of the terminal.</p>

<h3 id="1-pr-reverts">1. PR Reverts</h3>

<p>GitHub introduced a feature for reverting pull requests (PRs). If you have an already merged PR and need to revert it before a tight deadline, using GitHub‚Äôs built-in revert feature does not provide details about which commits will be removed. This can lead to accidentally removing unrelated commits.</p>

<p>By contrast, using the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git revert <span class="nt">--no-commit</span> someHash
</code></pre></div></div>

<p>gives you fine-grained control over which commits to remove or retain, allowing for a more precise and safe rollback.</p>

<h3 id="2-submodules">2. Submodules</h3>

<p>When dealing with nested Git repositories (submodules), many GUI tools lack robust support for managing these structures. The Git CLI, however, provides comprehensive commands to add, update, and manage submodules effectively.</p>

<p>I typically keep the terminal open throughout the day; I can‚Äôt imagine working without it. I prefer understanding exactly what each command does rather than relying on button clicks in a GUI. While tools may come and go, the CLI remains the foundation upon which GUI tools are built.</p>

<h2 id="the-benefits-of-using-the-git-cli">The Benefits of Using the Git CLI</h2>

<p>Using the command line allows for the convenient setup of install scripts, build scripts, deployment scripts, and more. In a large team setting, it is often unclear what exactly happens within a GUI-based application. I‚Äôve witnessed colleagues make irreversible mistakes that could only be rectified using the CLI.</p>

<p>I find that I am several times more productive using the command line compared to navigating through menus with a mouse. While Git GUI tools aim to simplify the process, they can inadvertently add complexity, especially in larger projects. I‚Äôve encountered non-standard terminology in some GUI tools that can make understanding Git more difficult.</p>

<p>Xcode comes with a diffing tool, which visualize differences effectively. However, for serious Git users, mastering the command line is crucial. It provides the flexibility, control, and efficiency needed to manage complex projects and collaborate effectively with team members.</p>

<h2 id="common-git-commands">Common Git Commands</h2>

<p>Here is a table of common Git commands that I frequently use, sorted alphabetically, along with their descriptions:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git add</code></td>
      <td>Stages changes in your working directory for the next commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git annotate</code></td>
      <td>Displays the last modification of each line in a file, showing who made the change and when.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git bisect</code></td>
      <td>Uses binary search to find the commit that introduced a bug.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git blame</code></td>
      <td>Shows what revision and author last modified each line of a file.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout</code></td>
      <td>Switches branches or restores working tree files.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout -b</code></td>
      <td>Creates a new branch and switches to it.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git cherry-pick</code></td>
      <td>Applies the changes introduced by an existing commit to your current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clean -fdx</code></td>
      <td>Removes untracked files from your working directory, including ignored files.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clone</code></td>
      <td>Creates a copy of a remote repository on your local machine.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clone --single-branch</code></td>
      <td>Clones only the specified branch from a remote repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git commit</code></td>
      <td>Records changes to the repository with a descriptive message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git commit --amend -m "New commit message."</code></td>
      <td>Modifies the most recent commit with a new commit message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git config</code></td>
      <td>Configures Git settings, such as user information and repository-specific options.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git diff</code></td>
      <td>Shows changes between commits, commit and working tree, etc.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git diff --check</code></td>
      <td>Checks for whitespace errors in the changes.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git fetch</code></td>
      <td>Downloads objects and refs from another repository without merging.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git gc</code></td>
      <td>Cleans up unnecessary files and optimizes the local repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git init</code></td>
      <td>Initializes a new Git repository in the current directory.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log</code></td>
      <td>Displays the commit history for the current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --all</code></td>
      <td>Shows the commit history for all branches.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --oneline</code></td>
      <td>Displays a simplified view of the commit history, showing one line per commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --summary</code></td>
      <td>Provides a summary of changes made in each commit, including file additions and deletions.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log -p</code></td>
      <td>Shows the patch (diff) introduced in each commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git merge</code></td>
      <td>Combines changes from different branches into the current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git pull --rebase</code></td>
      <td>Fetches changes from a remote repository and rebases your current branch on top of them.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push</code></td>
      <td>Uploads local repository content to a remote repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push --set-upstream origin</code></td>
      <td>Sets the default remote branch for the current local branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push -u origin feature_branch_name</code></td>
      <td>Pushes the local branch to the remote repository and sets it to track the remote branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git rebase</code></td>
      <td>Reapplies commits on top of another base tip, allowing for a cleaner project history.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git remote -av</code></td>
      <td>Displays the remote repositories associated with the local repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git remote add</code></td>
      <td>Adds a new remote repository to your local Git configuration.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git reset --hard</code></td>
      <td>Resets the current branch to the specified state, discarding all changes in the working directory.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git restore</code></td>
      <td>Restores files in the working directory to their last committed state.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git revert</code></td>
      <td>Creates a new commit that undoes the changes made by a previous commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git rm</code></td>
      <td>Removes files from the working directory and stages the removal for the next commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git shortlog</code></td>
      <td>Summarizes the commit history, grouped by author.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git show</code></td>
      <td>Displays information about a specific commit, including changes and commit message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash</code></td>
      <td>Temporarily saves changes in your working directory that are not ready to be committed.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash list</code></td>
      <td>Lists all stashed changes.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash pop</code></td>
      <td>Restores the most recently stashed changes and removes them from the stash list.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git status</code></td>
      <td>Displays the state of the working directory and the staging area, showing which files are staged, modified, or untracked.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git tag</code></td>
      <td>Creates a tag reference for a specific commit, often used for marking release points.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git worktree</code></td>
      <td>Manages multiple working trees attached to the same repository, allowing you to work on different branches simultaneously.</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Almost anyone who uses Xcode can quickly notice that it lacks many essential Git features, which is acceptable in some way since it‚Äôs primarily a development environment rather than a dedicated source control application.]]></summary></entry><entry><title type="html">Why I Prefer To Store My Files On A Digital Ocean Space &amp;amp; Not Google Drive Or Dropbox.</title><link href="https://swiftbydeya.com/backup-on-spaces" rel="alternate" type="text/html" title="Why I Prefer To Store My Files On A Digital Ocean Space &amp;amp; Not Google Drive Or Dropbox." /><published>2023-01-21T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/backup-on-spaces</id><content type="html" xml:base="https://swiftbydeya.com/backup-on-spaces"><![CDATA[<p>This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.<br />
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/do_space_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>I‚Äôm one of those who experienced the evolution of data storage firsthand, starting with floppy disks to back up HTML pages‚Äîspecifically 3DMax tutorials‚Äîduring my visits to internet caf√©s back in 2003. As technology advanced, I transitioned to using CDs, followed by DVDs, which offered greater storage capacity. I vividly remember the first flash drive my father gifted me as a teenager; it had a mere 128 MB of storage. At that time, such a device was considered a luxury and not affordable for many where I live. Fast forward to today, and we now have SSDs that are over 1000 times larger in capacity and available at significantly lower prices.</p>

<h2 id="cloud-storage">Cloud Storage</h2>
<p>In the realm of cloud storage, common solutions like Google Drive and Dropbox offer plans, such as a 2TB option for $10 monthly. However, I prefer utilizing my own mountable drive integrated with a Content Delivery Network (CDN) for distributing my files efficiently. The best solution I‚Äôve found for storing my work is using DigitalOcean Spaces, which is similar to AWS S3. I can conveniently mount it using a client like Cyberduck on my Mac, or on any device I own, allowing for seamless access and management of my files. This approach not only provides me with greater control over my data but also enhances my ability to share and distribute content effectively.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/image-2.png" alt="" class="centered" />
    <p align="center"><em>Cyberduck, showing a Digital Ocean drive</em></p>
  </div>

<p>Serving static websites on DigitalOcean Spaces is entirely feasible by leveraging its S3-compatible object storage capabilities. To get started, you can upload your HTML, CSS, and JavaScript files directly to a Space, which acts as a repository for your website assets.</p>

<p>Even serving static websites, such as React applications or Jekyll blogs, on DigitalOcean Spaces is entirely feasible by leveraging its S3-compatible object storage capabilities. To get started, you can upload your website files‚Äîwhether they are HTML, CSS, JavaScript. For example, when deploying a React app, you can build your project and upload the contents of the build folder to the Space. Similarly, for a Jekyll blog, you can generate the static site and upload the resulting files to your Space. Although DigitalOcean Spaces doesn‚Äôt natively support custom domains, you can set up a reverse proxy server using NGINX on a DigitalOcean Droplet to map your domain to the Space, allowing your static site to be accessed via your custom URL. This combination of tools enables you to efficiently serve your static websites while taking advantage of the scalability and performance of DigitalOcean‚Äôs infrastructure.</p>

<h2 id="pros--cons">Pros &amp; Cons</h2>

<p>When considering a storage solution, it‚Äôs essential to weigh the advantages and disadvantages to determine the best fit for your needs. DigitalOcean Spaces offers a range of benefits that make it an appealing choice for developers and businesses alike. From cost-effectiveness to enhanced control over your files, the pros of using DigitalOcean Spaces can significantly enhance your workflow and file management capabilities. Below, we outline the key advantages of utilizing DigitalOcean Spaces, as well as some potential drawbacks to keep in mind, ensuring you have a comprehensive understanding of this powerful storage solution.</p>

<h3 id="pros">Pros</h3>

<ul>
  <li>
    <p><strong>Direct Links</strong>: Easily access your files with straightforward URLs, allowing for seamless integration into your applications and workflows.</p>
  </li>
  <li>
    <p><strong>Cost-Effective</strong>: With plans starting as low as $5, DigitalOcean Spaces provides an economical solution for storing and serving your data, making it accessible for individuals and small businesses alike.</p>
  </li>
  <li>
    <p><strong>Bandwidth Savings</strong>: Setting up a Content Delivery Network (CDN) is simple, enabling you to save significant amounts of bandwidth and avoid exceeding transfer caps, which is especially beneficial for high-traffic applications.</p>
  </li>
  <li>
    <p><strong>Granular Control</strong>: You have total control over metadata and content types of your files. For example, you can specify whether an uploaded MP4 file is streamable or downloadable, tailoring the user experience to your needs.</p>
  </li>
  <li>
    <p><strong>Cross-Device Compatibility</strong>: DigitalOcean Spaces can be easily mounted on any device or server, providing flexibility and accessibility regardless of your operating system or hardware.</p>
  </li>
  <li>
    <p><strong>Active File Serving</strong>: Unlike traditional storage solutions, your files are actively served, allowing you to host dynamic content, such as an Angular website, without placing additional load on your server.</p>
  </li>
  <li>
    <p><strong>Custom URL Masking</strong>: You can mask the URL to reflect your own domain, enhancing professionalism and branding when presenting to clients or stakeholders during demos.</p>
  </li>
</ul>

<h3 id="cons">Cons</h3>

<ul>
  <li>
    <p><strong>Technical Knowledge Requirement</strong>: Some users may find that utilizing DigitalOcean Spaces requires a certain level of technical knowledge, which could be a barrier for those unfamiliar with cloud storage solutions.</p>
  </li>
  <li>
    <p><strong>Limited Client Options</strong>: Many desktop clients used to mount such drives are not open source or free, which may limit accessibility for some users.</p>
  </li>
  <li>
    <p><strong>File Sharing Limitations</strong>: Files stored in DigitalOcean Spaces cannot be shared with specific individuals; they are either public or private, which may not suit all collaboration needs.</p>
  </li>
</ul>

<h3 id="security">Security</h3>

<p>DigitalOcean Spaces offers robust security features designed to protect your data effectively. One of the key aspects is access control, which allows users to manage permissions for files stored in Spaces.</p>

<h3 id="use-cases-are-infinite">Use cases are infinite!</h3>

<p>The versatility of DigitalOcean Spaces opens up a myriad of use cases that can significantly enhance productivity and efficiency. For instance, if you‚Äôre involved in web scraping, you can effortlessly download large YouTube channels as a background job on the server. This approach allows you to avoid consuming your internet bandwidth while eliminating the need to keep a device running for extended periods. Instead, the files are stored directly in your DigitalOcean Space, making them readily accessible whenever you need them, without the hassle of local storage management. üßê</p>

<p>Moreover, DigitalOcean Spaces functions similarly to a Network Attached Storage (NAS) solution, providing a centralized location for all your files that can be accessed from multiple devices. This capability is particularly beneficial for teams or individuals who require seamless file sharing and collaboration. Additionally, it can serve as a media center, allowing you to host and stream your multimedia content efficiently. Whether you‚Äôre managing a portfolio of projects, sharing resources with colleagues, or simply organizing personal media, the possibilities are truly endless with DigitalOcean Spaces.</p>

<p>Another innovative use case for DigitalOcean Spaces is as a centralized repository for continuous integration and deployment (CI/CD) pipelines. Software engineers can utilize Spaces to store build artifacts, such as compiled binaries, Docker images, or deployment packages, generated during the CI/CD process. By configuring your CI/CD tools to upload these artifacts directly to DigitalOcean Spaces, you can ensure that all necessary files are easily accessible for deployment across various environments. This setup not only streamlines the deployment process but also provides a reliable and scalable solution for managing versioned artifacts, making it easier to roll back to previous versions if needed. Additionally, you can integrate Spaces with other services, such as monitoring and alerting tools, to keep track of deployment statuses and ensure smooth operations throughout the software development lifecycle.</p>

<p>I‚Äôd love to hear how others are using DigitalOcean Spaces in their projects! Whether you‚Äôre leveraging it for web hosting, data storage, or as part of your CI/CD pipeline, your experiences and tips could be incredibly valuable. Share your thoughts and use cases in the comments below‚Äîlet‚Äôs learn from each other!</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.]]></summary></entry><entry><title type="html">Gentle Introduction To Unit Testing.</title><link href="https://swiftbydeya.com/gentle-introduction-to-unit-testing" rel="alternate" type="text/html" title="Gentle Introduction To Unit Testing." /><published>2023-01-16T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/gentle-introduction-to-unit-testing</id><content type="html" xml:base="https://swiftbydeya.com/gentle-introduction-to-unit-testing"><![CDATA[<p>One Monday morning, a new developer, nicknamed Penguin üêß, started their first job as a software engineer. A conversation between Penguin and their team leader, Rex ü¶ñ, unfolded like this:</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/unit_testing_intro_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p><strong>Penguin üêß:</strong> I‚Äôve noticed that we have test cases written for almost all features in our mobile app. Why would we write unit tests if we have a QA team that does testing and quality assurance?</p>

<p><strong>Rex ü¶ñ:</strong> Writing unit tests doesn‚Äôt just ensure that features behave correctly after being developed or shipped; it also ensures that when someone writes new code, it doesn‚Äôt break any existing code. The QA team can‚Äôt test everything all over again when a new feature is introduced. It‚Äôs like an investment: you spend extra time writing unit tests while developing a feature, but you prevent potential bugs from happening in the future.</p>

<p>A CI/CD job running all tests will prevent any developer from merging code that breaks an existing feature, provided that the feature has well-written tests. Tests can also serve as good documentation for anyone intending to read your code.</p>

<p><strong>Penguin üêß:</strong> My first function checks if the application needs a force update by comparing two version strings, like 1.0.2 and 1.1.2. Should my test function iterate through all possible cases, from the minimum value 000.000.000 to the maximum 999.999.999?</p>

<p><strong>Rex ü¶ñ:</strong> No! The idea of test cases is to cover edge cases and unexpected scenarios, like negative numbers in this example, along with a few random usual cases. You might consider writing test functions like:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testWhenCurrentVersionIsLessThanRequiredVersionRequiresUpdate</span>
<span class="n">testWhenRequiredVersionIsEqualToCurrentVersionRequiresNoUpdate</span>
<span class="n">testMaximumMajorNumberComparesCorrectly</span>
<span class="n">testMaximumMinorNumberComparesCorrectly</span>
<span class="n">testMinimumPatchNumberComparesCorrectly</span>
<span class="n">testMinimumMajorNumberComparesCorrectly</span>
<span class="n">testMinimumMinorNumberComparesCorrectly</span>
<span class="n">testMinimumPatchNumberComparesCorrectly</span>
<span class="n">testMinimumNumbersComparesCorrectly</span>
</code></pre></div></div>

<p>‚Ä¶plus some random normal cases.</p>

<p>Remember, the naming convention should show the developer‚Äôs intention, even if the test function name becomes lengthy. Covering all cases will make tests take a long time, possibly minutes in your case. You must avoid that. Unit tests need to be fast, ideally running in 50ms or less.</p>

<h3 id="unit-tests-criteria-first">Unit Tests Criteria ‚ÄúF.I.R.S.T‚Äù:</h3>

<p>The F.I.R.S.T criteria for unit tests is a set of principles designed to promote effective testing practices. It stands for Fast (tests should run quickly), Independent (tests should be self-contained), Repeatable (tests should yield consistent results), Self-Validating (tests should automatically determine pass or fail), and Timely (tests should be written alongside production code). These principles help ensure robust unit tests that improve code quality and simplify maintenance.</p>

<ul>
  <li><strong>Fast:</strong> We can run dozens of them in a second, if not more.</li>
  <li><strong>Isolated:</strong> Should not depend on each other or any external state.</li>
  <li><strong>Repeatable:</strong> They should always give the same result when they are run, like a pure function.</li>
  <li><strong>Self-Verifying:</strong> The test must unambiguously say whether it passed or failed, with no room for interpretation.</li>
  <li><strong>Timely:</strong> They should be written before or alongside the production code that you are testing.</li>
</ul>

<p><strong>Penguin üêß:</strong> But we must have high test coverage, like 100% coverage to cover all cases, right?</p>

<p><strong>Rex ü¶ñ:</strong> Test coverage refers to the percentage of code logic that is tested, not the ‚Äúpossible values coverage.‚Äù By the way, test coverage is a flawed metric; it only means we have test functions that call our code. It doesn‚Äôt guarantee that the test functions are good.</p>

<p><strong>Penguin üêß:</strong> Got it. Are there any other benefits to having unit tests?</p>

<p><strong>Rex ü¶ñ:</strong> Testing reduces maintenance costs and the number of bugs. There are also other costs to consider, like customer impact. The longer an issue goes undiscovered, the more expensive it is, which can result in negative reviews, lost trust, and, of course, lost revenue!</p>

<p><strong>Penguin üêß:</strong> Why follow TDD (Test Driven Development) methodology? Why write the tests before writing the feature itself?</p>

<p><strong>Rex ü¶ñ:</strong> There are many development methodologies, like TDD, ATDD, DDD, BDD‚Ä¶ These are lengthy topics, and I encourage you to read about them. While TDD is a popular approach that includes the RGR (Red, Green, Refactor) lifecycle, it‚Äôs important to note that it‚Äôs not always the best choice for every situation. Consider the context of your project when choosing a methodology.</p>

<p><strong>Penguin üêß:</strong> That‚Äôs cool! How can I make sure my code is testable, and what makes it not testable?</p>

<p><strong>Rex ü¶ñ:</strong> You may consider architectural patterns that make code more modular and easier to test, like MVVM, VIPER, VIP, or even Functional Reactive Programming (FRP). Dependency injection, coordinator patterns, and pure functions also help make your code more testable.</p>

<p><strong>Penguin üêß:</strong> So I always need to mock stuff when testing, right?</p>

<p><strong>Rex ü¶ñ:</strong> There are various types of test doubles out there, not just mocks. You‚Äôve got fakes, stubs, spies, and dummies too! It might feel a bit overwhelming at first, but I encourage you to look into each one and learn when to use them effectively. Understanding their differences will really help you in your testing journey!</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/test_doubles.jpg" alt="" class="centered" />
    <p align="center"><em>(test doubles) term is derived from (stunt doubles)</em></p>
  </div>

<p><strong>Penguin üêß:</strong> What other tips do you have?</p>

<p><strong>Rex ü¶ñ:</strong> Here are a few:</p>

<ul>
  <li>In network testing for mobile apps, no HTTP request should be made. You test the networking feature itself.</li>
  <li>Tests run alphabetically, so you shouldn‚Äôt rename your tests to change their order of execution. Remember, tests should be independent; changing the order intentionally will break this criterion.</li>
  <li>Xcode provides performance tests that compare previous runs. You can also change the baseline, and it gives nicely formatted test coverage markers.</li>
  <li>Writing no tests is better than writing flaky tests!</li>
</ul>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[One Monday morning, a new developer, nicknamed Penguin üêß, started their first job as a software engineer. A conversation between Penguin and their team leader, Rex ü¶ñ, unfolded like this:]]></summary></entry><entry><title type="html">Refresher: Solving Few Problems</title><link href="https://swiftbydeya.com/problem_solving_swift_1_4" rel="alternate" type="text/html" title="Refresher: Solving Few Problems" /><published>2022-11-16T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/problem_solving_swift_1_4</id><content type="html" xml:base="https://swiftbydeya.com/problem_solving_swift_1_4"><![CDATA[<p>After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.</p>

<!--more-->
<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/algo_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/grokking.jpeg" alt="" class="centered" />
    <p align="center"><em>Grokking Algorithms book</em></p>
  </div>

<p>Understanding data structures is essential before diving into problem-solving. While I won‚Äôt go into detailed explanations here, I recommend attempting to solve the problems on your own without immediately referring to the solutions.</p>

<h2 id="problem-1">Problem 1</h2>
<p><strong>Return a pair of two distinct values (if any) that sum up to a target number, from a nonempty array that contains distinct integers.</strong></p>

<p>Here are different solutions with varying time complexities:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">targetSum</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n*log(n))</span>
<span class="kd">func</span> <span class="nf">solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">sorted</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">leftPointer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">rightPointer</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">leftPointer</span> <span class="o">&lt;</span> <span class="n">rightPointer</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">leftMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">leftPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">rightMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">rightPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">currentSum</span> <span class="o">=</span> <span class="n">leftMost</span> <span class="o">+</span> <span class="n">rightMost</span>
        <span class="k">if</span> <span class="n">currentSum</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">leftMost</span><span class="p">,</span> <span class="n">rightMost</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&lt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">leftPointer</span> <span class="o">=</span> <span class="n">leftPointer</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&gt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">rightPointer</span> <span class="o">=</span> <span class="n">rightPointer</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">numberDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">mayMatch</span> <span class="o">=</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">number</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">exists</span> <span class="o">=</span> <span class="n">numberDictionary</span><span class="p">[</span><span class="n">mayMatch</span><span class="p">],</span> <span class="n">exists</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">mayMatch</span><span class="p">,</span> <span class="n">number</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">numberDictionary</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="analysis">Analysis:</h3>

<p>Each solution has its trade-offs in terms of time complexity. Running a simple benchmark on an array with 100,000 values yields the following results:</p>

<ul>
  <li>solution1: 31.88 s.</li>
  <li>solution2: 18.41 s.</li>
  <li>solution3: 0.38 s.</li>
  <li>solution4: 0.20 s. üèÜ</li>
</ul>

<p>As you can see, solution 4 is the most efficient in this case, with a time complexity of O(n).</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/prob_001_graph-1024x687.png" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>The functions used for benchmarking are:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">operation</span><span class="p">:()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Time elapsed for </span><span class="se">\(</span><span class="n">title</span><span class="se">)</span><span class="s">: </span><span class="se">\(</span><span class="n">timeElapsed</span><span class="se">)</span><span class="s"> s."</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">timeElapsedInSecondsWhenRunningCode</span><span class="p">(</span><span class="nv">operation</span><span class="p">:</span> <span class="p">()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">timeElapsed</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="problem-2">Problem 2</h2>
<p>Given two non-empty arrays, write a function that determines if the second array is a subsequence of the first array.</p>

<blockquote>
  <p>Keep in mind that a subsequence is not the same as a subarray.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">arrIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">arrIdx</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="n">seqIdx</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">arrIdx</span><span class="p">]</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="n">arrIdx</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>

<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="test-results">Test Results:</h3>

<p>Using these arrays:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArray1</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900005</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900005</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">let</span> <span class="nv">myArray2</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>The results were:</p>
<ul>
  <li>Time elapsed for solution1: 28.102 s.</li>
  <li>Time elapsed for solution2: 14.446 s. üèÜ</li>
</ul>

<p>Solution 2 is more efficient, even though both solutions have the same time complexity. Can you guess why? ü§ì</p>

<h2 id="problem-3">Problem 3</h2>
<p>Write a function that takes in a non-empty array of integers sorted in ascending order and returns a new array with the squares of the original integers, also sorted in ascending order.</p>

<p>Here are four solutions along with explanations:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad solution, appending is expensive; it's better to initialize an array with the required length.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span> <span class="o">*</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(nlog(n)) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">value</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Using higher-order functions for high performance.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">*</span> <span class="nv">$0</span> <span class="p">}</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(n) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">var</span> <span class="nv">smallerValueIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">largerValueIdx</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="k">in</span> <span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">smallerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">smallerValueIdx</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">largerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">largerValueIdx</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">abs</span><span class="p">(</span><span class="n">smallerValue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">abs</span><span class="p">(</span><span class="n">largerValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">smallerValue</span> <span class="o">*</span> <span class="n">smallerValue</span>
            <span class="n">smallerValueIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">largerValue</span> <span class="o">*</span> <span class="n">largerValue</span>
            <span class="n">largerValueIdx</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="benchmarking">Benchmarking:</h3>

<p>For the input:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArraySortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">5000000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">5000000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>Time elapsed for solution1: 6.786 s.</li>
  <li>Time elapsed for solution2: 6.275 s.</li>
  <li>Time elapsed for solution3: 5.106 s.</li>
  <li>Time elapsed for solution4: 1.637 s. ü•á</li>
</ul>

<h2 id="problem-4">Problem 4</h2>

<p>Given a 2D array of matches <code class="language-plaintext highlighter-rouge">[host, guest]</code> and an array of results where 1 means the host team won, determine the player with the most wins.</p>

<p>Example:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Keymer"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">]</span>
<span class="p">]</span>
<span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="k">let</span> <span class="nv">HOST_TEAM_WON</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">WIN_POINTS</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1">// O(n) time | O(k) space , where n: are matches and k is the number of teams</span>
<span class="kd">func</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">_</span> <span class="nv">matches</span><span class="p">:</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]],</span> <span class="n">_</span> <span class="nv">results</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">bestPlayer</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">scores</span> <span class="o">=</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]()</span>
    <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">match</span><span class="p">)</span> <span class="k">in</span> <span class="n">matches</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="p">(</span><span class="nv">host</span><span class="p">,</span> <span class="nv">guest</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">let</span> <span class="nv">winning</span> <span class="o">=</span> <span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="kt">HOST_TEAM_WON</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="n">host</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="n">guest</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
        <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="kt">WIN_POINTS</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span><span class="o">!</span> <span class="p">{</span>
            <span class="n">bestPlayer</span> <span class="o">=</span> <span class="n">winning</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">bestPlayer</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">generateData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">([[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">,</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">players1</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Aronian"</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">players2</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Keymer"</span><span class="p">,</span> <span class="s">"Vitiugov"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">()</span>
    <span class="k">var</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">let</span> <span class="nv">possibleResults</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="mi">10</span> <span class="p">{</span>
        <span class="n">matches</span><span class="o">.</span><span class="nf">append</span><span class="p">([</span><span class="n">players1</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span> <span class="n">players2</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">])</span>
        <span class="n">results</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">possibleResults</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
    <span class="nf">return</span> <span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">problem_04_solutions</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="nf">generateData</span><span class="p">()</span>
    <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="s">"solution1"</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">winner</span> <span class="o">=</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">winner</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><summary type="html"><![CDATA[After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.]]></summary></entry><entry><title type="html">iOS/Android Developer Security Basics</title><link href="https://swiftbydeya.com/ios-android-developer-security-basics" rel="alternate" type="text/html" title="iOS/Android Developer Security Basics" /><published>2022-03-13T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/ios-android-developer-security-basics</id><content type="html" xml:base="https://swiftbydeya.com/ios-android-developer-security-basics"><![CDATA[<p>Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/security_basics_full.jpg" alt="Mobile Security Basics" class="centered" />
    <p align="center"><em>JomJom!</em></p>
  </div>

<h2 id="the-importance-of-security-in-mobile-development">The Importance of Security in Mobile Development</h2>

<p>ü•∏: What are the risks of not having good security precautions? Why do we spend so much on security?<br />
üíÄ: There are over 500 reported incidents of data breaches each year, with each incident costing an average of 3.5M to 5.0M USD. Remote work has increased these costs by 15%, as attackers find more opportunities when targets are spread across different locations.</p>

<p>ü•∏: When people talk about security, the server is often seen as the main line of defense. Why should mobile developers be concerned if the server is secure?<br />
üíÄ: Even if the server is secure, mobile apps still need to implement security best practices. Mobile apps have direct access to sensitive data like location, contacts, and files. A compromised app could leak this information, posing significant risks. Unlike browsers, mobile apps run locally on devices without the same protections, making vulnerabilities in app code a target for attackers.</p>

<h2 id="cross-platform-security-concerns">Cross-Platform Security Concerns</h2>

<p>ü•∏: But you‚Äôre an iOS developer, and I develop for Android. Are your tips applicable to Android too?<br />
üíÄ: Yes, many security precautions apply to both platforms, but it‚Äôs important to note that iOS and Android are based on different operating systems. iOS is based on Darwin (BSD), which is Unix-like, while Android is Linux-based. However, both platforms share common security concerns.</p>

<p>ü•∏: Why can‚Äôt we just rely on HTTPS for security?<br />
üíÄ: HTTPS protects data in transit between the client and server, but only if the TLS certificate is valid and uncompromised. It‚Äôs just one layer of security; other aspects, like secure storage and code integrity, also need attention.</p>

<h2 id="mobile-security-weak-points">Mobile Security Weak Points</h2>

<p>ü•∏: What are the weak points in mobile security?<br />
üíÄ: Network, disk, and USB ports are common attack vectors. Understanding these entry points is key to securing your app.</p>

<h2 id="key-security-terminology">Key Security Terminology</h2>
<p>üíÄ: Here are some essential terms you should know:</p>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Basic Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Authentication</td>
      <td>Establishing a user‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Authorization</td>
      <td>Granting a user access to a resource. See <a href="https://www.sailpoint.com/identity-library/difference-between-authentication-and-authorization/">this article</a> for more.</td>
    </tr>
    <tr>
      <td>Cryptography</td>
      <td>The study of encryption and decryption techniques.</td>
    </tr>
    <tr>
      <td>Encryption</td>
      <td>Securing digital data using mathematical techniques and a key.</td>
    </tr>
    <tr>
      <td>Decryption</td>
      <td>Converting encrypted data back to its original form.</td>
    </tr>
    <tr>
      <td>Hashing</td>
      <td>Mapping data of arbitrary size to fixed-size values, often used for fingerprinting.</td>
    </tr>
    <tr>
      <td>Forensics</td>
      <td>The branch of digital science related to evidence found in computers and storage media.</td>
    </tr>
    <tr>
      <td>Sniffing</td>
      <td>Monitoring and capturing data packets in a network.</td>
    </tr>
    <tr>
      <td>HTTPS</td>
      <td>Hypertext Transfer Protocol Secure, a secure web protocol.</td>
    </tr>
    <tr>
      <td>SSL</td>
      <td>Secure Sockets Layer, a cryptographic protocol.</td>
    </tr>
    <tr>
      <td>TLS</td>
      <td>Transport Layer Security, the successor to SSL.</td>
    </tr>
    <tr>
      <td>IP Spoofing</td>
      <td>Creating IP packets with a modified source address to hide the sender‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Reverse Engineering</td>
      <td>Deconstructing software or devices to extract design information.</td>
    </tr>
    <tr>
      <td>MITM</td>
      <td>Man-in-the-Middle, an attack where data between two parties is intercepted and potentially altered.</td>
    </tr>
    <tr>
      <td>XSS</td>
      <td>Cross-Site Scripting, an injection attack on web applications.</td>
    </tr>
    <tr>
      <td>SQL Injection</td>
      <td>An attack that exploits vulnerabilities in SQL queries. <a href="https://www.w3schools.com/sql/sql_injection.asp">Read more here.</a></td>
    </tr>
    <tr>
      <td>OWASP</td>
      <td>Open Web Application Security Project, a nonprofit foundation focused on improving software security.</td>
    </tr>
    <tr>
      <td>MASVS</td>
      <td>Mobile Application Security Verification Standard, part of the OWASP Mobile Security Testing Guide.</td>
    </tr>
    <tr>
      <td>Mach-O binary</td>
      <td>The binary format used by iOS and macOS applications.</td>
    </tr>
  </tbody>
</table>

<h2 id="jailbreaking-and-security-risks">Jailbreaking and Security Risks</h2>

<p>ü•∏: Why are jailbroken devices a threat to app security?<br />
üíÄ: Jailbreaking allows users to bypass built-in security features, exposing the app to potential attacks. It‚Äôs best practice to prevent jailbroken devices from running your app. Check out my <a href="https://github.com/deya-eldeen/x04_checker">x04_checker</a> repo for an iOS library that helps detect jailbroken devices.</p>

<h2 id="debugging-and-logging-concerns">Debugging and Logging Concerns</h2>

<p>ü•∏: They say debugging and print statements can be a security risk. Is that true?<br />
üíÄ: Yes, print statements are only active in development builds, but they can still send data to the USB interface. Also, <code class="language-plaintext highlighter-rouge">NSLog</code> statements remain in distribution builds, and users can access logs via the macOS Console app. Be careful not to log sensitive data or leave traces of code symbols.</p>

<h2 id="certificate-pinning-and-static-strings">Certificate Pinning and Static Strings</h2>

<p>ü•∏: What about certificate pinning?<br />
üíÄ: Certificate pinning prevents attackers from using an invalid certificate to intercept data. Implementing dynamic certificate updates within the app is crucial to prevent tampering.</p>

<p>ü•∏: And what about sensitive static strings?<br />
üíÄ: Never store sensitive strings in plist or other asset files. They are easily accessible and can expose your app to risks.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/facebookstring-1024x695.jpeg" alt="Strings Tool" class="centered" />
    <p align="center"><em>This is usage of the `strings` tool, on macos, scanning some APK.</em></p>
  </div>

<h2 id="the-risks-of-third-party-libraries">The Risks of Third-Party Libraries</h2>

<p>ü•∏: Why are third-party libraries risky for sensitive apps?<br />
üíÄ: While libraries are generally fine, they should be audited regularly. For sensitive apps, like banking, it‚Äôs better to minimize their use to avoid potential vulnerabilities.</p>

<h2 id="url-scheme-attacks-and-universal-links">URL-Scheme Attacks and Universal Links</h2>

<p>ü•∏: What about URL-scheme attacks?<br />
üíÄ: When you define a URL scheme, your app can be launched by any link matching that scheme. However, other apps can register the same scheme, posing a risk. Universal links are a safer alternative.</p>

<h2 id="final-thoughts-on-mobile-security">Final Thoughts on Mobile Security</h2>

<p>üíÄ: Achieving 100% security is impossible, but you can make attacking or cracking your app much more difficult. Remember, security is about increasing the cost and complexity of an attack relative to the value of the data.</p>

<p>Some additional tips:</p>

<ul>
  <li>Avoid Objective-C if possible; it‚Äôs easy to reverse engineer.</li>
  <li>Don‚Äôt log sensitive data.</li>
  <li>Disable keyboard caching for third-party keyboards.</li>
  <li>Store user credentials securely in the keystore or keychain.</li>
  <li>Implement App Transport Security and certificate pinning.</li>
  <li>Ensure data on disk and across the network is secure.</li>
  <li>Protect your application logic from reverse engineering.</li>
  <li>Avoid sharing sensitive data with third parties.</li>
  <li>Hide jailbreak detection deep within your app, not in the app delegate.</li>
</ul>

<p>Security isn‚Äôt just about making data impossible to access; it‚Äôs about balancing the cost and effort of data retrieval against its importance.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><summary type="html"><![CDATA[Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.]]></summary></entry><entry><title type="html">Understanding GPS Hardware Basics for Mobile Developers</title><link href="https://swiftbydeya.com/gps-hardware-basics-for-software-engineers" rel="alternate" type="text/html" title="Understanding GPS Hardware Basics for Mobile Developers" /><published>2022-03-10T00:00:00+03:00</published><updated>2024-09-08T00:00:00+03:00</updated><id>https://swiftbydeya.com/gps-hardware-basics-for-software-engineers</id><content type="html" xml:base="https://swiftbydeya.com/gps-hardware-basics-for-software-engineers"><![CDATA[<p>Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/gps_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>This article is structured as a conversation between an <strong>iOS developer (Alex üë®üèª‚Äçüíª)</strong> and an <strong>electrical engineer (Sarah üë©üèº‚Äçüíª)</strong>. Through their dialogue, we‚Äôll explore the fundamentals of GPS technology.</p>

<h2 id="the-basics-of-gps">The Basics of GPS</h2>

<p>üë®üèª‚Äçüíª: So what does GPS stand for?<br />
üë©üèº‚Äçüíª: It stands for <strong>Global Positioning System</strong>.</p>

<p>üë®üèª‚Äçüíª: Who created it, and for what purpose?<br />
üë©üèº‚Äçüíª: The GPS project was launched by the United States in 1973 to overcome the limitations of earlier navigation systems.</p>

<p>üë®üèª‚Äçüíª: I know GPS works without an internet connection, but do I need cellular service to use GPS?<br />
üë©üèº‚Äçüíª: No, you don‚Äôt need cellular service either.</p>

<h2 id="how-gps-works-without-internet-or-cellular-service">How GPS Works Without Internet or Cellular Service</h2>

<p>üë®üèª‚Äçüíª: How does GPS work without internet or cellular service?<br />
üë©üèº‚Äçüíª: Your device receives signals from satellites. There are about 24 operational satellites in six orbital planes.</p>

<p>üë®üèª‚Äçüíª: Does my mobile need to connect to all of these satellites?<br />
üë©üèº‚Äçüíª: No, when stationary, your device only needs to receive signals from at least three satellites. When moving, it needs signals from four satellites for accurate positioning.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/ConstellationGPS.gif" alt="GPS Satellites" class="centered" />
    <p align="center"><em>GPS Satellites in Orbit (Source: Wikipedia)</em></p>
  </div>

<p>üë®üèª‚Äçüíª: How does the GPS system identify me and send data back?<br />
üë©üèº‚Äçüíª: The satellites don‚Äôt identify you. <strong>They continuously emit synchronized pulses everywhere.</strong> Your device simply receives these signals.</p>

<h2 id="calculating-your-position">Calculating Your Position</h2>

<p>üë®üèª‚Äçüíª: How does my mobile determine my latitude, longitude, and altitude?<br />
üë©üèº‚Äçüíª: Your device compares the time it receives signals from each satellite. By calculating the time differences, it can determine your position on Earth. The satellites have highly accurate atomic clocks, which make these calculations possible.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/GPS-satellite-position-calculations-3.png" alt="GPS Position Calculation" class="centered" />
    <p align="center"><em>Calculating Position Using GPS Satellites</em></p>
  </div>

<p>üë®üèª‚Äçüíª: If the service is free and I don‚Äôt have a subscription for GPS, how is it funded?<br />
üë©üèº‚Äçüíª: GPS is one of several <strong>Global Navigation Satellite Systems (GNSS)</strong>. Others include GLONASS, BeiDou, and Galileo. These systems are funded by governments and sometimes private entities. Commercial GPS receivers might have restrictions, like not functioning at high speeds.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/Beidou_Navigation_Satellite_System_2012.png" alt="BeiDou Navigation System" class="centered" />
    <p align="center"><em>BeiDou GNSS, which doesn't have full Earth coverage</em></p>
  </div>

<h2 id="accuracy-and-limitations-of-gps">Accuracy and Limitations of GPS</h2>

<p>üë®üèª‚Äçüíª: What is the typical error margin of GPS?<br />
üë©üèº‚Äçüíª: The error margin varies but is typically between 15 to 50 meters. Some systems use additional inertial sensors to provide more accurate positioning.</p>

<p>üë®üèª‚Äçüíª: What is the minimum detectable distance?<br />
üë©üèº‚Äçüíª: Theoretically, the resolution is as fine as one inch, but in practice, it‚Äôs about three meters.</p>

<h2 id="challenges-of-using-gps-indoors">Challenges of Using GPS Indoors</h2>

<p>üë®üèª‚Äçüíª: I tried using GPS inside a large hospital, but the readings were inaccurate.<br />
üë©üèº‚Äçüíª: GPS signals do not work well indoors because they require a clear line of sight to the satellites.</p>

<p>üë®üèª‚Äçüíª: But I still got some readings on my maps app indoors.<br />
üë©üèº‚Äçüíª: That‚Äôs likely the last known location. Some devices, like those from Huawei, augment GPS data with accelerometer and gyroscope data to simulate basic indoor navigation, but it‚Äôs not reliable.</p>

<p>üë®üèª‚Äçüíª: What technologies are used for indoor navigation systems?<br />
üë©üèº‚Äçüíª: Indoor navigation typically uses beacons, Bluetooth, and other technologies. You might want to look into Apple AirTags for more information.</p>

<h2 id="using-sensors-for-positioning">Using Sensors for Positioning</h2>

<p>üë®üèª‚Äçüíª: Why can‚Äôt we just use the accelerometer and gyroscope in our phones to calculate position?<br />
üë©üèº‚Äçüíª: While you can derive some positional data from these sensors, they are prone to significant errors over time due to factors like drift and gimbal lock. Accelerometers and gyroscopes alone can‚Äôt provide absolute positioning, and their errors accumulate quickly.</p>

<p>üë®üèª‚Äçüíª: That was a lot of information. Thanks for the explanation.<br />
üë©üèº‚Äçüíª: You‚Äôre welcome! See you soon.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Understanding how GPS works can help mobile developers better utilize location services in their apps. Whether you‚Äôre developing a navigation app or just curious about the technology behind the blue dot on your map, a basic knowledge of GPS hardware can enhance your approach to location-based features.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><summary type="html"><![CDATA[Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.]]></summary></entry></feed>