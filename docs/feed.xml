<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-09-06T23:56:27+03:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Swift By Deya</title><subtitle>Swifty Insights: Dive into the world of Swift and iOS development with our weekly articles.</subtitle><entry><title type="html">Significant Network Problems on macbooks with M1/ M2 Chips With Proposed Solutions</title><link href="http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions" rel="alternate" type="text/html" title="Significant Network Problems on macbooks with M1/ M2 Chips With Proposed Solutions" /><published>2024-02-02T00:00:00+03:00</published><updated>2024-02-02T00:00:00+03:00</updated><id>http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions</id><content type="html" xml:base="http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions"><![CDATA[<p>As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported <strong><em>significant stability issues &amp; network performance issues</em></strong>, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/network_fix_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>One common complaint is sudden long drops in transfer rates, often resulting in frustrating experiences for users. These issues can be attributed to the design of the network card in these devices, which may struggle to maintain consistent performance under certain conditions.</p>

<p>When operating on the 2.4 GHz band, devices with M1 or M2 processors may experience very low transfer rates like 0.5 mbps transfer rate üò±, significantly lower than expected, not all the devices are necessarily affected, but a lot of complaints about this can be found.</p>

<p>I had a connection about 30 times faster when connecting through my macbook pro 2019 than M1 Pro, simple benchmarks using <strong><em>networkQuality</em></strong> command.</p>

<p>**M1 Pro based internet speed<br />
**<em>Downlink: 0.568 Mbps, 31 RPM - Uplink: 1.920 Mbps, 36 RPM<br />
_<br />
**Intel based internet speed<br />
**_Downlink: 14.347 Mbps, 63 RPM - Uplink: 4.175 Mbps, 47 RPM</em></p>

<p>Such results were shocking to me üò±, maybe you are also in shock to the 15 Mbps speed of mine as I don‚Äôt have fiber-internet where I live and still on 4G. ü§£</p>

<p>In the beginning I was suspecting that the VPN/MDM on the M1 Pro to be why I have sudden significant long speed drops, but after doing some research I found some useful findings that helped me retrieve the speed back on M1 Pro device.</p>

<p>The 2.4GHz band offers a better coverage and penetration through walls. However, it is more suspectible to interference from other devices &amp; nearby Wi-Fi networks. This can potentially lead to congestion and speed drops, especially in crowded areas. On the other hand, the 5GHz band is generally faster and is less susceptible to interference. However, it has a shorter range and may have more difficulty penetrating objects.</p>

<p>Connecting to a LAN via a USB dongle (specially with a monitor on the same dongle) is also reported to lead to network performance issues, further complicating the challenges faced by users relying on a stable and high-speed network connection.</p>

<p>While these problems may seem daunting, there are potential workarounds and solutions that users can consider.</p>

<p>1- When troubleshooting network performance issues on devices with M1 or M2 processors, utilizing the ‚ÄúnetworkQuality‚Äù command in safe mode can be a valuable diagnostic tool. By entering safe mode, the system loads only essential components, allowing users to isolate potential software conflicts or third-party applications that may be impacting network performance. Running the ‚ÄúnetworkQuality‚Äù command in this environment can provide a clearer picture of the device‚Äôs network status.</p>

<p>This can help narrow down the potential sources of the issue, whether it‚Äôs related to software conflicts, driver issues, or other factors. By leveraging safe mode and the ‚ÄúnetworkQuality‚Äù command, users can gather crucial data to aid in the debugging process and work towards resolving network performance issues effectively.</p>

<p>2- Switching to the 5 GHz band and disabling the 2.4 GHz network on your router can be an effective strategy for addressing performance issues associated with the 2.4 GHz band. Along with using 40MHz channel width, you can potentially mitigate the impact of congestion and interference, resulting in improved network performance.</p>

<p>This simple change can often make a noticeable difference in the overall reliability and speed of the Wi-Fi network for devices with M1 or M2 processors.</p>

<p>3- If you find yourself using a USB-C dongle for network connectivity using LAN and you are experiencing network issues, it may be worth considering a switch to Wi-Fi as an alternative. By transitioning to Wi-Fi, you can assess the network quality using ‚ÄúnetworkQuality‚Äù, This approach allows you to compare the performance of the USB-C dongle with that of the Wi-Fi connection, potentially identifying any specific issues related to the dongle or the network environment.</p>

<p>4- disable needless network features such as ‚ÄúThunderbolt Bridge‚Äù which is a networking technology that allows for high-speed data transfer between two Mac computers using Thunderbolt ports. Consider disabling this feature and other features that you don‚Äôt use, disabling these is reported to solve the issue.</p>

<p><img src="images/image-1.png" alt="" /></p>

<p>It‚Äôs important to be aware of these potential network performance issues when using devices with M1 or M2 processors. some devices could be not affected by these issues, but I saw a lot of people complaining about the same, I hope this information proves helpful to those navigating network performance issues on M1 and M2 powered devices.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported significant stability issues &amp; network performance issues, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.]]></summary></entry><entry><title type="html">Test Doubles In Swift (Part 1)</title><link href="http://localhost:4000/blog/test-doubles-in-swift-part-1" rel="alternate" type="text/html" title="Test Doubles In Swift (Part 1)" /><published>2023-10-25T00:00:00+03:00</published><updated>2023-10-25T00:00:00+03:00</updated><id>http://localhost:4000/blog/test-doubles-in-swift-part-1</id><content type="html" xml:base="http://localhost:4000/blog/test-doubles-in-swift-part-1"><![CDATA[<p><em>Test doubles name is inspired by ‚Äústunt doubles‚Äù</em> from movies industry.</p>

<p>Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.<br />
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/test_doubles_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>However, when it comes to writing tests, one concept that often perplexes developers is the use of test doubles, test doubles are objects that replace dependencies in our code during testing, enabling us to isolate and verify specific behaviors.</p>

<p>In general, there are various types of test doubles, such as dummies, fakes, stubs, spies, and mocks, understanding when and how to use each type can greatly enhance the effectiveness of our tests and improve the overall quality of our code.</p>

<p>In this blog post series, we will delve into the world of test doubles in Swift, exploring their purpose, distinctions, and practical examples, by the end, you‚Äôll have a solid understanding of how to leverage test doubles to write comprehensive and reliable tests.</p>

<p>A test double is an object that stands in for a real dependency during testing, these dependencies, such as external services, databases, or complex components, can introduce complexity and make testing challenging, test doubles help us isolate the code under test and focus on specific behaviors, making our tests more reliable and efficient.</p>

<p>Test doubles are designed to mimic the behavior of real objects, but they provide simplified or controlled implementations, by replacing real dependencies with test doubles, we can create predictable and controlled environments for testing, without relying on external systems or complex setups.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Test doubles name is inspired by ‚Äústunt doubles‚Äù from movies industry. Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.]]></summary></entry><entry><title type="html">iOS Accessibility</title><link href="http://localhost:4000/blog/ios-accessibility" rel="alternate" type="text/html" title="iOS Accessibility" /><published>2023-08-02T00:00:00+03:00</published><updated>2023-08-02T00:00:00+03:00</updated><id>http://localhost:4000/blog/ios-accessibility-series-part-1</id><content type="html" xml:base="http://localhost:4000/blog/ios-accessibility"><![CDATA[<p>iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines <a href="https://developer.apple.com/accessibility/">provided by Apple</a> to ensure that iOS applications are usable and inclusive for people with disabilities. 
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/a11y_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>As a developer, incorporating accessibility features into your iOS app involves considering the diverse needs of users with visual, auditory, motor, cognitive, and any other impairments. (<em>see table below for a list of most common impairments and disabilities</em>)</p>

<p>Many developers and businesses do not prioritize making their applications accessible for several reasons, first, there is often a lack of awareness about the significance of accessibility and the benefits it brings to a broader user base, second, some developers perceive accessibility implementation as a complex and time-consuming task, leading them to prioritize other features instead, there are also other concerns about additional costs, limited resources, the assumption that their target audience does not include people with disabilities can deter developers from investing in accessibility.</p>

<p>Legal enforcement of accessibility regulations may be weak or inconsistent in some regions, reducing the incentive to comply, moreover, the emphasis on aesthetics over accessibility, inadequate training on accessibility best practices, and resistance to change can further hinder the adoption of accessible design, despite these challenges, raising awareness and promoting the positive impact of accessibility remain crucial in encouraging developers to make their applications inclusive and accessible to all users.</p>

<p>Several countries have enacted laws and regulations to enforce digital accessibility. In the United States, the Americans with Disabilities Act (<a href="https://www.ada.gov/">ADA</a>) and Section 508 of the Rehabilitation Act of 1973 outline accessibility requirements for websites, applications, and other digital content provided by federal agencies and entities receiving federal funding.</p>

<p>The Web Content Accessibility Guidelines (<a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines">WCAG</a>), created by the Web Accessibility Initiative (<a href="https://www.w3.org/WAI/">WAI</a>) of the World Wide Web Consortium (<a href="https://www.w3.org/" title="W3C">W3C</a>), are widely recognized as the global standard for web accessibility, these guidelines provide specific criteria for making digital content accessible to individuals with disabilities.</p>

<p>Failure to comply with accessibility regulations and standards can lead to legal consequences. Companies and organizations that do not provide accessible digital content may face complaints, lawsuits, or enforcement actions by individuals, advocacy groups, or government agencies.</p>

<p>Penalties can include fines, legal fees, court orders to rectify accessibility issues, and reputational damage.</p>

<p>Several high-profile cases have set important precedents for digital accessibility enforcement, resulting in settlements or court rulings against companies that were found to have inaccessible websites or applications, these cases highlight the significance of accessibility and the legal ramifications of non-compliance.</p>

<p>Numerous prominent cases have established crucial precedents for enforcing digital accessibility, leading to settlements or court rulings against companies with inaccessible websites or applications. Notably, Domino‚Äôs Pizza, Netflix, and Target faced legal issues related to the lack of accessible applications for individuals with disabilities. The Ninth Circuit Court of Appeals ruled in favor of a blind plaintiff, stating that the ADA applies to websites and mobile apps. Netflix settled with the National Association of the Deaf, agreeing to make its streaming content accessible with closed captions. Similarly, Target settled with the National Federation of the Blind, committing to enhance its website‚Äôs accessibility.</p>

<p>These cases emphasize the significance of digital accessibility and the legal consequences for non-compliance, prompting businesses to increasingly prioritize accessibility for a more inclusive online environment.</p>

<p>Main types of disabilities and impairments:</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Details</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Visual</td>
      <td>Users with visual impairments may have a partial or complete loss of vision. They rely on assistive technologies like VoiceOver to navigate the app using spoken feedback. Developers must ensure that UI elements have meaningful labels, provide appropriate descriptions, and support dynamic text sizes for better readability. Additionally, maintaining proper contrast and avoiding reliance on color-only cues is crucial to aid users with low vision.<br /><br />When creating an accessible app, developers should consider various visual impairments, such as blindness, low vision, color blindness, glaucoma, cataracts, macular degeneration, nystagmus, diabetic retinopathy, hemianopia, and photophobia.<br /><br />To accommodate users with these conditions, designers should prioritize VoiceOver support, dynamic text sizing, high contrast options, and clear layouts. Regular accessibility testing with assistive technologies ensures the app meets the needs of all users, providing an inclusive experience for those with visual challenges.</td>
    </tr>
    <tr>
      <td>Auditory</td>
      <td>Users with auditory impairments experience hearing loss, which can range from mild to profound. Closed captioning and subtitles are essential for video or audio content to make it accessible to this audience. Developers should also consider providing visual or haptic feedback for important alerts or notifications.</td>
    </tr>
    <tr>
      <td>Motor</td>
      <td>Users with motor impairments may have difficulty with precise touch gestures or using physical buttons. To accommodate these users, developers should ensure that app elements are well-spaced and have an appropriate touch target size. Supporting alternative input methods like switch control and voice commands can also enhance accessibility for users with motor challenges.</td>
    </tr>
    <tr>
      <td>Cognitive</td>
      <td>Users with cognitive impairments may face challenges with memory, attention, and problem-solving. To cater to this audience, developers should strive for simplicity and clarity in the app‚Äôs user interface. Avoiding complex navigation flows and providing clear instructions can make the app more user-friendly for individuals with cognitive disabilities.</td>
    </tr>
    <tr>
      <td>Speech</td>
      <td>Users with speech impairments may have difficulty communicating through traditional speech. Developers can consider integrating communication tools or support for alternative input methods like text-to-speech or augmentative and alternative communication (AAC) into their apps.</td>
    </tr>
    <tr>
      <td>Situational disabilities</td>
      <td>Users in certain situations, such as noisy environments or poor lighting conditions, may benefit from accessibility features like closed captioning or larger text sizes.</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines provided by Apple to ensure that iOS applications are usable and inclusive for people with disabilities.]]></summary></entry><entry><title type="html">SwiftUI Views Are Values, Not Objects: Understanding the Implications</title><link href="http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs" rel="alternate" type="text/html" title="SwiftUI Views Are Values, Not Objects: Understanding the Implications" /><published>2023-05-19T00:00:00+03:00</published><updated>2023-05-19T00:00:00+03:00</updated><id>http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs</id><content type="html" xml:base="http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs"><![CDATA[<p>In SwiftUI, views are fundamentally designed as value types rather than traditional objects. This design approach is a key aspect of SwiftUI‚Äôs declarative programming model and aligns with the Swift language‚Äôs emphasis on value semantics. Understanding this distinction is crucial for developers to avoid common pitfalls that can lead to bugs in their applications. üßê</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/swiftui_inside_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<h2 id="the-nature-of-value-types-in-swiftui">The Nature of Value Types in SwiftUI</h2>

<p>As value types, views in SwiftUI are immutable. When you modify a view, you are actually creating a new instance with the desired changes rather than mutating the existing view. This immutability allows SwiftUI to efficiently track changes and perform targeted updates to the user interface. When state changes, SwiftUI can determine the minimal set of updates required to reflect the new state, enhancing performance and responsiveness.</p>

<h3 id="benefits-of-value-types">Benefits of Value Types</h3>

<ol>
  <li>
    <p><strong>Predictable Behavior</strong>: Since views are copied when needed, developers can expect consistent behavior, making it easier to manage state and data flow.</p>
  </li>
  <li>
    <p><strong>Functional Programming Paradigm</strong>: Value types promote a more functional and declarative style of programming, allowing developers to describe the desired state while SwiftUI manages the view hierarchy.</p>
  </li>
  <li>
    <p><strong>Thread Safety</strong>: Value types are inherently thread-safe, as copies are made when passing views between different execution contexts, reducing the risk of concurrency issues.</p>
  </li>
  <li>
    <p><strong>Built-in Animations</strong>: SwiftUI can automatically animate changes by comparing old and new values of a view, resulting in smooth and visually appealing user interface updates.</p>
  </li>
</ol>

<h2 id="declarative-programming-paradigm">Declarative Programming Paradigm</h2>

<p>The declarative programming paradigm is central to SwiftUI‚Äôs design philosophy. Instead of specifying step-by-step instructions on how to achieve a particular state, developers describe the desired state of the user interface. SwiftUI‚Äôs view tree engine leverages this approach to efficiently manage and update the user interface based on changes in the underlying state.</p>

<h3 id="composable-view-hierarchy">Composable View Hierarchy</h3>

<p>In SwiftUI, you define your user interface using a hierarchy of composable and reusable views. Each view represents a specific part of the interface and is responsible for rendering itself based on the current state. This tree-like structure, known as the view hierarchy, is immutable. When the state changes, SwiftUI re-evaluates the view hierarchy and determines the necessary updates, a process known as the reconciliation algorithm (or diffing algorithm).</p>

<h2 id="the-reconciliation-algorithm">The Reconciliation Algorithm</h2>

<p>The reconciliation algorithm is where SwiftUI‚Äôs view tree engine excels. It efficiently compares the old and new view hierarchies, identifies differences, and applies the necessary updates to the user interface. By only updating the specific parts of the view hierarchy that have changed, SwiftUI minimizes the workload needed to keep the UI in sync with the state, resulting in optimal performance.</p>

<h3 id="comparison-with-uikit">Comparison with UIKit</h3>

<p>In contrast to UIKit, SwiftUI unifies view construction and updates into a single code path. Views are values rather than objects, described by values conforming to the View protocol. The view tree is transient and can be recreated at any time based on the underlying state. This declarative approach eliminates the need for separate event handlers and manual UI updates, as seen in UIKit. SwiftUI‚Äôs view tree engine efficiently reconciles state changes, performs targeted updates, and ensures a reactive UI that stays in sync with the data.</p>

<p>By relying on value semantics, SwiftUI can perform granular updates and avoid unnecessary computations, leading to a highly performant and responsive user interface.</p>

<h2 id="embracing-a-declarative-mindset">Embracing a Declarative Mindset</h2>

<p>By adopting a declarative approach, SwiftUI allows developers to focus on describing the desired end state of the UI rather than worrying about the low-level details of UI manipulation. This shift in mindset leads to more maintainable and expressive code, as developers can easily reason about the UI based on its desired state.</p>

<h3 id="reactive-programming-model">Reactive Programming Model</h3>

<p>Another significant aspect of SwiftUI‚Äôs view tree engine is its ability to efficiently handle updates. As views in SwiftUI are value types, changes in the state result in the creation of new view instances rather than mutating existing ones. SwiftUI employs a mechanism called ‚Äúvalue comparison‚Äù to determine the differences between the old and new views, enabling it to perform targeted updates to the UI.</p>

<p>Additionally, SwiftUI‚Äôs view tree engine embraces a reactive programming model. Views in SwiftUI are not just passive representations of UI elements; they react to changes in the state. This reactive nature ensures that the UI remains synchronized with the underlying data, providing a seamless user experience.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In conclusion, SwiftUI‚Äôs view tree engine revolutionizes UI development by embracing the declarative programming paradigm. By leveraging value types, value comparisons, and reactive programming, SwiftUI provides an efficient and responsive user interface. The ability to describe UI in a declarative manner, combined with targeted updates and optimization techniques, empowers developers to create intuitive and performant user interfaces with ease. Understanding the value semantics of SwiftUI views is essential for building robust applications and avoiding common pitfalls that can arise from overlooking this fundamental aspect of the framework.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[In SwiftUI, views are fundamentally designed as value types rather than traditional objects. This design approach is a key aspect of SwiftUI‚Äôs declarative programming model and aligns with the Swift language‚Äôs emphasis on value semantics. Understanding this distinction is crucial for developers to avoid common pitfalls that can lead to bugs in their applications. üßê]]></summary></entry><entry><title type="html">This is Why I Don‚Äôt Use Git GUI Tools</title><link href="http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools" rel="alternate" type="text/html" title="This is Why I Don‚Äôt Use Git GUI Tools" /><published>2023-01-30T00:00:00+03:00</published><updated>2023-01-30T00:00:00+03:00</updated><id>http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools</id><content type="html" xml:base="http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools"><![CDATA[<p>Almost anyone who uses Xcode can quickly notice that it lacks many essential Git features, which is acceptable in some way since it‚Äôs primarily a development environment rather than a dedicated source control application. 
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/git_cli_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>The features available in Xcode may suffice for personal or small projects, but when working within a larger team, relying solely on the IDE can lead to significant challenges in managing source control effectively.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/image-3.png" alt="" class="centered" />
    <p align="center"><em>Xcode's Source Control</em></p>
  </div>

<p>Many engineers have also observed that file status markers like ‚ÄúA‚Äù (added), ‚ÄúM‚Äù (modified), and ‚ÄúC‚Äù (conflicted) often remain stuck, making it difficult to determine the current state of files at a glance.</p>

<p>Convincing backend engineers to use the terminal is relatively straightforward, as GUI tools do not automatically update the repository‚Äôs trunk on a server daily at 1:30 AM. However, a cron job that utilizes the CLI can easily perform this task. On the other hand, persuading mobile developers may be more challenging since the need for terminal usage is not always immediately apparent.</p>

<h2 id="real-life-examples-of-using-the-git-cli">Real-Life Examples of Using the Git CLI</h2>

<p>Let‚Äôs explore a few real-life examples that highlight the advantages of using the Git CLI over GUI tools. While I could list numerous cases, I will keep this post concise by focusing on a couple of key commands that illustrate the power of the terminal.</p>

<h3 id="1-pr-reverts">1. PR Reverts</h3>

<p>GitHub introduced a feature for reverting pull requests (PRs). If you have an already merged PR and need to revert it before a tight deadline, using GitHub‚Äôs built-in revert feature does not provide details about which commits will be removed. This can lead to accidentally removing unrelated commits.</p>

<p>By contrast, using the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git revert <span class="nt">--no-commit</span> someHash
</code></pre></div></div>

<p>gives you fine-grained control over which commits to remove or retain, allowing for a more precise and safe rollback.</p>

<h3 id="2-submodules">2. Submodules</h3>

<p>When dealing with nested Git repositories (submodules), many GUI tools lack robust support for managing these structures. The Git CLI, however, provides comprehensive commands to add, update, and manage submodules effectively.</p>

<p>I typically keep the terminal open throughout the day; I can‚Äôt imagine working without it. I prefer understanding exactly what each command does rather than relying on button clicks in a GUI. While tools may come and go, the CLI remains the foundation upon which GUI tools are built.</p>

<h2 id="the-benefits-of-using-the-git-cli">The Benefits of Using the Git CLI</h2>

<p>Using the command line allows for the convenient setup of install scripts, build scripts, deployment scripts, and more. In a large team setting, it is often unclear what exactly happens within a GUI-based application. I‚Äôve witnessed colleagues make irreversible mistakes that could only be rectified using the CLI.</p>

<p>I find that I am several times more productive using the command line compared to navigating through menus with a mouse. While Git GUI tools aim to simplify the process, they can inadvertently add complexity, especially in larger projects. I‚Äôve encountered non-standard terminology in some GUI tools that can make understanding Git more difficult.</p>

<p>Xcode comes with a diffing tool, which visualize differences effectively. However, for serious Git users, mastering the command line is crucial. It provides the flexibility, control, and efficiency needed to manage complex projects and collaborate effectively with team members.</p>

<h2 id="common-git-commands">Common Git Commands</h2>

<p>Here is a table of common Git commands that I frequently use, sorted alphabetically, along with their descriptions:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git add</code></td>
      <td>Stages changes in your working directory for the next commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git annotate</code></td>
      <td>Displays the last modification of each line in a file, showing who made the change and when.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git bisect</code></td>
      <td>Uses binary search to find the commit that introduced a bug.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git blame</code></td>
      <td>Shows what revision and author last modified each line of a file.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout</code></td>
      <td>Switches branches or restores working tree files.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git checkout -b</code></td>
      <td>Creates a new branch and switches to it.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git cherry-pick</code></td>
      <td>Applies the changes introduced by an existing commit to your current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clean -fdx</code></td>
      <td>Removes untracked files from your working directory, including ignored files.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clone</code></td>
      <td>Creates a copy of a remote repository on your local machine.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clone --single-branch</code></td>
      <td>Clones only the specified branch from a remote repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git commit</code></td>
      <td>Records changes to the repository with a descriptive message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git commit --amend -m "New commit message."</code></td>
      <td>Modifies the most recent commit with a new commit message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git config</code></td>
      <td>Configures Git settings, such as user information and repository-specific options.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git diff</code></td>
      <td>Shows changes between commits, commit and working tree, etc.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git diff --check</code></td>
      <td>Checks for whitespace errors in the changes.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git fetch</code></td>
      <td>Downloads objects and refs from another repository without merging.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git gc</code></td>
      <td>Cleans up unnecessary files and optimizes the local repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git init</code></td>
      <td>Initializes a new Git repository in the current directory.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log</code></td>
      <td>Displays the commit history for the current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --all</code></td>
      <td>Shows the commit history for all branches.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --oneline</code></td>
      <td>Displays a simplified view of the commit history, showing one line per commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log --summary</code></td>
      <td>Provides a summary of changes made in each commit, including file additions and deletions.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git log -p</code></td>
      <td>Shows the patch (diff) introduced in each commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git merge</code></td>
      <td>Combines changes from different branches into the current branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git pull --rebase</code></td>
      <td>Fetches changes from a remote repository and rebases your current branch on top of them.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push</code></td>
      <td>Uploads local repository content to a remote repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push --set-upstream origin</code></td>
      <td>Sets the default remote branch for the current local branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push -u origin feature_branch_name</code></td>
      <td>Pushes the local branch to the remote repository and sets it to track the remote branch.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git rebase</code></td>
      <td>Reapplies commits on top of another base tip, allowing for a cleaner project history.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git remote -av</code></td>
      <td>Displays the remote repositories associated with the local repository.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git remote add</code></td>
      <td>Adds a new remote repository to your local Git configuration.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git reset --hard</code></td>
      <td>Resets the current branch to the specified state, discarding all changes in the working directory.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git restore</code></td>
      <td>Restores files in the working directory to their last committed state.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git revert</code></td>
      <td>Creates a new commit that undoes the changes made by a previous commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git rm</code></td>
      <td>Removes files from the working directory and stages the removal for the next commit.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git shortlog</code></td>
      <td>Summarizes the commit history, grouped by author.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git show</code></td>
      <td>Displays information about a specific commit, including changes and commit message.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash</code></td>
      <td>Temporarily saves changes in your working directory that are not ready to be committed.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash list</code></td>
      <td>Lists all stashed changes.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git stash pop</code></td>
      <td>Restores the most recently stashed changes and removes them from the stash list.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git status</code></td>
      <td>Displays the state of the working directory and the staging area, showing which files are staged, modified, or untracked.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git tag</code></td>
      <td>Creates a tag reference for a specific commit, often used for marking release points.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git worktree</code></td>
      <td>Manages multiple working trees attached to the same repository, allowing you to work on different branches simultaneously.</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Almost anyone who uses Xcode can quickly notice that it lacks many essential Git features, which is acceptable in some way since it‚Äôs primarily a development environment rather than a dedicated source control application.]]></summary></entry><entry><title type="html">Why I Prefer To Store My Files On A Digital Ocean Space &amp;amp; Not Google Drive Or Dropbox.</title><link href="http://localhost:4000/blog/backup-on-spaces" rel="alternate" type="text/html" title="Why I Prefer To Store My Files On A Digital Ocean Space &amp;amp; Not Google Drive Or Dropbox." /><published>2023-01-21T00:00:00+03:00</published><updated>2023-01-21T00:00:00+03:00</updated><id>http://localhost:4000/blog/backup-on-spaces</id><content type="html" xml:base="http://localhost:4000/blog/backup-on-spaces"><![CDATA[<p>This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.<br />
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/do_space_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>I‚Äôm one of those who experienced the evolution of data storage firsthand, starting with floppy disks to back up HTML pages‚Äîspecifically 3DMax tutorials‚Äîduring my visits to internet caf√©s back in 2003. As technology advanced, I transitioned to using CDs, followed by DVDs, which offered greater storage capacity. I vividly remember the first flash drive my father gifted me as a teenager; it had a mere 128 MB of storage. At that time, such a device was considered a luxury and not affordable for many where I live. Fast forward to today, and we now have SSDs that are over 1000 times larger in capacity and available at significantly lower prices.</p>

<h2 id="cloud-storage">Cloud Storage</h2>
<p>In the realm of cloud storage, common solutions like Google Drive and Dropbox offer plans, such as a 2TB option for $10 monthly. However, I prefer utilizing my own mountable drive integrated with a Content Delivery Network (CDN) for distributing my files efficiently. The best solution I‚Äôve found for storing my work is using DigitalOcean Spaces, which is similar to AWS S3. I can conveniently mount it using a client like Cyberduck on my Mac, or on any device I own, allowing for seamless access and management of my files. This approach not only provides me with greater control over my data but also enhances my ability to share and distribute content effectively.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/image-2.png" alt="" class="centered" />
    <p align="center"><em>Cyberduck, showing a Digital Ocean drive</em></p>
  </div>

<p>Serving static websites on DigitalOcean Spaces is entirely feasible by leveraging its S3-compatible object storage capabilities. To get started, you can upload your HTML, CSS, and JavaScript files directly to a Space, which acts as a repository for your website assets.</p>

<p>Even serving static websites, such as React applications or Jekyll blogs, on DigitalOcean Spaces is entirely feasible by leveraging its S3-compatible object storage capabilities. To get started, you can upload your website files‚Äîwhether they are HTML, CSS, JavaScript. For example, when deploying a React app, you can build your project and upload the contents of the build folder to the Space. Similarly, for a Jekyll blog, you can generate the static site and upload the resulting files to your Space. Although DigitalOcean Spaces doesn‚Äôt natively support custom domains, you can set up a reverse proxy server using NGINX on a DigitalOcean Droplet to map your domain to the Space, allowing your static site to be accessed via your custom URL. This combination of tools enables you to efficiently serve your static websites while taking advantage of the scalability and performance of DigitalOcean‚Äôs infrastructure.</p>

<h2 id="pros--cons">Pros &amp; Cons</h2>

<p>When considering a storage solution, it‚Äôs essential to weigh the advantages and disadvantages to determine the best fit for your needs. DigitalOcean Spaces offers a range of benefits that make it an appealing choice for developers and businesses alike. From cost-effectiveness to enhanced control over your files, the pros of using DigitalOcean Spaces can significantly enhance your workflow and file management capabilities. Below, we outline the key advantages of utilizing DigitalOcean Spaces, as well as some potential drawbacks to keep in mind, ensuring you have a comprehensive understanding of this powerful storage solution.</p>

<h3 id="pros">Pros</h3>

<ul>
  <li>
    <p><strong>Direct Links</strong>: Easily access your files with straightforward URLs, allowing for seamless integration into your applications and workflows.</p>
  </li>
  <li>
    <p><strong>Cost-Effective</strong>: With plans starting as low as $5, DigitalOcean Spaces provides an economical solution for storing and serving your data, making it accessible for individuals and small businesses alike.</p>
  </li>
  <li>
    <p><strong>Bandwidth Savings</strong>: Setting up a Content Delivery Network (CDN) is simple, enabling you to save significant amounts of bandwidth and avoid exceeding transfer caps, which is especially beneficial for high-traffic applications.</p>
  </li>
  <li>
    <p><strong>Granular Control</strong>: You have total control over metadata and content types of your files. For example, you can specify whether an uploaded MP4 file is streamable or downloadable, tailoring the user experience to your needs.</p>
  </li>
  <li>
    <p><strong>Cross-Device Compatibility</strong>: DigitalOcean Spaces can be easily mounted on any device or server, providing flexibility and accessibility regardless of your operating system or hardware.</p>
  </li>
  <li>
    <p><strong>Active File Serving</strong>: Unlike traditional storage solutions, your files are actively served, allowing you to host dynamic content, such as an Angular website, without placing additional load on your server.</p>
  </li>
  <li>
    <p><strong>Custom URL Masking</strong>: You can mask the URL to reflect your own domain, enhancing professionalism and branding when presenting to clients or stakeholders during demos.</p>
  </li>
</ul>

<h3 id="cons">Cons</h3>

<ul>
  <li>
    <p><strong>Technical Knowledge Requirement</strong>: Some users may find that utilizing DigitalOcean Spaces requires a certain level of technical knowledge, which could be a barrier for those unfamiliar with cloud storage solutions.</p>
  </li>
  <li>
    <p><strong>Limited Client Options</strong>: Many desktop clients used to mount such drives are not open source or free, which may limit accessibility for some users.</p>
  </li>
  <li>
    <p><strong>File Sharing Limitations</strong>: Files stored in DigitalOcean Spaces cannot be shared with specific individuals; they are either public or private, which may not suit all collaboration needs.</p>
  </li>
</ul>

<h3 id="security">Security</h3>

<p>DigitalOcean Spaces offers robust security features designed to protect your data effectively. One of the key aspects is access control, which allows users to manage permissions for files stored in Spaces.</p>

<h3 id="use-cases-are-infinite">Use cases are infinite!</h3>

<p>The versatility of DigitalOcean Spaces opens up a myriad of use cases that can significantly enhance productivity and efficiency. For instance, if you‚Äôre involved in web scraping, you can effortlessly download large YouTube channels as a background job on the server. This approach allows you to avoid consuming your internet bandwidth while eliminating the need to keep a device running for extended periods. Instead, the files are stored directly in your DigitalOcean Space, making them readily accessible whenever you need them, without the hassle of local storage management. üßê</p>

<p>Moreover, DigitalOcean Spaces functions similarly to a Network Attached Storage (NAS) solution, providing a centralized location for all your files that can be accessed from multiple devices. This capability is particularly beneficial for teams or individuals who require seamless file sharing and collaboration. Additionally, it can serve as a media center, allowing you to host and stream your multimedia content efficiently. Whether you‚Äôre managing a portfolio of projects, sharing resources with colleagues, or simply organizing personal media, the possibilities are truly endless with DigitalOcean Spaces.</p>

<p>Another innovative use case for DigitalOcean Spaces is as a centralized repository for continuous integration and deployment (CI/CD) pipelines. Software engineers can utilize Spaces to store build artifacts, such as compiled binaries, Docker images, or deployment packages, generated during the CI/CD process. By configuring your CI/CD tools to upload these artifacts directly to DigitalOcean Spaces, you can ensure that all necessary files are easily accessible for deployment across various environments. This setup not only streamlines the deployment process but also provides a reliable and scalable solution for managing versioned artifacts, making it easier to roll back to previous versions if needed. Additionally, you can integrate Spaces with other services, such as monitoring and alerting tools, to keep track of deployment statuses and ensure smooth operations throughout the software development lifecycle.</p>

<p>I‚Äôd love to hear how others are using DigitalOcean Spaces in their projects! Whether you‚Äôre leveraging it for web hosting, data storage, or as part of your CI/CD pipeline, your experiences and tips could be incredibly valuable. Share your thoughts and use cases in the comments below‚Äîlet‚Äôs learn from each other!</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.]]></summary></entry><entry><title type="html">Gentle Introduction To Unit Testing.</title><link href="http://localhost:4000/blog/gentle-introduction-to-unit-testing" rel="alternate" type="text/html" title="Gentle Introduction To Unit Testing." /><published>2023-01-16T00:00:00+03:00</published><updated>2023-01-16T00:00:00+03:00</updated><id>http://localhost:4000/blog/gentle-introduction-to-unit-testing</id><content type="html" xml:base="http://localhost:4000/blog/gentle-introduction-to-unit-testing"><![CDATA[<p>One Monday morning, a new developer, nicknamed Penguin üêß, started their first job as a software engineer. A conversation between Penguin and their team leader, Rex ü¶ñ, unfolded like this:</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/unit_testing_intro_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p><strong>Penguin üêß:</strong> I‚Äôve noticed that we have test cases written for almost all features in our mobile app. Why would we write unit tests if we have a QA team that does testing and quality assurance?</p>

<p><strong>Rex ü¶ñ:</strong> Writing unit tests doesn‚Äôt just ensure that features behave correctly after being developed or shipped; it also ensures that when someone writes new code, it doesn‚Äôt break any existing code. The QA team can‚Äôt test everything all over again when a new feature is introduced. It‚Äôs like an investment: you spend extra time writing unit tests while developing a feature, but you prevent potential bugs from happening in the future.</p>

<p>A CI/CD job running all tests will prevent any developer from merging code that breaks an existing feature, provided that the feature has well-written tests. Tests can also serve as good documentation for anyone intending to read your code.</p>

<p><strong>Penguin üêß:</strong> My first function checks if the application needs a force update by comparing two version strings, like 1.0.2 and 1.1.2. Should my test function iterate through all possible cases, from the minimum value 000.000.000 to the maximum 999.999.999?</p>

<p><strong>Rex ü¶ñ:</strong> No! The idea of test cases is to cover edge cases and unexpected scenarios, like negative numbers in this example, along with a few random usual cases. You might consider writing test functions like:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testWhenCurrentVersionIsLessThanRequiredVersionRequiresUpdate</span>
<span class="n">testWhenRequiredVersionIsEqualToCurrentVersionRequiresNoUpdate</span>
<span class="n">testMaximumMajorNumberComparesCorrectly</span>
<span class="n">testMaximumMinorNumberComparesCorrectly</span>
<span class="n">testMinimumPatchNumberComparesCorrectly</span>
<span class="n">testMinimumMajorNumberComparesCorrectly</span>
<span class="n">testMinimumMinorNumberComparesCorrectly</span>
<span class="n">testMinimumPatchNumberComparesCorrectly</span>
<span class="n">testMinimumNumbersComparesCorrectly</span>
</code></pre></div></div>

<p>‚Ä¶plus some random normal cases.</p>

<p>Remember, the naming convention should show the developer‚Äôs intention, even if the test function name becomes lengthy. Covering all cases will make tests take a long time, possibly minutes in your case. You must avoid that. Unit tests need to be fast, ideally running in 50ms or less.</p>

<h3 id="unit-tests-criteria-first">Unit Tests Criteria ‚ÄúF.I.R.S.T‚Äù:</h3>

<p>The F.I.R.S.T criteria for unit tests is a set of principles designed to promote effective testing practices. It stands for Fast (tests should run quickly), Independent (tests should be self-contained), Repeatable (tests should yield consistent results), Self-Validating (tests should automatically determine pass or fail), and Timely (tests should be written alongside production code). These principles help ensure robust unit tests that improve code quality and simplify maintenance.</p>

<ul>
  <li><strong>Fast:</strong> We can run dozens of them in a second, if not more.</li>
  <li><strong>Isolated:</strong> Should not depend on each other or any external state.</li>
  <li><strong>Repeatable:</strong> They should always give the same result when they are run, like a pure function.</li>
  <li><strong>Self-Verifying:</strong> The test must unambiguously say whether it passed or failed, with no room for interpretation.</li>
  <li><strong>Timely:</strong> They should be written before or alongside the production code that you are testing.</li>
</ul>

<p><strong>Penguin üêß:</strong> But we must have high test coverage, like 100% coverage to cover all cases, right?</p>

<p><strong>Rex ü¶ñ:</strong> Test coverage refers to the percentage of code logic that is tested, not the ‚Äúpossible values coverage.‚Äù By the way, test coverage is a flawed metric; it only means we have test functions that call our code. It doesn‚Äôt guarantee that the test functions are good.</p>

<p><strong>Penguin üêß:</strong> Got it. Are there any other benefits to having unit tests?</p>

<p><strong>Rex ü¶ñ:</strong> Testing reduces maintenance costs and the number of bugs. There are also other costs to consider, like customer impact. The longer an issue goes undiscovered, the more expensive it is, which can result in negative reviews, lost trust, and, of course, lost revenue!</p>

<p><strong>Penguin üêß:</strong> Why follow TDD (Test Driven Development) methodology? Why write the tests before writing the feature itself?</p>

<p><strong>Rex ü¶ñ:</strong> There are many development methodologies, like TDD, ATDD, DDD, BDD‚Ä¶ These are lengthy topics, and I encourage you to read about them. While TDD is a popular approach that includes the RGR (Red, Green, Refactor) lifecycle, it‚Äôs important to note that it‚Äôs not always the best choice for every situation. Consider the context of your project when choosing a methodology.</p>

<p><strong>Penguin üêß:</strong> That‚Äôs cool! How can I make sure my code is testable, and what makes it not testable?</p>

<p><strong>Rex ü¶ñ:</strong> You may consider architectural patterns that make code more modular and easier to test, like MVVM, VIPER, VIP, or even Functional Reactive Programming (FRP). Dependency injection, coordinator patterns, and pure functions also help make your code more testable.</p>

<p><strong>Penguin üêß:</strong> So I always need to mock stuff when testing, right?</p>

<p><strong>Rex ü¶ñ:</strong> There are various types of test doubles out there, not just mocks. You‚Äôve got fakes, stubs, spies, and dummies too! It might feel a bit overwhelming at first, but I encourage you to look into each one and learn when to use them effectively. Understanding their differences will really help you in your testing journey!</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/test_doubles.jpg" alt="" class="centered" />
    <p align="center"><em>(test doubles) term is derived from (stunt doubles)</em></p>
  </div>

<p><strong>Penguin üêß:</strong> What other tips do you have?</p>

<p><strong>Rex ü¶ñ:</strong> Here are a few:</p>

<ul>
  <li>In network testing for mobile apps, no HTTP request should be made. You test the networking feature itself.</li>
  <li>Tests run alphabetically, so you shouldn‚Äôt rename your tests to change their order of execution. Remember, tests should be independent; changing the order intentionally will break this criterion.</li>
  <li>Xcode provides performance tests that compare previous runs. You can also change the baseline, and it gives nicely formatted test coverage markers.</li>
  <li>Writing no tests is better than writing flaky tests!</li>
</ul>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[One Monday morning, a new developer, nicknamed Penguin üêß, started their first job as a software engineer. A conversation between Penguin and their team leader, Rex ü¶ñ, unfolded like this:]]></summary></entry><entry><title type="html">Refresher: Solving Few Problems</title><link href="http://localhost:4000/blog/problem_solving_swift_1_4" rel="alternate" type="text/html" title="Refresher: Solving Few Problems" /><published>2022-11-16T00:00:00+03:00</published><updated>2022-11-16T00:00:00+03:00</updated><id>http://localhost:4000/blog/problem_solving_swift_1_4</id><content type="html" xml:base="http://localhost:4000/blog/problem_solving_swift_1_4"><![CDATA[<p>After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.</p>

<!--more-->
<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/algo_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/grokking.jpeg" alt="" class="centered" />
    <p align="center"><em>Grokking Algorithms book</em></p>
  </div>

<p>Understanding data structures is essential before diving into problem-solving. While I won‚Äôt go into detailed explanations here, I recommend attempting to solve the problems on your own without immediately referring to the solutions.</p>

<h2 id="problem-1">Problem 1</h2>
<p><strong>Return a pair of two distinct values (if any) that sum up to a target number, from a nonempty array that contains distinct integers.</strong></p>

<p>Here are different solutions with varying time complexities:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">targetSum</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n*log(n))</span>
<span class="kd">func</span> <span class="nf">solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">sorted</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">leftPointer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">rightPointer</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">leftPointer</span> <span class="o">&lt;</span> <span class="n">rightPointer</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">leftMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">leftPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">rightMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">rightPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">currentSum</span> <span class="o">=</span> <span class="n">leftMost</span> <span class="o">+</span> <span class="n">rightMost</span>
        <span class="k">if</span> <span class="n">currentSum</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">leftMost</span><span class="p">,</span> <span class="n">rightMost</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&lt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">leftPointer</span> <span class="o">=</span> <span class="n">leftPointer</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&gt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">rightPointer</span> <span class="o">=</span> <span class="n">rightPointer</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">numberDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">mayMatch</span> <span class="o">=</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">number</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">exists</span> <span class="o">=</span> <span class="n">numberDictionary</span><span class="p">[</span><span class="n">mayMatch</span><span class="p">],</span> <span class="n">exists</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">mayMatch</span><span class="p">,</span> <span class="n">number</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">numberDictionary</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="analysis">Analysis:</h3>

<p>Each solution has its trade-offs in terms of time complexity. Running a simple benchmark on an array with 100,000 values yields the following results:</p>

<ul>
  <li>solution1: 31.88 s.</li>
  <li>solution2: 18.41 s.</li>
  <li>solution3: 0.38 s.</li>
  <li>solution4: 0.20 s. üèÜ</li>
</ul>

<p>As you can see, solution 4 is the most efficient in this case, with a time complexity of O(n).</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/prob_001_graph-1024x687.png" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>The functions used for benchmarking are:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">operation</span><span class="p">:()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Time elapsed for </span><span class="se">\(</span><span class="n">title</span><span class="se">)</span><span class="s">: </span><span class="se">\(</span><span class="n">timeElapsed</span><span class="se">)</span><span class="s"> s."</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">timeElapsedInSecondsWhenRunningCode</span><span class="p">(</span><span class="nv">operation</span><span class="p">:</span> <span class="p">()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">timeElapsed</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="problem-2">Problem 2</h2>
<p>Given two non-empty arrays, write a function that determines if the second array is a subsequence of the first array.</p>

<blockquote>
  <p>Keep in mind that a subsequence is not the same as a subarray.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">arrIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">arrIdx</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="n">seqIdx</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">arrIdx</span><span class="p">]</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="n">arrIdx</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>

<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="test-results">Test Results:</h3>

<p>Using these arrays:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArray1</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900005</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900005</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">let</span> <span class="nv">myArray2</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>The results were:</p>
<ul>
  <li>Time elapsed for solution1: 28.102 s.</li>
  <li>Time elapsed for solution2: 14.446 s. üèÜ</li>
</ul>

<p>Solution 2 is more efficient, even though both solutions have the same time complexity. Can you guess why? ü§ì</p>

<h2 id="problem-3">Problem 3</h2>
<p>Write a function that takes in a non-empty array of integers sorted in ascending order and returns a new array with the squares of the original integers, also sorted in ascending order.</p>

<p>Here are four solutions along with explanations:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad solution, appending is expensive; it's better to initialize an array with the required length.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span> <span class="o">*</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(nlog(n)) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">value</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Using higher-order functions for high performance.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">*</span> <span class="nv">$0</span> <span class="p">}</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(n) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">var</span> <span class="nv">smallerValueIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">largerValueIdx</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="k">in</span> <span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">smallerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">smallerValueIdx</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">largerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">largerValueIdx</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">abs</span><span class="p">(</span><span class="n">smallerValue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">abs</span><span class="p">(</span><span class="n">largerValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">smallerValue</span> <span class="o">*</span> <span class="n">smallerValue</span>
            <span class="n">smallerValueIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">largerValue</span> <span class="o">*</span> <span class="n">largerValue</span>
            <span class="n">largerValueIdx</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="benchmarking">Benchmarking:</h3>

<p>For the input:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArraySortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">5000000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">5000000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>Time elapsed for solution1: 6.786 s.</li>
  <li>Time elapsed for solution2: 6.275 s.</li>
  <li>Time elapsed for solution3: 5.106 s.</li>
  <li>Time elapsed for solution4: 1.637 s. ü•á</li>
</ul>

<h2 id="problem-4">Problem 4</h2>

<p>Given a 2D array of matches <code class="language-plaintext highlighter-rouge">[host, guest]</code> and an array of results where 1 means the host team won, determine the player with the most wins.</p>

<p>Example:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Keymer"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">]</span>
<span class="p">]</span>
<span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="k">let</span> <span class="nv">HOST_TEAM_WON</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">WIN_POINTS</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1">// O(n) time | O(k) space , where n: are matches and k is the number of teams</span>
<span class="kd">func</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">_</span> <span class="nv">matches</span><span class="p">:</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]],</span> <span class="n">_</span> <span class="nv">results</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">bestPlayer</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">scores</span> <span class="o">=</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]()</span>
    <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">match</span><span class="p">)</span> <span class="k">in</span> <span class="n">matches</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="p">(</span><span class="nv">host</span><span class="p">,</span> <span class="nv">guest</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">let</span> <span class="nv">winning</span> <span class="o">=</span> <span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="kt">HOST_TEAM_WON</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="n">host</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="n">guest</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
        <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="kt">WIN_POINTS</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span><span class="o">!</span> <span class="p">{</span>
            <span class="n">bestPlayer</span> <span class="o">=</span> <span class="n">winning</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">bestPlayer</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">generateData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">([[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">,</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">players1</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Aronian"</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">players2</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Keymer"</span><span class="p">,</span> <span class="s">"Vitiugov"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">()</span>
    <span class="k">var</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">let</span> <span class="nv">possibleResults</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="mi">10</span> <span class="p">{</span>
        <span class="n">matches</span><span class="o">.</span><span class="nf">append</span><span class="p">([</span><span class="n">players1</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span> <span class="n">players2</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">])</span>
        <span class="n">results</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">possibleResults</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
    <span class="nf">return</span> <span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">problem_04_solutions</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="nf">generateData</span><span class="p">()</span>
    <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="s">"solution1"</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">winner</span> <span class="o">=</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">winner</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><summary type="html"><![CDATA[After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.]]></summary></entry><entry><title type="html">iOS/Android Developer Security Basics</title><link href="http://localhost:4000/blog/ios-android-developer-security-basics" rel="alternate" type="text/html" title="iOS/Android Developer Security Basics" /><published>2022-03-13T00:00:00+03:00</published><updated>2022-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/ios-android-developer-security-basics</id><content type="html" xml:base="http://localhost:4000/blog/ios-android-developer-security-basics"><![CDATA[<p>Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/security_basics_full.jpg" alt="Mobile Security Basics" class="centered" />
    <p align="center"><em>JomJom!</em></p>
  </div>

<h2 id="the-importance-of-security-in-mobile-development">The Importance of Security in Mobile Development</h2>

<p>ü•∏: What are the risks of not having good security precautions? Why do we spend so much on security?<br />
üíÄ: There are over 500 reported incidents of data breaches each year, with each incident costing an average of 3.5M to 5.0M USD. Remote work has increased these costs by 15%, as attackers find more opportunities when targets are spread across different locations.</p>

<p>ü•∏: When people talk about security, the server is often seen as the main line of defense. Why should mobile developers be concerned if the server is secure?<br />
üíÄ: Even if the server is secure, mobile apps still need to implement security best practices. Mobile apps have direct access to sensitive data like location, contacts, and files. A compromised app could leak this information, posing significant risks. Unlike browsers, mobile apps run locally on devices without the same protections, making vulnerabilities in app code a target for attackers.</p>

<h2 id="cross-platform-security-concerns">Cross-Platform Security Concerns</h2>

<p>ü•∏: But you‚Äôre an iOS developer, and I develop for Android. Are your tips applicable to Android too?<br />
üíÄ: Yes, many security precautions apply to both platforms, but it‚Äôs important to note that iOS and Android are based on different operating systems. iOS is based on Darwin (BSD), which is Unix-like, while Android is Linux-based. However, both platforms share common security concerns.</p>

<p>ü•∏: Why can‚Äôt we just rely on HTTPS for security?<br />
üíÄ: HTTPS protects data in transit between the client and server, but only if the TLS certificate is valid and uncompromised. It‚Äôs just one layer of security; other aspects, like secure storage and code integrity, also need attention.</p>

<h2 id="mobile-security-weak-points">Mobile Security Weak Points</h2>

<p>ü•∏: What are the weak points in mobile security?<br />
üíÄ: Network, disk, and USB ports are common attack vectors. Understanding these entry points is key to securing your app.</p>

<h2 id="key-security-terminology">Key Security Terminology</h2>
<p>üíÄ: Here are some essential terms you should know:</p>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Basic Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Authentication</td>
      <td>Establishing a user‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Authorization</td>
      <td>Granting a user access to a resource. See <a href="https://www.sailpoint.com/identity-library/difference-between-authentication-and-authorization/">this article</a> for more.</td>
    </tr>
    <tr>
      <td>Cryptography</td>
      <td>The study of encryption and decryption techniques.</td>
    </tr>
    <tr>
      <td>Encryption</td>
      <td>Securing digital data using mathematical techniques and a key.</td>
    </tr>
    <tr>
      <td>Decryption</td>
      <td>Converting encrypted data back to its original form.</td>
    </tr>
    <tr>
      <td>Hashing</td>
      <td>Mapping data of arbitrary size to fixed-size values, often used for fingerprinting.</td>
    </tr>
    <tr>
      <td>Forensics</td>
      <td>The branch of digital science related to evidence found in computers and storage media.</td>
    </tr>
    <tr>
      <td>Sniffing</td>
      <td>Monitoring and capturing data packets in a network.</td>
    </tr>
    <tr>
      <td>HTTPS</td>
      <td>Hypertext Transfer Protocol Secure, a secure web protocol.</td>
    </tr>
    <tr>
      <td>SSL</td>
      <td>Secure Sockets Layer, a cryptographic protocol.</td>
    </tr>
    <tr>
      <td>TLS</td>
      <td>Transport Layer Security, the successor to SSL.</td>
    </tr>
    <tr>
      <td>IP Spoofing</td>
      <td>Creating IP packets with a modified source address to hide the sender‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Reverse Engineering</td>
      <td>Deconstructing software or devices to extract design information.</td>
    </tr>
    <tr>
      <td>MITM</td>
      <td>Man-in-the-Middle, an attack where data between two parties is intercepted and potentially altered.</td>
    </tr>
    <tr>
      <td>XSS</td>
      <td>Cross-Site Scripting, an injection attack on web applications.</td>
    </tr>
    <tr>
      <td>SQL Injection</td>
      <td>An attack that exploits vulnerabilities in SQL queries. <a href="https://www.w3schools.com/sql/sql_injection.asp">Read more here.</a></td>
    </tr>
    <tr>
      <td>OWASP</td>
      <td>Open Web Application Security Project, a nonprofit foundation focused on improving software security.</td>
    </tr>
    <tr>
      <td>MASVS</td>
      <td>Mobile Application Security Verification Standard, part of the OWASP Mobile Security Testing Guide.</td>
    </tr>
    <tr>
      <td>Mach-O binary</td>
      <td>The binary format used by iOS and macOS applications.</td>
    </tr>
  </tbody>
</table>

<h2 id="jailbreaking-and-security-risks">Jailbreaking and Security Risks</h2>

<p>ü•∏: Why are jailbroken devices a threat to app security?<br />
üíÄ: Jailbreaking allows users to bypass built-in security features, exposing the app to potential attacks. It‚Äôs best practice to prevent jailbroken devices from running your app. Check out my <a href="https://github.com/deya-eldeen/x04_checker">x04_checker</a> repo for an iOS library that helps detect jailbroken devices.</p>

<h2 id="debugging-and-logging-concerns">Debugging and Logging Concerns</h2>

<p>ü•∏: They say debugging and print statements can be a security risk. Is that true?<br />
üíÄ: Yes, print statements are only active in development builds, but they can still send data to the USB interface. Also, <code class="language-plaintext highlighter-rouge">NSLog</code> statements remain in distribution builds, and users can access logs via the macOS Console app. Be careful not to log sensitive data or leave traces of code symbols.</p>

<h2 id="certificate-pinning-and-static-strings">Certificate Pinning and Static Strings</h2>

<p>ü•∏: What about certificate pinning?<br />
üíÄ: Certificate pinning prevents attackers from using an invalid certificate to intercept data. Implementing dynamic certificate updates within the app is crucial to prevent tampering.</p>

<p>ü•∏: And what about sensitive static strings?<br />
üíÄ: Never store sensitive strings in plist or other asset files. They are easily accessible and can expose your app to risks.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/facebookstring-1024x695.jpeg" alt="Strings Tool" class="centered" />
    <p align="center"><em>This is usage of the `strings` tool, on macos, scanning some APK.</em></p>
  </div>

<h2 id="the-risks-of-third-party-libraries">The Risks of Third-Party Libraries</h2>

<p>ü•∏: Why are third-party libraries risky for sensitive apps?<br />
üíÄ: While libraries are generally fine, they should be audited regularly. For sensitive apps, like banking, it‚Äôs better to minimize their use to avoid potential vulnerabilities.</p>

<h2 id="url-scheme-attacks-and-universal-links">URL-Scheme Attacks and Universal Links</h2>

<p>ü•∏: What about URL-scheme attacks?<br />
üíÄ: When you define a URL scheme, your app can be launched by any link matching that scheme. However, other apps can register the same scheme, posing a risk. Universal links are a safer alternative.</p>

<h2 id="final-thoughts-on-mobile-security">Final Thoughts on Mobile Security</h2>

<p>üíÄ: Achieving 100% security is impossible, but you can make attacking or cracking your app much more difficult. Remember, security is about increasing the cost and complexity of an attack relative to the value of the data.</p>

<p>Some additional tips:</p>

<ul>
  <li>Avoid Objective-C if possible; it‚Äôs easy to reverse engineer.</li>
  <li>Don‚Äôt log sensitive data.</li>
  <li>Disable keyboard caching for third-party keyboards.</li>
  <li>Store user credentials securely in the keystore or keychain.</li>
  <li>Implement App Transport Security and certificate pinning.</li>
  <li>Ensure data on disk and across the network is secure.</li>
  <li>Protect your application logic from reverse engineering.</li>
  <li>Avoid sharing sensitive data with third parties.</li>
  <li>Hide jailbreak detection deep within your app, not in the app delegate.</li>
</ul>

<p>Security isn‚Äôt just about making data impossible to access; it‚Äôs about balancing the cost and effort of data retrieval against its importance.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><summary type="html"><![CDATA[Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.]]></summary></entry><entry><title type="html">Understanding GPS Hardware Basics for Mobile Developers</title><link href="http://localhost:4000/blog/gps-hardware-basics-for-software-engineers" rel="alternate" type="text/html" title="Understanding GPS Hardware Basics for Mobile Developers" /><published>2022-03-10T00:00:00+03:00</published><updated>2022-03-10T00:00:00+03:00</updated><id>http://localhost:4000/blog/gps-hardware-basics-for-software-engineers</id><content type="html" xml:base="http://localhost:4000/blog/gps-hardware-basics-for-software-engineers"><![CDATA[<p>Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/gps_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>This article is structured as a conversation between an <strong>iOS developer (Alex üë®üèª‚Äçüíª)</strong> and an <strong>electrical engineer (Sarah üë©üèº‚Äçüíª)</strong>. Through their dialogue, we‚Äôll explore the fundamentals of GPS technology.</p>

<h2 id="the-basics-of-gps">The Basics of GPS</h2>

<p>üë®üèª‚Äçüíª: So what does GPS stand for?<br />
üë©üèº‚Äçüíª: It stands for <strong>Global Positioning System</strong>.</p>

<p>üë®üèª‚Äçüíª: Who created it, and for what purpose?<br />
üë©üèº‚Äçüíª: The GPS project was launched by the United States in 1973 to overcome the limitations of earlier navigation systems.</p>

<p>üë®üèª‚Äçüíª: I know GPS works without an internet connection, but do I need cellular service to use GPS?<br />
üë©üèº‚Äçüíª: No, you don‚Äôt need cellular service either.</p>

<h2 id="how-gps-works-without-internet-or-cellular-service">How GPS Works Without Internet or Cellular Service</h2>

<p>üë®üèª‚Äçüíª: How does GPS work without internet or cellular service?<br />
üë©üèº‚Äçüíª: Your device receives signals from satellites. There are about 24 operational satellites in six orbital planes.</p>

<p>üë®üèª‚Äçüíª: Does my mobile need to connect to all of these satellites?<br />
üë©üèº‚Äçüíª: No, when stationary, your device only needs to receive signals from at least three satellites. When moving, it needs signals from four satellites for accurate positioning.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/ConstellationGPS.gif" alt="GPS Satellites" class="centered" />
    <p align="center"><em>GPS Satellites in Orbit (Source: Wikipedia)</em></p>
  </div>

<p>üë®üèª‚Äçüíª: How does the GPS system identify me and send data back?<br />
üë©üèº‚Äçüíª: The satellites don‚Äôt identify you. <strong>They continuously emit synchronized pulses everywhere.</strong> Your device simply receives these signals.</p>

<h2 id="calculating-your-position">Calculating Your Position</h2>

<p>üë®üèª‚Äçüíª: How does my mobile determine my latitude, longitude, and altitude?<br />
üë©üèº‚Äçüíª: Your device compares the time it receives signals from each satellite. By calculating the time differences, it can determine your position on Earth. The satellites have highly accurate atomic clocks, which make these calculations possible.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/GPS-satellite-position-calculations-3.png" alt="GPS Position Calculation" class="centered" />
    <p align="center"><em>Calculating Position Using GPS Satellites</em></p>
  </div>

<p>üë®üèª‚Äçüíª: If the service is free and I don‚Äôt have a subscription for GPS, how is it funded?<br />
üë©üèº‚Äçüíª: GPS is one of several <strong>Global Navigation Satellite Systems (GNSS)</strong>. Others include GLONASS, BeiDou, and Galileo. These systems are funded by governments and sometimes private entities. Commercial GPS receivers might have restrictions, like not functioning at high speeds.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/Beidou_Navigation_Satellite_System_2012.png" alt="BeiDou Navigation System" class="centered" />
    <p align="center"><em>BeiDou GNSS, which doesn't have full Earth coverage</em></p>
  </div>

<h2 id="accuracy-and-limitations-of-gps">Accuracy and Limitations of GPS</h2>

<p>üë®üèª‚Äçüíª: What is the typical error margin of GPS?<br />
üë©üèº‚Äçüíª: The error margin varies but is typically between 15 to 50 meters. Some systems use additional inertial sensors to provide more accurate positioning.</p>

<p>üë®üèª‚Äçüíª: What is the minimum detectable distance?<br />
üë©üèº‚Äçüíª: Theoretically, the resolution is as fine as one inch, but in practice, it‚Äôs about three meters.</p>

<h2 id="challenges-of-using-gps-indoors">Challenges of Using GPS Indoors</h2>

<p>üë®üèª‚Äçüíª: I tried using GPS inside a large hospital, but the readings were inaccurate.<br />
üë©üèº‚Äçüíª: GPS signals do not work well indoors because they require a clear line of sight to the satellites.</p>

<p>üë®üèª‚Äçüíª: But I still got some readings on my maps app indoors.<br />
üë©üèº‚Äçüíª: That‚Äôs likely the last known location. Some devices, like those from Huawei, augment GPS data with accelerometer and gyroscope data to simulate basic indoor navigation, but it‚Äôs not reliable.</p>

<p>üë®üèª‚Äçüíª: What technologies are used for indoor navigation systems?<br />
üë©üèº‚Äçüíª: Indoor navigation typically uses beacons, Bluetooth, and other technologies. You might want to look into Apple AirTags for more information.</p>

<h2 id="using-sensors-for-positioning">Using Sensors for Positioning</h2>

<p>üë®üèª‚Äçüíª: Why can‚Äôt we just use the accelerometer and gyroscope in our phones to calculate position?<br />
üë©üèº‚Äçüíª: While you can derive some positional data from these sensors, they are prone to significant errors over time due to factors like drift and gimbal lock. Accelerometers and gyroscopes alone can‚Äôt provide absolute positioning, and their errors accumulate quickly.</p>

<p>üë®üèª‚Äçüíª: That was a lot of information. Thanks for the explanation.<br />
üë©üèº‚Äçüíª: You‚Äôre welcome! See you soon.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Understanding how GPS works can help mobile developers better utilize location services in their apps. Whether you‚Äôre developing a navigation app or just curious about the technology behind the blue dot on your map, a basic knowledge of GPS hardware can enhance your approach to location-based features.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><summary type="html"><![CDATA[Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.]]></summary></entry></feed>