<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-09-02T02:17:31+03:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Swift By Deya</title><subtitle>Swifty Insights: Dive into the world of Swift and iOS development with our weekly articles.</subtitle><entry><title type="html">Significant Network Problems on macbooks with M1/ M2 Chips With Proposed Solutions</title><link href="http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions" rel="alternate" type="text/html" title="Significant Network Problems on macbooks with M1/ M2 Chips With Proposed Solutions" /><published>2024-02-02T00:00:00+03:00</published><updated>2024-02-02T00:00:00+03:00</updated><id>http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions</id><content type="html" xml:base="http://localhost:4000/blog/significant-network-problems-on-macbooks-with-m1-m2-chips-with-proposed-solutions"><![CDATA[<p>As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported <strong><em>significant stability issues &amp; network performance issues</em></strong>, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/network_fix_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>One common complaint is sudden long drops in transfer rates, often resulting in frustrating experiences for users. These issues can be attributed to the design of the network card in these devices, which may struggle to maintain consistent performance under certain conditions.</p>

<p>When operating on the 2.4 GHz band, devices with M1 or M2 processors may experience very low transfer rates like 0.5 mbps transfer rate üò±, significantly lower than expected, not all the devices are necessarily affected, but a lot of complaints about this can be found.</p>

<p>I had a connection about 30 times faster when connecting through my macbook pro 2019 than M1 Pro, simple benchmarks using <strong><em>networkQuality</em></strong> command.</p>

<p>**M1 Pro based internet speed<br />
**<em>Downlink: 0.568 Mbps, 31 RPM - Uplink: 1.920 Mbps, 36 RPM<br />
_<br />
**Intel based internet speed<br />
**_Downlink: 14.347 Mbps, 63 RPM - Uplink: 4.175 Mbps, 47 RPM</em></p>

<p>Such results were shocking to me üò±, maybe you are also in shock to the 15 Mbps speed of mine as I don‚Äôt have fiber-internet where I live and still on 4G. ü§£</p>

<p>In the beginning I was suspecting that the VPN/MDM on the M1 Pro to be why I have sudden significant long speed drops, but after doing some research I found some useful findings that helped me retrieve the speed back on M1 Pro device.</p>

<p>The 2.4GHz band offers a better coverage and penetration through walls. However, it is more suspectible to interference from other devices &amp; nearby Wi-Fi networks. This can potentially lead to congestion and speed drops, especially in crowded areas. On the other hand, the 5GHz band is generally faster and is less susceptible to interference. However, it has a shorter range and may have more difficulty penetrating objects.</p>

<p>Connecting to a LAN via a USB dongle (specially with a monitor on the same dongle) is also reported to lead to network performance issues, further complicating the challenges faced by users relying on a stable and high-speed network connection.</p>

<p>While these problems may seem daunting, there are potential workarounds and solutions that users can consider.</p>

<p>1- When troubleshooting network performance issues on devices with M1 or M2 processors, utilizing the ‚ÄúnetworkQuality‚Äù command in safe mode can be a valuable diagnostic tool. By entering safe mode, the system loads only essential components, allowing users to isolate potential software conflicts or third-party applications that may be impacting network performance. Running the ‚ÄúnetworkQuality‚Äù command in this environment can provide a clearer picture of the device‚Äôs network status.</p>

<p>This can help narrow down the potential sources of the issue, whether it‚Äôs related to software conflicts, driver issues, or other factors. By leveraging safe mode and the ‚ÄúnetworkQuality‚Äù command, users can gather crucial data to aid in the debugging process and work towards resolving network performance issues effectively.</p>

<p>2- Switching to the 5 GHz band and disabling the 2.4 GHz network on your router can be an effective strategy for addressing performance issues associated with the 2.4 GHz band. Along with using 40MHz channel width, you can potentially mitigate the impact of congestion and interference, resulting in improved network performance.</p>

<p>This simple change can often make a noticeable difference in the overall reliability and speed of the Wi-Fi network for devices with M1 or M2 processors.</p>

<p>3- If you find yourself using a USB-C dongle for network connectivity using LAN and you are experiencing network issues, it may be worth considering a switch to Wi-Fi as an alternative. By transitioning to Wi-Fi, you can assess the network quality using ‚ÄúnetworkQuality‚Äù, This approach allows you to compare the performance of the USB-C dongle with that of the Wi-Fi connection, potentially identifying any specific issues related to the dongle or the network environment.</p>

<p>4- disable needless network features such as ‚ÄúThunderbolt Bridge‚Äù which is a networking technology that allows for high-speed data transfer between two Mac computers using Thunderbolt ports. Consider disabling this feature and other features that you don‚Äôt use, disabling these is reported to solve the issue.</p>

<p><img src="images/image-1.png" alt="" /></p>

<p>It‚Äôs important to be aware of these potential network performance issues when using devices with M1 or M2 processors. some devices could be not affected by these issues, but I saw a lot of people complaining about the same, I hope this information proves helpful to those navigating network performance issues on M1 and M2 powered devices.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[As Apple‚Äôs M1/M2 processors got significant attention lately, different users reported significant stability issues &amp; network performance issues, specially when using Wi-Fi on the 2.4 GHz band or connecting via a USB dongle for LAN.]]></summary></entry><entry><title type="html">Test Doubles In Swift (Part 1)</title><link href="http://localhost:4000/blog/test-doubles-in-swift-part-1" rel="alternate" type="text/html" title="Test Doubles In Swift (Part 1)" /><published>2023-10-25T00:00:00+03:00</published><updated>2023-10-25T00:00:00+03:00</updated><id>http://localhost:4000/blog/test-doubles-in-swift-part-1</id><content type="html" xml:base="http://localhost:4000/blog/test-doubles-in-swift-part-1"><![CDATA[<p><em>Test doubles name is inspired by ‚Äústunt doubles‚Äù</em> from movies industry.</p>

<p>Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.<br />
<!--more--></p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/test_doubles_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>However, when it comes to writing tests, one concept that often perplexes developers is the use of test doubles, test doubles are objects that replace dependencies in our code during testing, enabling us to isolate and verify specific behaviors.</p>

<p>In general, there are various types of test doubles, such as dummies, fakes, stubs, spies, and mocks, understanding when and how to use each type can greatly enhance the effectiveness of our tests and improve the overall quality of our code.</p>

<p>In this blog post series, we will delve into the world of test doubles in Swift, exploring their purpose, distinctions, and practical examples, by the end, you‚Äôll have a solid understanding of how to leverage test doubles to write comprehensive and reliable tests.</p>

<p>A test double is an object that stands in for a real dependency during testing, these dependencies, such as external services, databases, or complex components, can introduce complexity and make testing challenging, test doubles help us isolate the code under test and focus on specific behaviors, making our tests more reliable and efficient.</p>

<p>Test doubles are designed to mimic the behavior of real objects, but they provide simplified or controlled implementations, by replacing real dependencies with test doubles, we can create predictable and controlled environments for testing, without relying on external systems or complex setups.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Test doubles name is inspired by ‚Äústunt doubles‚Äù from movies industry. Testing is an essential part of software development, allowing us to ensure the correctness and reliability of our code.]]></summary></entry><entry><title type="html">iOS Accessibility Series (Part 1)</title><link href="http://localhost:4000/blog/ios-accessibility-series-part-1" rel="alternate" type="text/html" title="iOS Accessibility Series (Part 1)" /><published>2023-08-02T00:00:00+03:00</published><updated>2023-08-02T00:00:00+03:00</updated><id>http://localhost:4000/blog/ios-accessibility-series-part-1</id><content type="html" xml:base="http://localhost:4000/blog/ios-accessibility-series-part-1"><![CDATA[<p>iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines <a href="https://developer.apple.com/accessibility/">provided by Apple</a> to ensure that iOS applications are usable and inclusive for people with disabilities. 
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/a11y_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>As a developer, incorporating accessibility features into your iOS app involves considering the diverse needs of users with visual, auditory, motor, cognitive, and any other impairments. (<em>see table below for a list of most common impairments and disabilities</em>)</p>

<p>Many developers and businesses do not prioritize making their applications accessible for several reasons, first, there is often a lack of awareness about the significance of accessibility and the benefits it brings to a broader user base, second, some developers perceive accessibility implementation as a complex and time-consuming task, leading them to prioritize other features instead, there are also other concerns about additional costs, limited resources, the assumption that their target audience does not include people with disabilities can deter developers from investing in accessibility.</p>

<p>Legal enforcement of accessibility regulations may be weak or inconsistent in some regions, reducing the incentive to comply, moreover, the emphasis on aesthetics over accessibility, inadequate training on accessibility best practices, and resistance to change can further hinder the adoption of accessible design, despite these challenges, raising awareness and promoting the positive impact of accessibility remain crucial in encouraging developers to make their applications inclusive and accessible to all users.</p>

<p>Several countries have enacted laws and regulations to enforce digital accessibility. In the United States, the Americans with Disabilities Act (<a href="https://www.ada.gov/">ADA</a>) and Section 508 of the Rehabilitation Act of 1973 outline accessibility requirements for websites, applications, and other digital content provided by federal agencies and entities receiving federal funding.</p>

<p>The Web Content Accessibility Guidelines (<a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines">WCAG</a>), created by the Web Accessibility Initiative (<a href="https://www.w3.org/WAI/">WAI</a>) of the World Wide Web Consortium (<a href="https://www.w3.org/" title="W3C">W3C</a>), are widely recognized as the global standard for web accessibility, these guidelines provide specific criteria for making digital content accessible to individuals with disabilities.</p>

<p>Failure to comply with accessibility regulations and standards can lead to legal consequences. Companies and organizations that do not provide accessible digital content may face complaints, lawsuits, or enforcement actions by individuals, advocacy groups, or government agencies.</p>

<p>Penalties can include fines, legal fees, court orders to rectify accessibility issues, and reputational damage.</p>

<p>Several high-profile cases have set important precedents for digital accessibility enforcement, resulting in settlements or court rulings against companies that were found to have inaccessible websites or applications, these cases highlight the significance of accessibility and the legal ramifications of non-compliance.</p>

<p>Numerous prominent cases have established crucial precedents for enforcing digital accessibility, leading to settlements or court rulings against companies with inaccessible websites or applications. Notably, Domino‚Äôs Pizza, Netflix, and Target faced legal issues related to the lack of accessible applications for individuals with disabilities. The Ninth Circuit Court of Appeals ruled in favor of a blind plaintiff, stating that the ADA applies to websites and mobile apps. Netflix settled with the National Association of the Deaf, agreeing to make its streaming content accessible with closed captions. Similarly, Target settled with the National Federation of the Blind, committing to enhance its website‚Äôs accessibility.</p>

<p>These cases emphasize the significance of digital accessibility and the legal consequences for non-compliance, prompting businesses to increasingly prioritize accessibility for a more inclusive online environment.</p>

<p>Main types of disabilities and impairments:</p>

<table><tbody><tr><td>Visual</td><td>Users with visual impairments may have a partial or complete loss of vision. They rely on assistive technologies like VoiceOver to navigate the app using spoken feedback. Developers must ensure that UI elements have meaningful labels, provide appropriate descriptions, and support dynamic text sizes for better readability. Additionally, maintaining proper contrast and avoiding reliance on color-only cues is crucial to aid users with low vision.<br /><br />When creating an accessible app, developers should consider various visual impairments, such as blindness, low vision, color blindness, glaucoma, cataracts, macular degeneration, nystagmus, diabetic retinopathy, hemianopia, and photophobia.<br /><br />To accommodate users with these conditions, designers should prioritize VoiceOver support, dynamic text sizing, high contrast options, and clear layouts. Regular accessibility testing with assistive technologies ensures the app meets the needs of all users, providing an inclusive experience for those with visual challenges.</td></tr><tr><td>Auditory</td><td>Users with auditory impairments experience hearing loss, which can range from mild to profound. Closed captioning and subtitles are essential for video or audio content to make it accessible to this audience. Developers should also consider providing visual or haptic feedback for important alerts or notifications.</td></tr><tr><td>Motor</td><td>Users with motor impairments may have difficulty with precise touch gestures or using physical buttons. To accommodate these users, developers should ensure that app elements are well-spaced and have an appropriate touch target size. Supporting alternative input methods like switch control and voice commands can also enhance accessibility for users with motor challenges.</td></tr><tr><td>Cognitive</td><td>Users with cognitive impairments may face challenges with memory, attention, and problem-solving. To cater to this audience, developers should strive for simplicity and clarity in the app's user interface. Avoiding complex navigation flows and providing clear instructions can make the app more user-friendly for individuals with cognitive disabilities.</td></tr><tr><td>Speech</td><td>Users with speech impairments may have difficulty communicating through traditional speech. Developers can consider integrating communication tools or support for alternative input methods like text-to-speech or augmentative and alternative communication (AAC) into their apps.</td></tr><tr><td>Situational disabilities</td><td>Users in certain situations, such as noisy environments or poor lighting conditions, may benefit from accessibility features like closed captioning or larger text sizes.</td></tr></tbody></table>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[iOS accessibility, from a developer‚Äôs point of view, refers to the set of tools, technologies, and guidelines provided by Apple to ensure that iOS applications are usable and inclusive for people with disabilities.]]></summary></entry><entry><title type="html">SwiftUI views are values and not objects!</title><link href="http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs" rel="alternate" type="text/html" title="SwiftUI views are values and not objects!" /><published>2023-05-19T00:00:00+03:00</published><updated>2023-05-19T00:00:00+03:00</updated><id>http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs</id><content type="html" xml:base="http://localhost:4000/blog/swiftui-views-are-values-and-not-objects-overlooking-this-can-lead-to-bugs"><![CDATA[<p>In SwiftUI, views are value types rather than traditional objects üßê, this design approach is a fundamental aspect of SwiftUI‚Äôs declarative programming model and is aligned with the Swift language‚Äôs emphasis on value semantics.
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/swiftui_inside_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>As value types, views in SwiftUI are immutable and are copied when needed, resulting in predictable behavior and easy management of state and data flow, this means that when you modify a view, you are actually creating a new instance with the desired changes, rather than mutating the existing view, this immutability allows SwiftUI to efficiently track changes and perform targeted updates to the user interface.</p>

<p>Value types promote a more functional and declarative style of programming, where you describe the desired state and SwiftUI takes care of updating the view hierarchy accordingly, they are also thread-safe by default, as copies are made when passing views between different execution contexts.</p>

<p>Another advantage of using value types for views is that they enable SwiftUI‚Äôs built-in animations and transitions, by comparing the old and new values of a view, SwiftUI can automatically animate the changes, resulting in smooth and visually appealing user interface updates.</p>

<p>The declarative programming paradigm is at the core of its design philosophy, declarative programming focuses on describing the desired state of the user interface rather than specifying step-by-step instructions on how to achieve that state, SwiftUI‚Äôs view tree engine leverages this approach to efficiently manage and update the user interface based on changes in the underlying state.</p>

<p>You define your user interface using a hierarchy of composable and reusable views. Each view represents a specific part of the interface and is responsible for rendering itself based on the current state, by composing these views together, you create a tree-like structure known as the view hierarchy, the view hierarchy in SwiftUI is immutable, meaning that you define it once and SwiftUI takes care of updating it based on changes to the underlying state, when the state changes, (or even when the view re-appears when scrolling back and forth), SwiftUI re-evaluates the view hierarchy and determines the minimal set of updates needed to reflect the new state, this process is known as the reconciliation algorithm (AKA diffing algorithm).</p>

<p>The reconciliation algorithm is where SwiftUI‚Äôs view tree engine shines. It efficiently compares the old and new view hierarchies, identifies the differences, and applies the necessary updates to the user interface, by only updating the specific parts of the view hierarchy that have changed, SwiftUI minimizes the amount of work needed to keep the UI in sync with the state, resulting in optimal performance.</p>

<p>In contrast to UIKit, in SwiftUI view construction and updates are unified into a single code path, views are values rather than objects, described by values conforming to the View protocol, the view tree is transient and can be recreated at any time based on the underlying state, this declarative approach eliminates the need for separate event handlers and manual UI updates like in UIKit, SwiftUI‚Äôs view tree engine efficiently reconciles state changes, performs targeted updates, and ensures a reactive UI that stays in sync with the data, by relying on value semantics, SwiftUI can perform granular updates and avoid unnecessary computations, leading to a highly performant and responsive user interface.</p>

<p>By relying on a declarative approach, SwiftUI allows developers to focus on describing the desired end state of the UI rather than worrying about the low-level details of UI manipulation, this shift in mindset üòé leads to more maintainable and expressive code, as developers can easily reason about the UI based on its desired state.</p>

<p>Another significant aspect of SwiftUI‚Äôs view tree engine is its ability to efficiently handle updates. As views in SwiftUI are value types, <em><strong>changes in the state result in the creation of new view instances rather than mutating existing ones</strong></em>. SwiftUI employs a mechanism called ‚Äúvalue comparison‚Äù to determine the differences between the old and new views, enabling it to perform targeted updates to the UI.</p>

<p>Additionally, SwiftUI‚Äôs view tree engine embraces a reactive programming model. Views in SwiftUI are not just passive representations of UI elements but are also capable of reacting to changes in the state, this reactive nature enables automatic propagation of state changes throughout the view hierarchy, ensuring that the UI remains synchronized with the underlying data.</p>

<p>In conclusion, SwiftUI‚Äôs view tree engine revolutionizes UI development by embracing the declarative programming paradigm. It provides an efficient and responsive user interface by leveraging value types, value comparisons, and reactive programming.</p>

<p>The ability to describe UI in a declarative manner, combined with targeted updates and optimization techniques, empowers developers to create intuitive and performant user interfaces with ease.</p>

<p><img src="images/dream_TradingCard-69-1-888x1024.jpg" alt="" /></p>

<hr />]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[In SwiftUI, views are value types rather than traditional objects üßê, this design approach is a fundamental aspect of SwiftUI‚Äôs declarative programming model and is aligned with the Swift language‚Äôs emphasis on value semantics.]]></summary></entry><entry><title type="html">This is why I don‚Äôt use GIT GUI tools.</title><link href="http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools" rel="alternate" type="text/html" title="This is why I don‚Äôt use GIT GUI tools." /><published>2023-01-30T00:00:00+03:00</published><updated>2023-01-30T00:00:00+03:00</updated><id>http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools</id><content type="html" xml:base="http://localhost:4000/blog/this-is-why-i-dont-use-git-gui-tools"><![CDATA[<p>Any seasoned iOS engineer who uses Xcode can see that it lacks a lot of git features, which is OK as it‚Äôs not mainly a source control application.<br />
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/git_cli_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>We can see only primitive features there, which may suffice for personal or small projects, but if you are working on a larger team, you will find it very difficult and sometimes impossible to use source control using the IDE only.</p>

<p><img src="images/image-3.png" alt="" />
Xcode‚Äôs Source Control</p>

<p>Some Engineers may also notice that markers near files like ‚ÄúA‚Äù, ‚ÄúM‚Äù and ‚ÄúC‚Äù etc.. are stuck most of the time too, so you wont be able to directly tell about file statuses if they are added, modified, conflicting, etc..</p>

<p>Convincing backend engineers to use the terminal will be easier, because GUI will not automatically update repo‚Äôs trunk on a server daily at 1:30 AM, but a cronjob that deals with the CLI can easily do this, on the other hand, convincing a mobile developer about this can be a bit more more difficult, because the need for this is not easily demonstrated.</p>

<p>I will start directly with discussing few real life examples.. I‚Äôm sure I can think of dozens of cases, but let‚Äôs keep this post small.. I will list the commands I use, so you can have an idea about the more power we can have in terminal.</p>

<p><strong>1- PR Reverts:</strong> a feature introduced by Github, PR reverts, say you have an already merged pull request, and you want to revert it before a tight-deadline like a branch cut, using Github‚Äôs revert feature will not ask about details of commits to be removed, it most probably will remove commits that were merged in the PR, so you may easily end up removing extra stuff that is irrelevant by accident.</p>

<p>But using such command, you will have fine-grained control about what commit to remove or keep.</p>

<p><code class="language-plaintext highlighter-rouge">git revert --no-commit someHash   </code><br />
<strong>2- Submodules:</strong> if you have nested git repos (submodules), such feature maybe not be existent in most GUI tools.</p>

<p>I normally have terminal open all day, and I can‚Äôt live without it üßê, I hate to push buttons without knowing exactly what each button does, tools can come and go, the CLI will be always what GUI tools are built on.</p>

<p>It‚Äôs convenient to set up install scripts, build scripts, deploy scripts, etc.. when working on a large team, one will have no idea what <strong><em>exactly</em></strong> happens in the GUI based app, and in the old times I‚Äôve seen colleagues do bad things impossible to restore without the CLI ü§¶üèª.</p>

<p>I feel several times faster using the command line than clicking through with a mouse.</p>

<p>GIT GUI tools were meant to mitigate complexity, but to me, they seem to add more complexity if the project is large, I once seen non-git standard terminology, which normally makes things harder in general.</p>

<p>PS: the only real use of source control in Xcode is the diffing tools, it visualizes diffs perfectly. ü§ì</p>

<figure>

<table><tbody><tr><td>git add</td></tr><tr><td>git annotate</td></tr><tr><td>git bisect</td></tr><tr><td>git blame</td></tr><tr><td>git checkout</td></tr><tr><td>git checkout -b</td></tr><tr><td>git cherry-pick</td></tr><tr><td>git clean -fdx</td></tr><tr><td>git clone</td></tr><tr><td>git clone --single-branch</td></tr><tr><td>git commit</td></tr><tr><td>git commit --amend -m "New commit message."</td></tr><tr><td>git config</td></tr><tr><td>git diff</td></tr><tr><td>git diff --check</td></tr><tr><td>git fetch</td></tr><tr><td>git gc</td></tr><tr><td>git init</td></tr><tr><td>git log</td></tr><tr><td>git log --all</td></tr><tr><td>git log --oneline</td></tr><tr><td>git log --summary</td></tr><tr><td>git log -p</td></tr><tr><td>git merge</td></tr><tr><td>git pull --rebase</td></tr><tr><td>git push</td></tr><tr><td>git push --set-upstream origin</td></tr><tr><td>git push -u origin feature_branch_name</td></tr><tr><td>git rebase</td></tr><tr><td>git remote -av</td></tr><tr><td>git remote add</td></tr><tr><td>git reset --hard</td></tr><tr><td>git restore</td></tr><tr><td>git revert</td></tr><tr><td>git rm</td></tr><tr><td>git shortlog</td></tr><tr><td>git show</td></tr><tr><td>git stash</td></tr><tr><td>git stash list</td></tr><tr><td>git stash pop</td></tr><tr><td>git status</td></tr><tr><td>git tag</td></tr><tr><td>git worktree</td></tr></tbody></table>

<figcaption>

common git commands that I use (sorted alphabetically)

</figcaption>



</figure>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[Any seasoned iOS engineer who uses Xcode can see that it lacks a lot of git features, which is OK as it‚Äôs not mainly a source control application.]]></summary></entry><entry><title type="html">Why I prefer to store my files on a digital ocean space &amp;amp; not google drive or dropbox.</title><link href="http://localhost:4000/blog/backup-on-spaces" rel="alternate" type="text/html" title="Why I prefer to store my files on a digital ocean space &amp;amp; not google drive or dropbox." /><published>2023-01-21T00:00:00+03:00</published><updated>2023-01-21T00:00:00+03:00</updated><id>http://localhost:4000/blog/backup-on-spaces</id><content type="html" xml:base="http://localhost:4000/blog/backup-on-spaces"><![CDATA[<p>This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.<br />
<!--more-->
<!-- _includes/centered-image.html --></p>
<div class="centered-image">
    <img src="images/covers/do_space_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>I‚Äôm one of the people who once used floppies to backup html pages, (3DMax Tutorials back then) from internet caf‚Äôes back in 2003, then came CDs, then came DVDs, I also remember the first flash drive my father got me as a teenager, it was 128 MB, this was not affordable for most of the people, now more than 1000x sized SSDs are way cheaper.</p>

<p>The common solutions are google drive &amp; dropbox, they offer (2TB plan) that are $10 monthly, but I prefer to use my own mountable drive with a CDN, to distribute my files with ease, the best way I found to store my work, was storing it on a digital ocean space (similar to AWS S3), and use a client (like cuber-duck) on my mac to directly mount it, or on any device I have.</p>

<p><img src="images/image-2.png" alt="" /></p>

<p>Pros &amp; Cons</p>

<table><tbody><tr><td><strong>Pros</strong></td></tr><tr><td>Direct links!</td></tr><tr><td>Economic, it starts with 5$</td></tr><tr><td>Saved bandwidth, Content Delivery Network is easily setup, where you can save big amounts of transfer without crossing the caps.</td></tr><tr><td>Total control on meta data and content type of files, etc... <em>for example, you can specify if an uploaded mp4 is streamable or downloadable.</em></td></tr><tr><td>Easily mounted into any device or server.</td></tr><tr><td>Your files are served, and not just stored, for instance, you can host an angular website on it, without having load on your server.</td></tr><tr><td>You can mask the url, to reflect your domain, which is more professional for clients, when doing demos.</td></tr></tbody></table>

<table><tbody><tr><td><strong>Cons</strong></td></tr><tr><td>- Can require some technical knowledge at first for some people.</td></tr><tr><td>- Most of the desktop clients to mount such drives are not opensource nor free.</td></tr><tr><td>- Files cannot be shared with specific people, they are either public or not.</td></tr></tbody></table>

<p><strong>Use cases are infinite:</strong></p>

<p>- for example, if you do scraping, I was able to download few huge youtube channels as a background job on the server, without consuming my internet plan, without keeping some device downloading, and without having to store files locally, they are stored directly there üßê.</p>

<p>- it works like a NAS (Network attached server), or as a media center.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[This is not directly related to swift or iOS, but thought it‚Äôs worth sharing, since I couldn‚Äôt find any article that mention such way to backup files.]]></summary></entry><entry><title type="html">Gentle Introduction To Unit Testing.</title><link href="http://localhost:4000/blog/gentle-introduction-to-unit-testing" rel="alternate" type="text/html" title="Gentle Introduction To Unit Testing." /><published>2023-01-16T00:00:00+03:00</published><updated>2023-01-16T00:00:00+03:00</updated><id>http://localhost:4000/blog/gentle-introduction-to-unit-testing</id><content type="html" xml:base="http://localhost:4000/blog/gentle-introduction-to-unit-testing"><![CDATA[<p>One Monday morning, some new developer (Penguin üêß) started their first new job as a software engineer, the chat between two developers¬†(Penguin üêß)¬†and their team leader¬†(Rex¬†ü¶ñ) went like this.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/unit_testing_intro_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>(Penguin üêß): I have noticed that we have test cases written for almost all features in our mobile app, why would we write unit tests if we have QA team that does the testing and quality assurance?</p>

<p>(Rex¬†ü¶ñ): Yes, writing unit tests does not only guarantee that features behave correctly just after being developed / shipped, it also guarantees that when someone write any relevant code of new feature, it does not break any existing or any piece of code.</p>

<p>the QA team can never test everything all over again when some new feature is introduced, it‚Äôs like an investment, you spend extra time writing unit tests during developing a feature, but prevent any potential bugs from happening in the future.</p>

<p>A CI/CD job running all tests will prevent any developer from merging a code that breaks an existing feature (in case that feature has well written tests), there are other benefits, like tests can be a good documentation too for anyone intending to read your code.</p>

<p>(Penguin üêß): my first function I wrote is about (application force update) checking, it compares a string that resembles an application version like 1.0.2, and compares it with another version like 1.1.2 to check if the app needs force update or not.</p>

<p>so my responsibility would be checking against all the values of minimum value 000.000.000 up to 999.999.999 value, for both target and current versions, so my test function should iterate through all possible cases, right?</p>

<p>(Rex¬†ü¶ñ): No!!, the idea of test cases, is that covers edge cases, and maybe un-expected cases like minus numbers in this example, and maybe few random usual cases, maybe have these test functions‚Ä¶</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>testWhenCurrentVersionIsLessThanRequiredVersionRequiresUpdate
testWhenRequiredVersionIsEqualToCurrentVersionRequiresNoUpdate
testMaximumMajorNumberComparesCorrectly
testMaximumMinorNumberComparesCorrectly
testMinimumPatchNumberComparesCorrectly
testMinimumMajorNumberComparesCorrectly
testMinimumMinorNumberComparesCorrectly
testMinimumPatchNumberComparesCorrectly
testMinimumNumbersComparesCorrectly
</code></pre></div></div>

<p>‚Ä¶. + some random normal cases‚Ä¶</p>

<p>keep in mind, the naming convention should show the intention of the developer, even if the test function name becomes lengthy.</p>

<p>covering all the cases, will cause tests to take long time, maybe few minutes in your case, you must totally avoid that, remember the unit tests criteria? the way you do it will break the first criteria ‚ÄúFast‚Äù, the normal time for tests is something like 50ms or something.</p>

<p>Unit Tests Criteria ‚ÄúF.I.R.S.T‚Äù:</p>

<p><em>Fast</em> : we can run dozens of them in a second, if not more<br />
<em>Isolated</em> : should not depend on each other, or any external state.<br />
<em>Repeatable</em> : they should always give the same result when they are run, like a pure function.<br />
<em>Self</em> -Verifying: the test must unambiguously say whether it passed or failed, with no room for interpretation.<br />
<em>Timely</em> : they should be written before or alongside the production code that you are testing.<br /></p>

<p>(Penguin üêß): But we must have high test coverage, like 100% coverage to cover all cases, don‚Äôt we?</p>

<p>(Rex¬†ü¶ñ): Test coverage means coverage on the code logic itself, like the percentage of lines tested, not on the ‚Äúpossible values coverage‚Äù, and by the way, test coverage is a flawed metric, it only means we have test functions that call our code, it does not mean that the test functions are good.</p>

<p>(Penguin üêß): Good, yeah, any other benefits for having unit tests?</p>

<p>(Rex¬†ü¶ñ): Testing reduces maintenance costs and therefore quantity of bugs, there are also other costs to consider like customer impact, the longer an issue goes undiscovered, the more expensive it is, which can result in negative reviews &amp; lost trust, and of course lost money!</p>

<p>(Penguin üêß): But why follow TDD (Test Driven Development) methodology? why write the tests before writing the feature itself?</p>

<p>(Rex¬†ü¶ñ): There are a lot of other development methodologies, like TDD, ATDD, DDD, BDD, .. these are lengthy topic, I encourage you to read about them quickly, and the RGR lifecycle of TDD.</p>

<p>(Penguin üêß): That‚Äôs really cool, how can I make sure my code is testable? and what makes it not?</p>

<p>(Rex¬†ü¶ñ): You may consider architectural patterns, that make code more separated and easily tested, like MVVM, VIPER, VIP, ‚Ä¶, FRP may make your code easier to test, using dependency injection, and coordinator pattern, using pure functions, etc‚Ä¶</p>

<p>(Penguin üêß): So I always need to mock stuff when testing, right?</p>

<p>(Rex¬†ü¶ñ): No, Mocks are type of test doubles, there are also Fakes, Stubs, Spies, Dummies, look them up, and know when to use each, they are so confusing at first.</p>

<p><img src="images/test_doubles.jpg" alt="" />
When we say test doubles, the name is derived from stunt doubles</p>

<p>(Penguin üêß): what other tips do you have?</p>

<p>(Rex¬†ü¶ñ): yes, there are a few on top of my head</p>

<blockquote>
  <ul>
    <li>In network testing for mobile in general, no HTTP request should be made, you test the networking feature it self. <br /></li>
    <li>tests run alphabetically, you should not rename your tests to change their order of running, remember that tests should be independent, changing the order intentionally will break this criteria. <br /></li>
    <li>Xcode provides performance tests, that compares between previous runs, where you can also change the baseline, it also gives nicely formatted test coverage markers. <br /></li>
    <li>Writing no tests is better than writing flaky tests!</li>
  </ul>
</blockquote>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><summary type="html"><![CDATA[One Monday morning, some new developer (Penguin üêß) started their first new job as a software engineer, the chat between two developers¬†(Penguin üêß)¬†and their team leader¬†(Rex¬†ü¶ñ) went like this.]]></summary></entry><entry><title type="html">Refresher: Problem Solving (1-4)</title><link href="http://localhost:4000/blog/problem_solving_swift_1_4" rel="alternate" type="text/html" title="Refresher: Problem Solving (1-4)" /><published>2022-11-16T00:00:00+03:00</published><updated>2022-11-16T00:00:00+03:00</updated><id>http://localhost:4000/blog/problem_solving_swift_1_4</id><content type="html" xml:base="http://localhost:4000/blog/problem_solving_swift_1_4"><![CDATA[<p>After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.</p>

<!--more-->
<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/algo_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/grokking.jpeg" alt="" class="centered" />
    <p align="center"><em>Grokking Algorithms book</em></p>
  </div>

<p>Understanding data structures is essential before diving into problem-solving. While I won‚Äôt go into detailed explanations here, I recommend attempting to solve the problems on your own without immediately referring to the solutions.</p>

<h2 id="problem-1">Problem 1</h2>
<p><strong>Return a pair of two distinct values (if any) that sum up to a target number, from a nonempty array that contains distinct integers.</strong></p>

<p>Here are different solutions with varying time complexities:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">..&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n^2)</span>
<span class="kd">func</span> <span class="nf">solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">targetSum</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n*log(n))</span>
<span class="kd">func</span> <span class="nf">solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">sorted</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">leftPointer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">rightPointer</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">leftPointer</span> <span class="o">&lt;</span> <span class="n">rightPointer</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">leftMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">leftPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">rightMost</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">rightPointer</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">currentSum</span> <span class="o">=</span> <span class="n">leftMost</span> <span class="o">+</span> <span class="n">rightMost</span>
        <span class="k">if</span> <span class="n">currentSum</span> <span class="o">==</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">leftMost</span><span class="p">,</span> <span class="n">rightMost</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&lt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">leftPointer</span> <span class="o">=</span> <span class="n">leftPointer</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">currentSum</span> <span class="o">&gt;</span> <span class="n">targetSum</span> <span class="p">{</span>
            <span class="n">rightPointer</span> <span class="o">=</span> <span class="n">rightPointer</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">targetSum</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">numberDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">mayMatch</span> <span class="o">=</span> <span class="n">targetSum</span> <span class="o">-</span> <span class="n">number</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">exists</span> <span class="o">=</span> <span class="n">numberDictionary</span><span class="p">[</span><span class="n">mayMatch</span><span class="p">],</span> <span class="n">exists</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">mayMatch</span><span class="p">,</span> <span class="n">number</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">numberDictionary</span><span class="p">[</span><span class="n">number</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="analysis">Analysis:</h3>

<p>Each solution has its trade-offs in terms of time complexity. Running a simple benchmark on an array with 100,000 values yields the following results:</p>

<ul>
  <li>solution1: 31.88 s.</li>
  <li>solution2: 18.41 s.</li>
  <li>solution3: 0.38 s.</li>
  <li>solution4: 0.20 s. üèÜ</li>
</ul>

<p>As you can see, solution 4 is the most efficient in this case, with a time complexity of O(n).</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/prob_001_graph-1024x687.png" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>The functions used for benchmarking are:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">operation</span><span class="p">:()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Time elapsed for </span><span class="se">\(</span><span class="n">title</span><span class="se">)</span><span class="s">: </span><span class="se">\(</span><span class="n">timeElapsed</span><span class="se">)</span><span class="s"> s."</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">timeElapsedInSecondsWhenRunningCode</span><span class="p">(</span><span class="nv">operation</span><span class="p">:</span> <span class="p">()</span><span class="o">-&gt;</span><span class="p">())</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">startTime</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span>
    <span class="nf">operation</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">timeElapsed</span> <span class="o">=</span> <span class="kt">CFAbsoluteTimeGetCurrent</span><span class="p">()</span> <span class="o">-</span> <span class="n">startTime</span>
    <span class="k">return</span> <span class="kt">Double</span><span class="p">(</span><span class="n">timeElapsed</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="problem-2">Problem 2</h2>
<p>Given two non-empty arrays, write a function that determines if the second array is a subsequence of the first array.</p>

<blockquote>
  <p>Keep in mind that a subsequence is not the same as a subarray.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">arrIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">arrIdx</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="n">seqIdx</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">array</span><span class="p">[</span><span class="n">arrIdx</span><span class="p">]</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="n">arrIdx</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>

<span class="c1">// Time: O(n)</span>
<span class="kd">func</span> <span class="nf">isValidSubsequence_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">sequence</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">array</span> <span class="o">==</span> <span class="n">sequence</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">seqIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">sequence</span><span class="p">[</span><span class="n">seqIdx</span><span class="p">]</span> <span class="p">{</span>
            <span class="n">seqIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">seqIdx</span> <span class="o">==</span> <span class="n">sequence</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="test-results">Test Results:</h3>

<p>Using these arrays:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArray1</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900005</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900005</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">let</span> <span class="nv">myArray2</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">900000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">900000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>The results were:</p>
<ul>
  <li>Time elapsed for solution1: 28.102 s.</li>
  <li>Time elapsed for solution2: 14.446 s. üèÜ</li>
</ul>

<p>Solution 2 is more efficient, even though both solutions have the same time complexity. Can you guess why? ü§ì</p>

<h2 id="problem-3">Problem 3</h2>
<p>Write a function that takes in a non-empty array of integers sorted in ascending order and returns a new array with the squares of the original integers, also sorted in ascending order.</p>

<p>Here are four solutions along with explanations:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad solution, appending is expensive; it's better to initialize an array with the required length.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution1</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span> <span class="o">*</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(nlog(n)) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution2</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">value</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Using higher-order functions for high performance.</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution3</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">*</span> <span class="nv">$0</span> <span class="p">}</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>
<span class="c1">// Time: O(n) | Space O(n)</span>
<span class="kd">func</span> <span class="nf">sortedSquaredArray_solution4</span><span class="p">(</span><span class="n">_</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">sortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
    <span class="k">var</span> <span class="nv">smallerValueIdx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">largerValueIdx</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="k">in</span> <span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">smallerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">smallerValueIdx</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">largerValue</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">largerValueIdx</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">abs</span><span class="p">(</span><span class="n">smallerValue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">abs</span><span class="p">(</span><span class="n">largerValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">smallerValue</span> <span class="o">*</span> <span class="n">smallerValue</span>
            <span class="n">smallerValueIdx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">sortedSquares</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">largerValue</span> <span class="o">*</span> <span class="n">largerValue</span>
            <span class="n">largerValueIdx</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sortedSquares</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="benchmarking">Benchmarking:</h3>

<p>For the input:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">myArraySortedSquares</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nf">stride</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="o">-</span><span class="mi">5000000</span><span class="p">,</span> <span class="nv">through</span><span class="p">:</span> <span class="mi">5000000</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>Time elapsed for solution1: 6.786 s.</li>
  <li>Time elapsed for solution2: 6.275 s.</li>
  <li>Time elapsed for solution3: 5.106 s.</li>
  <li>Time elapsed for solution4: 1.637 s. ü•á</li>
</ul>

<h2 id="problem-4">Problem 4</h2>

<p>Given a 2D array of matches <code class="language-plaintext highlighter-rouge">[host, guest]</code> and an array of results where 1 means the host team won, determine the player with the most wins.</p>

<p>Example:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Keymer"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Aronian"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">]</span>
<span class="p">]</span>
<span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="k">let</span> <span class="nv">HOST_TEAM_WON</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">let</span> <span class="nv">WIN_POINTS</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1">// O(n) time | O(k) space , where n: are matches and k is the number of teams</span>
<span class="kd">func</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">_</span> <span class="nv">matches</span><span class="p">:</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]],</span> <span class="n">_</span> <span class="nv">results</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">bestPlayer</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">scores</span> <span class="o">=</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]()</span>
    <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">match</span><span class="p">)</span> <span class="k">in</span> <span class="n">matches</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="p">(</span><span class="nv">host</span><span class="p">,</span> <span class="nv">guest</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">let</span> <span class="nv">winning</span> <span class="o">=</span> <span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="kt">HOST_TEAM_WON</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="n">host</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="n">guest</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">}</span>
        <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="kt">WIN_POINTS</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">winning</span><span class="p">]</span><span class="o">!</span> <span class="o">&gt;</span> <span class="n">scores</span><span class="p">[</span><span class="n">bestPlayer</span><span class="p">]</span><span class="o">!</span> <span class="p">{</span>
            <span class="n">bestPlayer</span> <span class="o">=</span> <span class="n">winning</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">bestPlayer</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">generateData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">([[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">,</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">players1</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Carlsen"</span><span class="p">,</span> <span class="s">"Ding Liren"</span><span class="p">,</span> <span class="s">"Nepomniachtchi"</span><span class="p">,</span> <span class="s">"Karjakin"</span><span class="p">,</span> <span class="s">"Aronian"</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">players2</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Keymer"</span><span class="p">,</span> <span class="s">"Vitiugov"</span><span class="p">,</span> <span class="s">"Gukesh D"</span><span class="p">,</span> <span class="s">"Andreikin"</span><span class="p">,</span> <span class="s">"Grischuk"</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">matches</span> <span class="o">=</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]]</span> <span class="p">()</span>
    <span class="k">var</span> <span class="nv">results</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
    <span class="k">let</span> <span class="nv">possibleResults</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="mi">10</span> <span class="p">{</span>
        <span class="n">matches</span><span class="o">.</span><span class="nf">append</span><span class="p">([</span><span class="n">players1</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span> <span class="n">players2</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="s">""</span><span class="p">])</span>
        <span class="n">results</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">possibleResults</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span> <span class="p">??</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
    <span class="nf">return</span> <span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">problem_04_solutions</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="nf">generateData</span><span class="p">()</span>
    <span class="nf">printTimeElapsedWhenRunningCode</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span><span class="s">"solution1"</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">winner</span> <span class="o">=</span> <span class="nf">chessWinner</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">winner</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Math" /><category term="Algorithms" /><summary type="html"><![CDATA[After reading the very popular book, Grokking Algorithms, I decided to blog about algorithms and data structures. I find the book is very informative and easy to digest.]]></summary></entry><entry><title type="html">iOS/Android Developer Security Basics</title><link href="http://localhost:4000/blog/ios-android-developer-security-basics" rel="alternate" type="text/html" title="iOS/Android Developer Security Basics" /><published>2022-03-13T00:00:00+03:00</published><updated>2022-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/ios-android-developer-security-basics</id><content type="html" xml:base="http://localhost:4000/blog/ios-android-developer-security-basics"><![CDATA[<p>Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/security_basics_full.jpg" alt="Mobile Security Basics" class="centered" />
    <p align="center"><em>JomJom!</em></p>
  </div>

<h2 id="the-importance-of-security-in-mobile-development">The Importance of Security in Mobile Development</h2>

<p>ü•∏: What are the risks of not having good security precautions? Why do we spend so much on security?<br />
üíÄ: There are over 500 reported incidents of data breaches each year, with each incident costing an average of 3.5M to 5.0M USD. Remote work has increased these costs by 15%, as attackers find more opportunities when targets are spread across different locations.</p>

<p>ü•∏: When people talk about security, the server is often seen as the main line of defense. Why should mobile developers be concerned if the server is secure?<br />
üíÄ: Even if the server is secure, mobile apps still need to implement security best practices. Mobile apps have direct access to sensitive data like location, contacts, and files. A compromised app could leak this information, posing significant risks. Unlike browsers, mobile apps run locally on devices without the same protections, making vulnerabilities in app code a target for attackers.</p>

<h2 id="cross-platform-security-concerns">Cross-Platform Security Concerns</h2>

<p>ü•∏: But you‚Äôre an iOS developer, and I develop for Android. Are your tips applicable to Android too?<br />
üíÄ: Yes, many security precautions apply to both platforms, but it‚Äôs important to note that iOS and Android are based on different operating systems. iOS is based on Darwin (BSD), which is Unix-like, while Android is Linux-based. However, both platforms share common security concerns.</p>

<p>ü•∏: Why can‚Äôt we just rely on HTTPS for security?<br />
üíÄ: HTTPS protects data in transit between the client and server, but only if the TLS certificate is valid and uncompromised. It‚Äôs just one layer of security; other aspects, like secure storage and code integrity, also need attention.</p>

<h2 id="mobile-security-weak-points">Mobile Security Weak Points</h2>

<p>ü•∏: What are the weak points in mobile security?<br />
üíÄ: Network, disk, and USB ports are common attack vectors. Understanding these entry points is key to securing your app.</p>

<h2 id="key-security-terminology">Key Security Terminology</h2>
<p>üíÄ: Here are some essential terms you should know:</p>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Basic Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Authentication</td>
      <td>Establishing a user‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Authorization</td>
      <td>Granting a user access to a resource. See <a href="https://www.sailpoint.com/identity-library/difference-between-authentication-and-authorization/">this article</a> for more.</td>
    </tr>
    <tr>
      <td>Cryptography</td>
      <td>The study of encryption and decryption techniques.</td>
    </tr>
    <tr>
      <td>Encryption</td>
      <td>Securing digital data using mathematical techniques and a key.</td>
    </tr>
    <tr>
      <td>Decryption</td>
      <td>Converting encrypted data back to its original form.</td>
    </tr>
    <tr>
      <td>Hashing</td>
      <td>Mapping data of arbitrary size to fixed-size values, often used for fingerprinting.</td>
    </tr>
    <tr>
      <td>Forensics</td>
      <td>The branch of digital science related to evidence found in computers and storage media.</td>
    </tr>
    <tr>
      <td>Sniffing</td>
      <td>Monitoring and capturing data packets in a network.</td>
    </tr>
    <tr>
      <td>HTTPS</td>
      <td>Hypertext Transfer Protocol Secure, a secure web protocol.</td>
    </tr>
    <tr>
      <td>SSL</td>
      <td>Secure Sockets Layer, a cryptographic protocol.</td>
    </tr>
    <tr>
      <td>TLS</td>
      <td>Transport Layer Security, the successor to SSL.</td>
    </tr>
    <tr>
      <td>IP Spoofing</td>
      <td>Creating IP packets with a modified source address to hide the sender‚Äôs identity.</td>
    </tr>
    <tr>
      <td>Reverse Engineering</td>
      <td>Deconstructing software or devices to extract design information.</td>
    </tr>
    <tr>
      <td>MITM</td>
      <td>Man-in-the-Middle, an attack where data between two parties is intercepted and potentially altered.</td>
    </tr>
    <tr>
      <td>XSS</td>
      <td>Cross-Site Scripting, an injection attack on web applications.</td>
    </tr>
    <tr>
      <td>SQL Injection</td>
      <td>An attack that exploits vulnerabilities in SQL queries. <a href="https://www.w3schools.com/sql/sql_injection.asp">Read more here.</a></td>
    </tr>
    <tr>
      <td>OWASP</td>
      <td>Open Web Application Security Project, a nonprofit foundation focused on improving software security.</td>
    </tr>
    <tr>
      <td>MASVS</td>
      <td>Mobile Application Security Verification Standard, part of the OWASP Mobile Security Testing Guide.</td>
    </tr>
    <tr>
      <td>Mach-O binary</td>
      <td>The binary format used by iOS and macOS applications.</td>
    </tr>
  </tbody>
</table>

<h2 id="jailbreaking-and-security-risks">Jailbreaking and Security Risks</h2>

<p>ü•∏: Why are jailbroken devices a threat to app security?<br />
üíÄ: Jailbreaking allows users to bypass built-in security features, exposing the app to potential attacks. It‚Äôs best practice to prevent jailbroken devices from running your app. Check out my <a href="https://github.com/deya-eldeen/x04_checker">x04_checker</a> repo for an iOS library that helps detect jailbroken devices.</p>

<h2 id="debugging-and-logging-concerns">Debugging and Logging Concerns</h2>

<p>ü•∏: They say debugging and print statements can be a security risk. Is that true?<br />
üíÄ: Yes, print statements are only active in development builds, but they can still send data to the USB interface. Also, <code class="language-plaintext highlighter-rouge">NSLog</code> statements remain in distribution builds, and users can access logs via the macOS Console app. Be careful not to log sensitive data or leave traces of code symbols.</p>

<h2 id="certificate-pinning-and-static-strings">Certificate Pinning and Static Strings</h2>

<p>ü•∏: What about certificate pinning?<br />
üíÄ: Certificate pinning prevents attackers from using an invalid certificate to intercept data. Implementing dynamic certificate updates within the app is crucial to prevent tampering.</p>

<p>ü•∏: And what about sensitive static strings?<br />
üíÄ: Never store sensitive strings in plist or other asset files. They are easily accessible and can expose your app to risks.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/facebookstring-1024x695.jpeg" alt="Strings Tool" class="centered" />
    <p align="center"><em>This is usage of the `strings` tool, on macos, scanning some APK.</em></p>
  </div>

<h2 id="the-risks-of-third-party-libraries">The Risks of Third-Party Libraries</h2>

<p>ü•∏: Why are third-party libraries risky for sensitive apps?<br />
üíÄ: While libraries are generally fine, they should be audited regularly. For sensitive apps, like banking, it‚Äôs better to minimize their use to avoid potential vulnerabilities.</p>

<h2 id="url-scheme-attacks-and-universal-links">URL-Scheme Attacks and Universal Links</h2>

<p>ü•∏: What about URL-scheme attacks?<br />
üíÄ: When you define a URL scheme, your app can be launched by any link matching that scheme. However, other apps can register the same scheme, posing a risk. Universal links are a safer alternative.</p>

<h2 id="final-thoughts-on-mobile-security">Final Thoughts on Mobile Security</h2>

<p>üíÄ: Achieving 100% security is impossible, but you can make attacking or cracking your app much more difficult. Remember, security is about increasing the cost and complexity of an attack relative to the value of the data.</p>

<p>Some additional tips:</p>

<ul>
  <li>Avoid Objective-C if possible; it‚Äôs easy to reverse engineer.</li>
  <li>Don‚Äôt log sensitive data.</li>
  <li>Disable keyboard caching for third-party keyboards.</li>
  <li>Store user credentials securely in the keystore or keychain.</li>
  <li>Implement App Transport Security and certificate pinning.</li>
  <li>Ensure data on disk and across the network is secure.</li>
  <li>Protect your application logic from reverse engineering.</li>
  <li>Avoid sharing sensitive data with third parties.</li>
  <li>Hide jailbreak detection deep within your app, not in the app delegate.</li>
</ul>

<p>Security isn‚Äôt just about making data impossible to access; it‚Äôs about balancing the cost and effort of data retrieval against its importance.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Security" /><category term="Math" /><summary type="html"><![CDATA[Mobile app security is a critical concern for both iOS and Android developers. This article aims to cover the essential security basics that every mobile developer should know. Presented as a conversation between two developers, Sam ü•∏ and Jomjom üíÄ, we‚Äôll explore various security concepts, risks, and best practices.]]></summary></entry><entry><title type="html">Understanding GPS Hardware Basics for Mobile Developers</title><link href="http://localhost:4000/blog/gps-hardware-basics-for-software-engineers" rel="alternate" type="text/html" title="Understanding GPS Hardware Basics for Mobile Developers" /><published>2022-03-10T00:00:00+03:00</published><updated>2022-03-10T00:00:00+03:00</updated><id>http://localhost:4000/blog/gps-hardware-basics-for-software-engineers</id><content type="html" xml:base="http://localhost:4000/blog/gps-hardware-basics-for-software-engineers"><![CDATA[<p>Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.</p>

<!--more-->

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/covers/gps_full.jpg" alt="" class="centered" />
    <p align="center"><em></em></p>
  </div>

<p>This article is structured as a conversation between an <strong>iOS developer (Alex üë®üèª‚Äçüíª)</strong> and an <strong>electrical engineer (Sarah üë©üèº‚Äçüíª)</strong>. Through their dialogue, we‚Äôll explore the fundamentals of GPS technology.</p>

<h2 id="the-basics-of-gps">The Basics of GPS</h2>

<p>üë®üèª‚Äçüíª: So what does GPS stand for?<br />
üë©üèº‚Äçüíª: It stands for <strong>Global Positioning System</strong>.</p>

<p>üë®üèª‚Äçüíª: Who created it, and for what purpose?<br />
üë©üèº‚Äçüíª: The GPS project was launched by the United States in 1973 to overcome the limitations of earlier navigation systems.</p>

<p>üë®üèª‚Äçüíª: I know GPS works without an internet connection, but do I need cellular service to use GPS?<br />
üë©üèº‚Äçüíª: No, you don‚Äôt need cellular service either.</p>

<h2 id="how-gps-works-without-internet-or-cellular-service">How GPS Works Without Internet or Cellular Service</h2>

<p>üë®üèª‚Äçüíª: How does GPS work without internet or cellular service?<br />
üë©üèº‚Äçüíª: Your device receives signals from satellites. There are about 24 operational satellites in six orbital planes.</p>

<p>üë®üèª‚Äçüíª: Does my mobile need to connect to all of these satellites?<br />
üë©üèº‚Äçüíª: No, when stationary, your device only needs to receive signals from at least three satellites. When moving, it needs signals from four satellites for accurate positioning.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/ConstellationGPS.gif" alt="GPS Satellites" class="centered" />
    <p align="center"><em>GPS Satellites in Orbit (Source: Wikipedia)</em></p>
  </div>

<p>üë®üèª‚Äçüíª: How does the GPS system identify me and send data back?<br />
üë©üèº‚Äçüíª: The satellites don‚Äôt identify you. <strong>They continuously emit synchronized pulses everywhere.</strong> Your device simply receives these signals.</p>

<h2 id="calculating-your-position">Calculating Your Position</h2>

<p>üë®üèª‚Äçüíª: How does my mobile determine my latitude, longitude, and altitude?<br />
üë©üèº‚Äçüíª: Your device compares the time it receives signals from each satellite. By calculating the time differences, it can determine your position on Earth. The satellites have highly accurate atomic clocks, which make these calculations possible.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/GPS-satellite-position-calculations-3.png" alt="GPS Position Calculation" class="centered" />
    <p align="center"><em>Calculating Position Using GPS Satellites</em></p>
  </div>

<p>üë®üèª‚Äçüíª: If the service is free and I don‚Äôt have a subscription for GPS, how is it funded?<br />
üë©üèº‚Äçüíª: GPS is one of several <strong>Global Navigation Satellite Systems (GNSS)</strong>. Others include GLONASS, BeiDou, and Galileo. These systems are funded by governments and sometimes private entities. Commercial GPS receivers might have restrictions, like not functioning at high speeds.</p>

<!-- _includes/centered-image.html -->
<div class="centered-image">
    <img src="images/Beidou_Navigation_Satellite_System_2012.png" alt="BeiDou Navigation System" class="centered" />
    <p align="center"><em>BeiDou GNSS, which doesn't have full Earth coverage</em></p>
  </div>

<h2 id="accuracy-and-limitations-of-gps">Accuracy and Limitations of GPS</h2>

<p>üë®üèª‚Äçüíª: What is the typical error margin of GPS?<br />
üë©üèº‚Äçüíª: The error margin varies but is typically between 15 to 50 meters. Some systems use additional inertial sensors to provide more accurate positioning.</p>

<p>üë®üèª‚Äçüíª: What is the minimum detectable distance?<br />
üë©üèº‚Äçüíª: Theoretically, the resolution is as fine as one inch, but in practice, it‚Äôs about three meters.</p>

<h2 id="challenges-of-using-gps-indoors">Challenges of Using GPS Indoors</h2>

<p>üë®üèª‚Äçüíª: I tried using GPS inside a large hospital, but the readings were inaccurate.<br />
üë©üèº‚Äçüíª: GPS signals do not work well indoors because they require a clear line of sight to the satellites.</p>

<p>üë®üèª‚Äçüíª: But I still got some readings on my maps app indoors.<br />
üë©üèº‚Äçüíª: That‚Äôs likely the last known location. Some devices, like those from Huawei, augment GPS data with accelerometer and gyroscope data to simulate basic indoor navigation, but it‚Äôs not reliable.</p>

<p>üë®üèª‚Äçüíª: What technologies are used for indoor navigation systems?<br />
üë©üèº‚Äçüíª: Indoor navigation typically uses beacons, Bluetooth, and other technologies. You might want to look into Apple AirTags for more information.</p>

<h2 id="using-sensors-for-positioning">Using Sensors for Positioning</h2>

<p>üë®üèª‚Äçüíª: Why can‚Äôt we just use the accelerometer and gyroscope in our phones to calculate position?<br />
üë©üèº‚Äçüíª: While you can derive some positional data from these sensors, they are prone to significant errors over time due to factors like drift and gimbal lock. Accelerometers and gyroscopes alone can‚Äôt provide absolute positioning, and their errors accumulate quickly.</p>

<p>üë®üèª‚Äçüíª: That was a lot of information. Thanks for the explanation.<br />
üë©üèº‚Äçüíª: You‚Äôre welcome! See you soon.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Understanding how GPS works can help mobile developers better utilize location services in their apps. Whether you‚Äôre developing a navigation app or just curious about the technology behind the blue dot on your map, a basic knowledge of GPS hardware can enhance your approach to location-based features.</p>]]></content><author><name>Deya Eldeen Elkhawaldeh</name></author><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><category term="Development" /><category term="iOS" /><category term="Programming" /><category term="Swift" /><category term="Hardware" /><category term="Math" /><summary type="html"><![CDATA[Mobile software developers, whether working on iOS or Android, often use GPS functionality in their apps without fully understanding how GPS works. This article is designed to give you a basic understanding of GPS hardware, so you can appreciate the underlying technology and improve your app‚Äôs location-based features.]]></summary></entry></feed>